{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stemmer"]},"docs":[{"location":"index.html","title":"\u6570\u636e\u7ed3\u6784\u57fa\u7840","text":"<p> \u7ea6 105 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p> <p>\u8bfe\u7a0b\u57fa\u672c\u4fe1\u606f</p> <ul> <li>\u8bfe\u7a0b\u540d\u79f0\uff1a\u6570\u636e\u7ed3\u6784\u57fa\u7840</li> <li>\u8bfe\u7a0b\u4ee3\u7801\uff1a<code>211C0020</code></li> <li>\u6388\u8bfe\u8001\u5e08\uff1a\u6731\u5efa\u79d1\u3001\u9648\u8d8a\u3001\u4f55\u94a6\u94ed\u3001\u6768\u5b50\u797a\u3001\u9648\u7fd4 \u2026\u2026</li> </ul> <p>\u8d44\u6e90\u76ee\u5f55</p> <ul> <li>2.x Algorithm Analysis</li> <li>3.x Lists, Stacks, and Queues</li> <li>4.x Trees</li> <li>5.x Hashing</li> <li>6.x Priority Queues(Heaps)</li> <li>7.x Sorting</li> <li>8.x The Disjoint Set ADT</li> <li>9.x Graph Algorithm</li> </ul> <p>TODOs</p> <ul> <li> \u7b14\u8bb0\u8fc1\u79fb &amp; \u6392\u7248\u3001\u5185\u5bb9\u4fee\u6b63</li> <li> \u9898\u76ee\u6574\u7406</li> <li> \u8d44\u6e90\u9875</li> </ul> <p>\u672c\u7b14\u8bb0\u8fc1\u79fb\u81ea NoughtQ's Notebook</p>"},{"location":"2-x.html","title":"Chap 2 Algorithm Analysis","text":"<p> \u7ea6 1328 \u4e2a\u5b57  137 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 8 \u5206\u949f</p> \u6838\u5fc3\u77e5\u8bc6 <ul> <li>\u65f6\u95f4\u3001\u7a7a\u95f4\u590d\u6742\u5ea6</li> </ul> <p>\u8fd9\u7ae0\u8c8c\u4f3c\u6ca1\u4ec0\u4e48\u4e1c\u897f\uff0c\u53ef\u4ee5\u91cd\u70b9\u770b\u770b\u9012\u5f52\u5427</p> <p>\u7b97\u6cd5(algorithm)\uff1a\u5b8c\u6210\u7279\u5b9a\u4efb\u52a1\u7684\u6709\u9650\u6b65\u6307\u4ee4\u3002\u6240\u6709\u7684\u7b97\u6cd5\u90fd\u5177\u5907\u4ee5\u4e0b\u7279\u5f81\uff1a</p> <ul> <li>\u8f93\u5165(input)\uff1a0\u4e2a\u6216\u591a\u4e2a\u8f93\u5165</li> <li>\u8f93\u51fa(output)\uff1a\u81f3\u5c11\u67091\u4e2a\u8f93\u51fa</li> <li>\u786e\u5b9a\u6027(definiteness)\uff1a\u6bcf\u6761\u6307\u4ee4\u90fd\u662f\u660e\u786e\u7684</li> <li>\u6709\u9650\u6027(finiteness)\uff1a\u4e0d\u7ba1\u4ec0\u4e48\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\uff0c\u7b97\u6cd5\u9700\u8981\u5728\u7ecf\u8fc7\u6709\u9650\u6b65\u540e\u7ec8\u6b62</li> <li>\u6709\u6548\u6027(effectiveness)\uff1a\u6bcf\u6761\u6307\u4ee4\u8db3\u591f\u7b80\u5355\u53ef\u884c\uff0c\u539f\u5219\u4e0a\u4f7f\u7528\u7eb8\u548c\u7b14\u4fbf\u80fd\u8868\u8fbe\u51fa\u6765\u3002</li> </ul> \u6ce8 <ul> <li>\u7a0b\u5e8f\u7531\u7f16\u7a0b\u8bed\u8a00\u4e66\u5199\uff0c\u4f46\u4e0d\u5fc5\u5728\u6709\u9650\u6b65\u5185\u5b8c\u6210\uff0c\u6bd4\u5982\u64cd\u4f5c\u7cfb\u7edf\u7684\u65f6\u949f</li> <li> <p>\u7b97\u6cd5\u80fd\u7531\u4ee5\u4e0b\u65b9\u6cd5\u63cf\u8ff0\uff1a</p> <ul> <li>\u4eba\u7c7b\u8bed\u8a00(human languages)</li> <li>\u6d41\u7a0b\u56fe(flow charts)</li> <li>\u7f16\u7a0b\u8bed\u8a00(programming languages)</li> <li>\u4f2a\u4ee3\u7801(pseudo-code)</li> </ul> </li> </ul>"},{"location":"2-x.html#what-to-analyze","title":"What to Analyze","text":"<p>\u6211\u4eec\u9700\u8981\u5206\u6790\u7b97\u6cd5\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6(time &amp; space complexity)</p> <p>\u5728\u5206\u6790\u590d\u6742\u5ea6\u524d\uff0c\u6211\u4eec\u4f5c\u51fa\u4ee5\u4e0b\u5047\u8bbe\uff1a</p> <ul> <li>\u6bcf\u6761\u6307\u4ee4\u6309\u987a\u5e8f\u6267\u884c</li> <li>\u6bcf\u6761\u6307\u4ee4\u5f88\u7b80\u5355\uff0c\u4e14\u6267\u884c\u4e00\u6761\u6307\u4ee4\u4ec5\u82b1\u8d39\u4e00\u4e2a\u65f6\u95f4\u5355\u5143</li> <li>\u89c4\u6a21\u662f\u6574\u6570\u4e14\u662f\u56fa\u5b9a\u7684\uff0c\u5e76\u4e14\u5047\u8bbe\u6709\u65e0\u9650\u7684\u5185\u5b58</li> </ul> <p>\u901a\u5e38\uff0c\u6211\u4eec\u5206\u6790\u4ee5\u4e0b\u4e24\u79cd\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5b83\u4eec\u7684\u8f93\u5165\u89c4\u6a21\u5747\u4e3a\\(N\\)\uff1a</p> <ul> <li>\\(T_{avg}(N)\\)\uff1a\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6</li> <li>\\(T_{worst}(N)\\)\u200b\u200b\uff1a\u6700\u5dee\u65f6\u95f4\u590d\u6742\u5ea6</li> </ul>"},{"location":"2-x.html#asympotic-notation","title":"Asympotic Notation","text":""},{"location":"2-x.html#definition","title":"Definition","text":"<p>\u6b64\u90e8\u5206\u77e5\u8bc6\uff08\u5927\\(O\\)\u3001\u5927\\(\\Omega\\)\u3001\u5927\\(\\Theta\\)\u8868\u793a\u6cd5\u53ca\u5176\u76f8\u5173\u89c4\u5219\uff09\u5728\u79bb\u6563\u6570\u5b66\u7684 3.2 \u8282\u4e2d\u8bb2\u5f97\u66f4\u4e3a\u8be6\u7ec6\uff0c\u8bf7\u79fb\u6b65\u6b64\u5904\u3002\u4f46\u8fd9\u91cc\u8fd8\u4ecb\u7ecd\u4e86\u5c0f\\(o\\)\u8868\u793a\u6cd5\uff1a</p> <p>\\(T(N) = o(p(N))\\)\uff1a\u5f53\\(T(N) = O(p(N))\\) \u4e14 \\(T(N) \\ne \\Theta(p(N))\\)\u200b</p> <p>\u53c2\u8003\u8d44\u6599\uff1aBig-O Cheat Sheet</p>"},{"location":"2-x.html#general-rules","title":"General Rules","text":"<ul> <li>for\u5faa\u73af(FOR LOOPS)\uff1afor\u5faa\u73af\u7684\u8fd0\u884c\u65f6\u95f4\u4e0d\u8d85\u8fc7\u201c\u5faa\u73af\u4f53\u5185\u90e8\u8bed\u53e5 \\(\\times\\) \u8fed\u4ee3\u6b21\u6570\u201d</li> <li>\u5d4c\u5957for\u5faa\u73af(NESTED FOR LOOPS)\uff1a\u5728\u4e00\u7ec4\u5d4c\u5957\u5faa\u73af\u5185\u7684\u4e00\u6761\u8bed\u53e5\u7684\u6267\u884c\u65f6\u95f4\u4e3a \u201c\u8be5\u8bed\u53e5 \\(\\times\\) \u6240\u6709\u7684for\u5faa\u73af\u89c4\u6a21\u7684\u4e58\u79ef\u201d</li> <li>\u8fde\u7eed\u7684\u8bed\u53e5(CONSECUTIVE STATEMENTS)\uff1a\u7b80\u5355\u5730\u76f8\u52a0</li> <li> <p>\u6761\u4ef6\u8bed\u53e5(IF/ELSE)\uff1a\u5bf9\u4e8e\u4e0b\u9762\u4ee3\u7801\u5757</p> <pre><code>if (condition) S1;\nelse S2\n</code></pre> <p>\u5b83\u7684\u8fd0\u884c\u65f6\u95f4\u4e0d\u4f1a\u8d85\u8fc7\u201c\u6d4b\u8bd5\u6761\u4ef6 + S1 \u548c S2 \u4e2d\u8fd0\u884c\u65f6\u95f4\u7684\u6700\u957f\u8005\u201d</p> </li> <li> <p>\u9012\u5f52(RECURSION)\uff1a\u6211\u4eec\u4ece\u6590\u6ce2\u90a3\u5951\u6570\u7684\u4f8b\u5b50\u4e0b\u624b\u5206\u6790\uff1a</p> </li> </ul> \u5173\u4e8e\u6590\u6ce2\u90a3\u5951\u6570 <ul> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\\(O(N)\\)\u3002\u7406\u89e3\u9012\u5f52\u7684\u5806\u6808\u8c03\u7528\uff08\u4e32\u884c\u7a0b\u5e8f\uff09\uff1a\u6bd4\u5982\u8981\u7b97\\(Fib(N)\\)\uff0c\u4e00\u5b9a\u662f\u5148\u7b97\u5b8c\\(Fib(N - 1)\\)\u518d\u7b97\\(Fib(N - 2)\\) \uff0c\u4e0d\u4f1a\u540c\u65f6\u8ba1\u7b97\u4e24\u8005\uff0c\u6240\u4ee5\u662f\u7ebf\u6027\u590d\u6742\u5ea6</li> <li>\u51c6\u786e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(T = \\Theta((\\dfrac{1 + \\sqrt 5}{2})^n)\\)\uff0c\u5229\u7528\u79bb\u6563\u6570\u5b66\u6559\u7684\u7ebf\u6027\u9f50\u6b21\u9012\u63a8\u5173\u7cfb\u6c42\u89e3</li> </ul> <p>\u5728\u8ba1\u7b97\u9012\u5f52\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e2d\uff0c\u6211\u4eec\u5e38\u5e38\u5efa\u7acb\u5173\u4e8e\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u9012\u63a8\u5173\u7cfb\u3002\u4e0b\u9762\u4e3e\u51e0\u4e2a\u5e38\u89c1\u7684\u9012\u63a8\u5173\u7cfb\uff1a</p> <ul> <li>\u7ebf\u6027\u9f50\u6b21\u9012\u63a8\u5173\u7cfb</li> <li>\u5f62\u5982\\(T(N) = T(N / a) + b\\)\uff0c\u5219\\(T(N)\\)\u5927\u81f4\u4e3a\\(O(\\log N)\\)\uff08\u4e25\u8c28\u7684\u5f62\u5f0f\u53ef\u53c2\u89c1\u4e3b\u5b9a\u7406\uff09</li> </ul> <p>\u8865\u5145(\u4e0d\u505a\u8981\u6c42)\uff1a\u4e3b\u5b9a\u7406</p>"},{"location":"2-x.html#compare-the-algorithms","title":"Compare the Algorithms","text":"<p>\u95ee\u9898</p> <p>\u5982\u4f55\u6c42\u89e3\u6700\u5927\u8fde\u7eed\u5b50\u5217\u548c\uff1f</p> <p>\u4e0b\u9762\u7ed9\u51fa\u4e864\u79cd\u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u9010\u4e00\u51cf\u5c0f</p>"},{"location":"2-x.html#algorithm-1","title":"Algorithm 1","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(N^3)\\)</p> <pre><code>int MaxSubsequenceSum(const int A[ ], int N)\n{\n    int ThisSum, MaxSum, i, j, k;\n\n    MaxSum = 0;\n    for (i = 0; i &lt; N; i++)\n        for (j = i; j &lt; N; j++)\n        {\n            ThisSum = 0;\n            for (k = i; k &lt;= j; k++)// \u8fd9\u91cc\u6d6a\u8d39\u4e86\u65f6\u95f4\uff0c\u4e0d\u9700\u8981\u91cd\u65b0\u4ecei\u5f00\u59cb\n                ThisSum += A[k];\n\n            if (ThisSum &gt; MaxSum)\n                MaxSum = ThisSum;\n        }\n    return MaxSum;\n}\n</code></pre>"},{"location":"2-x.html#algorithm-2","title":"Algorithm 2","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(N^2)\\)</p> <pre><code>int MaxSubsequenceSum(const int A[ ], int N)\n{\n    int ThisSum, MaxSum, i, j, k;\n\n    MaxSum = 0;\n    for (i = 0; i &lt; N; i++)\n    {\n        ThisSum = 0;\n        for (j = i; j &lt; N; j++)\n        {\n            ThisSum += A[j];\n\n            if (ThisSum &gt; MaxSum)\n                MaxSum = ThisSum;\n        }\n    }\n    return MaxSum;\n}\n</code></pre>"},{"location":"2-x.html#algorithm-3","title":"Algorithm 3","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(NlogN)\\)</p> <p>\u91c7\u7528\u5206\u6cbb(divide-and-conquer)\u7b97\u6cd5\uff0c\u53ea\u9700\u9012\u5f52\u6bd4\u8f83\u5de6\u534a\u8fb9\u5b50\u5217\u3001\u53f3\u534a\u8fb9\u5b50\u5217\u548c\u4e2d\u95f4\u7684\u5b50\u5217\uff0c\u9009\u62e9\u5176\u4e2d\u6700\u5927\u7684\u4f5c\u4e3a\u6700\u5927\u503c\u3002</p> <p>\u793a\u610f\u56fe\uff1a</p> <p><pre><code>static int MaxSubSum(const int A[ ], int Left, int Right)\n{\n    int MaxLeftSum, MaxRightSum;\n    int MaxLeftBorderSum, MaxRightBorderSum;\n    int LeftBorderSum, RightBorderSum;\n    int Center, i;\n\n    // Base Case\n    if (Left == Right)\n        if (A[Left] &gt; 0)\n            return A[Left];\n        else\n            return 0;\n\n    // \u5904\u7406\u5de6\u53f3\u4e24\u534a\n    Center = (Left + Right) / 2;\n    MaxLeftSum = MaxSubSum(A, Left, Center);\n    MaxRightSum = MaxSubSum(A, Center + 1, Right);\n\n    // \u5904\u7406\u4e2d\u95f4\u90e8\u5206\n    // \u4ece\u4e2d\u95f4\u5f00\u59cb\u5de6\u534a\u90e8\u5206\n    MaxLeftBorderSum = 0;\n    LeftBorderSum = 0;\n    for (i = Center; i &gt;= Left; i--)\n    {\n        LeftBorderSum += A[i];\n        if (LeftBorderSum &gt; MaxLeftBorderSum)\n            MaxLeftBorderSum = LeftBorderSum; \n    }\n    // \u4ece\u4e2d\u95f4\u5f00\u59cb\u53f3\u534a\u90e8\u5206\n    MaxRightBorderSum = 0;\n    RightBorderSum = 0;\n    for (i = Center + 1; i &lt;= Right; i++)\n    {\n        RightBorderSum += A[i];\n        if (RightBorderSum &gt; MaxRightBorderSum)\n            MaxRightBorderSum = RightBorderSum; \n    }\n\n    return Max3(MaxLeftSum, MaxRightSum, MaxLeftBorderSum + MaxRightBorderSum); // \u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u6bd4\u8f833\u4e2a\u6570\u7684\u5927\u5c0f\n}\n</code></pre> \u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a</p> \\[ \\begin{align} \\text{Base case:  }\\ T(1) = 1 \\quad &amp;  T(N) = 2T(N/2) + O(N) \\notag \\\\ \\therefore T(N) &amp; = 2T(N/2) + cN \\notag \\\\ &amp; = 2[2T(N/2^2) + cN/2] + cN \\notag \\\\ &amp; = 2^kO(1) + ckN \\quad \\text{where } N/2^k = 1 \\notag \\\\ &amp; = O(NlogN) \\notag \\end{align} \\]"},{"location":"2-x.html#algorithm-4","title":"Algorithm 4","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(N)\\)</p> <p>\u91c7\u7528\u5728\u7ebf(on-line)\u7b97\u6cd5\uff1a\u968f\u7740\u7a0b\u5e8f\u7684\u8fd0\u884c\uff0c\u5728\u4efb\u610f\u65f6\u95f4\u9636\u6bb5\u5185\u8ba1\u7b97\u5f53\u524d\u60c5\u51b5\u4e0b\u7684\u89e3</p> <pre><code>int MaxSubsequenceSum(const int A[ ], int N)\n{\n    int ThisSum, MaxSum, j;\n\n    ThisSum = MaxSum = 0;\n    for (j = 0; j &lt; N; j++)\n    {\n        ThisSum += A[j];\n\n        if (ThisSum &gt;= MaxSum)\n            MaxSum = ThisSum;\n        else if (ThisSum &lt; 0)\n            ThisSum = 0;\n    }\n    return MaxSum;\n}\n</code></pre>"},{"location":"2-x.html#logarithm-in-the-running-time","title":"Logarithm in the Running Time","text":"<p>\u4e0b\u9762\u5206\u6790\u7684\u4e09\u79cd\u7b97\u6cd5\uff0c\u5b83\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a\\(O(\\log N)\\)</p>"},{"location":"2-x.html#binary-search","title":"Binary Search","text":"<p>\u4f7f\u7528\u524d\u63d0\uff1a\u5217\u8868\u5df2\u6392\u597d\u5e8f</p> <p>\u5206\u6790\uff1a</p> <p>\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <pre><code>int BinarySearch(const ElementType A[ ], ElementType X, int N)\n{\n    int Low, Mid, High;\n\n    Low = 0;\n    High = N - 1;\n    while (Low &lt;= High)\n    {\n        Mid = (Low + High) / 2;\n        if (A[Mid] &lt; X)\n            Low = Mid + 1;\n        else if (A[Mid] &gt; X)\n            High = Mid - 1;\n        else\n            return Mid;\n    }\n    return NotFound;  // NotFound\u88ab\u5b9a\u4e49\u4e3a-1\n}\n</code></pre>"},{"location":"2-x.html#euclids-algorithm","title":"Euclid\u2019s Algorithm","text":"<p>\u53c8\u79f0\u8f97\u8f6c\u76f8\u9664\u6cd5\uff0c\u7528\u4e8e\u6c42\u89e3\u4e24\u4e2a\u6570\u7684\u6700\u5927\u516c\u7ea6\u6570(greatest common divisor, gcd)</p> <p>\u53c2\u8003\uff1a\u79bb\u6563\u6570\u5b66\u76f8\u5e94\u7ae0\u8282</p> \u5206\u6790 <p>\u8981\u6c42\u89e3\u4e24\u4e2a\u6570\\(M, N(M \\ge N)\\)\u7684\u6700\u5927\u516c\u7ea6\u6570\uff0c\u5148\u7b97\u51fa\u4e24\u8005\u76f8\u9664\u5f97\u5230\u7684\u4f59\u6570\uff0c\u7136\u540e\u7528\u5c0f\u7684\u6570\\(N\\)\u9664\u4ee5\u4f59\u6570\u5f97\u5230\u65b0\u7684\u4f59\u6570\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5f53\u8f83\u5c0f\u6570\u4e3a0\u65f6\u7ed3\u675f\u3002\u6b64\u65f6\u5269\u4e0b\u7684\u975e0\u6570\uff08\u5373\u8f83\u5927\u6570\uff09\u5373\u4e3a\u6700\u5927\u516c\u7ea6\u6570\u3002</p> <p>\u8981\u8bf4\u660e\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(logN)\\)\uff0c\u5148\u8bc1\u660e\u4e0b\u9762\u8fd9\u4e2a\u5b9a\u7406\uff1a $$ \\text{If }M &gt; N\\text{ ,then }M\\text{ mod }N &lt; M / 2 $$</p> <p>\u63d0\u793a\uff1a\u5206\\(N \\le M/2\\) \u548c \\(N &gt; M/2\\)\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff0c\u6613\u8bc1\uff0c\u6545\u7565\u53bb\u8bc1\u660e\u8fc7\u7a0b</p> <p>\u6709\u4e86\u8fd9\u4e2a\u5b9a\u7406\u540e\uff0c\u81ea\u7136\u800c\u7136\u5c31\u80fd\u5f97\u5230\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u5728 \\(O(logN)\\) \u5de6\u53f3\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5b9e\u9645\u7684\u590d\u6742\u5ea6\u8fd8\u7565\u5fae\u4f4e\u4e00\u4e9b\u3002</p> <p>\u4ee3\u7801\uff1a <pre><code>unsigned int Gcd(unsigned int M, unsigned int N)\n{\n    // \u8fd9\u91cc\u5df2\u7ecf\u5047\u8bbe M &gt; N\u4e86\n    unsigned int Rem;\n\n    while (N &gt; 0)\n    {\n        Rem = M % N;\n        M = N;\n        N = Rem;\n    }\n    return M;\n}\n</code></pre></p>"},{"location":"2-x.html#exponentation","title":"Exponentation","text":"<pre><code>long Pow(long X, unsigned int N)\n{\n    if (N == 0)\n        return 1;\n    // 6\u30017\u4e24\u884c\u53ef\u4ee5\u4e0d\u5199\uff0c\u56e0\u4e3a\u524d\u540e\u7684\u4ee3\u7801\u53ef\u4ee5\u5e94\u5bf9\u8be5\u60c5\u51b5\n    if (N == 1)   // 6\n        return X; // 7\n    if (IsEven(N))  // int IsEven(int N){return N % 2 == 0}\n        return Pow(X * X, N / 2);\n    else\n        return Pow(X * X, N / 2) * X;\n}\n</code></pre> <p>\u6700\u540e\u6ce8\u610f\u9012\u5f52\u7a0b\u5e8f\u7684\u4e66\u5199\u95ee\u9898\uff0c\u9519\u8bef\u7684\u4e66\u5199\u4f1a\u5f71\u54cd\u6548\u7387\uff0c\u751a\u81f3\u5bfc\u81f4\u6b7b\u5faa\u73af\uff08\u89c1\u4e66\u4e0a\u53cd\u4f8b\uff09</p>"},{"location":"2-x.html#checking-your-analysis","title":"Checking Your Analysis","text":"<p>\u5982\u679c\u7a0b\u5e8f\u8fc7\u4e8e\u590d\u6742\uff0c\u65e0\u6cd5\u76f4\u63a5\u770b\u51fa\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u8fd9\u79cd\u60c5\u51b5\u5e38\u5e38\u53d1\u751f\uff09\uff0c\u90a3\u4e48\u4e0b\u9762\u7684\u65b9\u6cd5\u4f1a\u5e2e\u5230\u6211\u4eec\uff1a</p> \\[ \\text{When }T(N) = O(f(N)) \\text{ , check if } \\lim\\limits _{N \\rightarrow \\infty} \\frac{T(N)}{f(N)} \\approx \\text{ Constant} \\] <p>\u5982\u679c\u662f\u5e38\u6570\u7684\u8bdd\uff0c\u8bf4\u660e\u6211\u4eec\u4f30\u8ba1\u7684\u65f6\u95f4\u590d\u6742\u5ea6\\(O(f(N))\\)\u57fa\u672c\u6b63\u786e</p>"},{"location":"3-x.html","title":"Chap 3 Lists, Stacks, and Queues","text":"<p> \u7ea6 2198 \u4e2a\u5b57  915 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 22 \u5206\u949f</p> \u6838\u5fc3\u77e5\u8bc6 <ul> <li>\u5217\u8868</li> <li>\u6808<ul> <li>\u64cd\u4f5c\uff1a\u5165\u6808\u3001\u51fa\u6808...</li> <li>\u5e94\u7528\uff1a\u6c42\u89e3\u540e\u7f00\uff0c\u4e2d\u7f00\u8f6c\u540e\u7f00...</li> </ul> </li> <li>\u961f\u5217<ul> <li>\u64cd\u4f5c\uff1a\u5165\u961f\u3001\u51fa\u961f...</li> </ul> </li> </ul> <p>\u8fd93\u79cd ADT \u5747\u6709\u6570\u7ec4\u8868\u793a\u6cd5\u548c\u94fe\u8868\u8868\u793a\u6cd5</p>"},{"location":"3-x.html#abstract-data-type-adt","title":"Abstract Data Type (ADT)","text":"<p>\u6570\u636e\u7c7b\u578b(data type) = {\u5bf9\u8c61(objects)} \\(\\cup\\) {\u8fd0\u7b97(operations)}</p> <p>\u62bd\u8c61\u6570\u636e\u7c7b\u578b(ADT)\u662f\u5c06\u5bf9\u8c61\u548c\u8fd0\u7b97\u7684\u89c4\u8303\uff08\u5c31\u662f\u6211\u4eec\u5b9a\u4e49\u7684\u51fd\u6570\uff09\uff0c\u4ee5\u53ca\u5b83\u7684\u8868\u793a\u548c\u5b9e\u73b0\uff08\u4e2a\u4eba\u7406\u89e3\u4e3a\u63a5\u53e3(interface)\uff0c\u4fbf\u4e8e\u7528\u6237\u8c03\u7528\uff09\u5206\u79bb\u5f00\u6765\u7684\u4e00\u79cd\u65b9\u6cd5\u3002</p>"},{"location":"3-x.html#the-list-adt","title":"The List ADT","text":""},{"location":"3-x.html#simple-array-implementation-of-lists","title":"Simple Array Implementation of Lists","text":"<ul> <li>Objects: {\\(item_0, item_1, \\dots, item_{N - 1}\\)}</li> <li> <p>Operations: </p> <ul> <li><code>Finding_the_length</code>\uff1a\u6c42\u94fe\u8868\u957f\u5ea6\\(N\\)</li> <li><code>Printing</code>\uff1a\u6253\u5370\u5217\u8868\u6240\u6709\u5143\u7d20</li> <li><code>Making_an_empty</code>\uff1a\u5efa\u7acb\u7a7a\u5217\u8868</li> <li><code>Finding</code>\uff1a\u67e5\u627e\u7b2c\\(k\\)\u9879\uff0c\\(0 \\le k &lt; N\\) </li> <li><code>Inserting</code>\uff1a\u5728\u7b2c\\(k\\)\u9879\u540e\u63d2\u5165\u65b0\u7684\u9879\uff0c\\(k\\)\u7684\u8303\u56f4\u540c\u4e0a </li> <li><code>Deleting</code>\uff1a\u5220\u9664\u4e00\u9879 </li> <li><code>Finding_next</code>\uff1a\u67e5\u627e\u4e0b\u4e00\u4e2a\u9879</li> <li><code>Finding_previous</code>\uff1a\u67e5\u627e\u4e0a\u4e00\u4e2a\u9879\uff0c\u7528\u4e8e\u5220\u9664\u5217\u8868\u9996\u9879</li> </ul> </li> </ul> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a</p> <ul> <li>\u67e5\u627e\uff1a\\(O(1)\\)</li> <li>\u63d2\u5165&amp;\u5220\u9664\uff1a\\(O(N)\\)</li> </ul> <p>\u5bf9\u4e8e\u9891\u7e41\u8fdb\u884c\u63d2\u5165\u548c\u5220\u9664\u7684\u5217\u8868\uff0c\u6211\u4eec\u9700\u8981\u7528\u5230\u53e6\u4e00\u79cd\u5b9e\u73b0\u5f62\u5f0f\u2014\u2014\u94fe\u8868(linked list)</p>"},{"location":"3-x.html#linked-lists","title":"Linked Lists","text":"<p>Note</p> <ul> <li>\u94fe\u8868\u76f8\u6bd4\u6570\u7ec4\u5360\u7528\u7a7a\u95f4\u66f4\u591a\uff08\u989d\u5916\u7684\u6307\u9488\u57df\uff09\uff0c\u4f46\u5b83\u4e0d\u8981\u6c42\u7a7a\u95f4\u8fde\u7eed</li> <li>\u867d\u7136\u67e5\u627e\u65f6\u95f4\u6162\uff08\\(O(N)\\)\uff09\uff0c\u4f46\u63d2\u5165\u548c\u5220\u9664\u5f88\u5feb\uff08\\(O(1)\\)\uff09\uff0c\u901a\u8fc7\u4e0b\u9762\u56fe\u793a\u53ef\u4ee5\u8f83\u4e3a\u76f4\u89c2\u5730\u611f\u53d7\u5230</li> <li>\u6700\u540e\u4e00\u9879\u7684\u6307\u9488\u6307\u5411<code>NULL</code></li> <li> <p>\u5bf9\u4e8e\u5934\u6307\u9488\uff0c\u6211\u4eec\u4e0d\u5c06\u7b2c\u4e00\u9879\u4f5c\u4e3a\u5934\u6307\u9488\uff0c\u800c\u662f\u91c7\u7528\u4e00\u4e2a\u865a\u62df\u8282\u70b9(dummy node)\u3002\u8fd9\u4e2a\u8282\u70b9\u6570\u636e\u57df\u4e3a\u7a7a\uff0c\u6307\u9488\u6307\u5411\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u9879\u3002\u8fd9\u6837\u505a\u7684\u597d\u5904\u6709\uff1a</p> <ul> <li>\u5220\u9664\u9996\u9879\u65f6\u65e0\u9700\u4f7f\u7528<code>Finding_previous()</code>\u4e86</li> <li>\\(\\dots\\)</li> </ul> </li> </ul> <p>\u6ce8\uff1a\u9664\u975e\u4f5c\u7279\u6b8a\u8bf4\u660e\uff0cFDS \u4e2d\u6240\u6709\u94fe\u8868\u7684\u5b9e\u73b0\u9ed8\u8ba4\u5c06\u865a\u62df\u8282\u70b9\u4f5c\u4e3a\u5934\u6307\u9488</p> <p>\u56fe\u793a</p> \u63d2\u5165\u5220\u9664 <p> </p> <p> </p> \u4ee3\u7801\u5b9e\u73b0 .h file<pre><code>// \u94fe\u8868\u7684\u7c7b\u578b\u58f0\u660e\uff0c\u4e00\u822c\u653e\u5728 .h \u6587\u4ef6\u4e2d\n#ifndef _List_H\n\nstruct Node;\ntypedef struct Node *PtrToNode;\ntypedef PtrToNode List;\ntypedef PtrToNode Position;\n\nList MakeEmpty(List L);\nint IsEmpty(List L);\nint IsLast(Position P, List L);\nPosition Find(ElementType X, List L);\nvoid Delete(ElementType X, List L, Position P);\nPosition FindPrevious(ElementType X, List L);\nvoid Insert(ElementType X, List L, Position P);\nvoid DeleteList(List L);\nPosition Header(List L);\nPosition First(List L);\nPosition Advance(Position P);\nElementType Retrieve(Position P);\n\n#endif\n</code></pre> .c file<pre><code>// \u94fe\u8868\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u4e00\u822c\u653e\u5728.c\u6587\u4ef6\u4e2d\n\n// \u8282\u70b9\nstruct Node\n{\n    ElementType Element;\n    Position Next;\n};\n\n// \u68c0\u67e5\u94fe\u8868\u662f\u5426\u4e3a\u7a7a\nint IsEmpty(List L)\n{\n    return L-&gt;Next == NULL;\n}\n\n// \u68c0\u67e5\u8282\u70b9 P \u662f\u5426\u4e3a\u6700\u540e\u4e00\u9879\n// \u6ce8\u610f\u5230\u94fe\u8868 L \u6ca1\u6709\u7528\u4e0a\uff0c\u653e\u5728\u8fd9\u91cc\u662f\u4e3a\u4e86\u5e94\u4ed8\u7279\u6b8a\u60c5\u51b5\u7684\u5904\u7406\nint IsLast(Position P, List L)  \n{\n    return P-&gt;Next == NULL;\n}\n\n// \u67e5\u627e\u6570\u636e X \u5728\u94fe\u8868 L \u4e2d\u7684\u4f4d\u7f6e\nPosition Find(ElementType X, List L)\n{\n    Position P;\n\n    P = L-&gt;Next;\n    while (P != NULL &amp;&amp; P-&gt;Element != X)\n        P = P-&gt;Next;\n\n    return P;\n}\n\n// \u5220\u9664\u94fe\u8868 L \u4e2d\u7684\u6570\u636e X\nvoid Delete(ElementType X, List L)\n{\n    Position P, TmpCell;\n\n    P = FindPrevious(X, L);\n\n    if (!IsLast(P, L))\n    {\n        TmpCell = P-&gt;Next;\n        P-&gt;Next = TmpCell-&gt;Next;\n        Free(TmpCell); // \u5220\u9664\u8282\u70b9\u65f6\u4e0d\u8981\u5fd8\u8bb0\u91ca\u653e\u5185\u5b58\uff01\uff01\uff01\n    }\n}\n\n// \u67e5\u627e\u524d\u4e00\u9879\nPosition FindPrevious(ElementType X, List L)\n{\n    Position P;\n\n    P = L;\n    while (P-&gt;Next != NULL &amp;&amp; P-&gt;Next-&gt;Element != X)\n        P = P-&gt;Next;\n\n    return P;\n}\n\n// \u5728\u4f4d\u7f6e P \u540e\u63d2\u5165\u65b0\u6570\u636e X\nvoid Insert(ElementType X, List L, Position P)\n{\n    Position TmpCell;\n\n    TmpCell = (PtrToNode)malloc(sizeof(struct Node)); \n    if (TmpCell == NULL)\n        FatalError(\"Out of Space!!!\"); // \u8fd9\u91cc\u7528\u5230\u5904\u7406\u9519\u8bef\u4fe1\u606f\u7684\u81ea\u5b9a\u4e49\u51fd\u6570\n\n    TmpCell-&gt;Element = X;\n    TmpCell-&gt;Next = P-&gt;Next;\n    P-&gt;Next = TmpCell;\n}\n</code></pre>"},{"location":"3-x.html#common-errors","title":"Common Errors","text":"<p>\u5173\u4e8e\u94fe\u8868\u7684\u5e38\u89c1\u9519\u8bef</p> <ul> <li>\u5185\u5b58\u8bbf\u95ee\u9519\u8bef(memory access violation) \u6216\u6bb5\u9519\u8bef(segmentation violation)\uff1a\u53ef\u80fd\u56e0\u4e3a\u9519\u8bef\u7684\u521d\u59cb\u5316\uff0c\u6216\u8005\u5f15\u7528\u4e0d\u5b58\u5728\u7684\u6307\u9488\uff08\u8be5\u6307\u9488\u5df2\u88ab <code>free()</code> \u4e86\uff09</li> <li>\u5224\u65ad\u4f55\u65f6\u4f7f\u7528 <code>malloc()</code><ul> <li>\u5982\u679c\u60f3\u8981\u521b\u5efa\u4e00\u4e2a\u4e4b\u524d\u672a\u58f0\u660e\u7684\u6307\u5411\u7ed3\u6784\u7684\u6307\u9488\uff0c\u9700\u8981\u7528\u5230 <code>malloc()</code></li> <li>\u5982\u679c\u60f3\u8981\u7528\u6307\u9488\u904d\u5386\u4e00\u904d\u94fe\u8868\uff0c\u5219\u65e0\u9700\u4f7f\u7528 <code>malloc()</code> <p>\u6ce8\u610f\uff1a<code>malloc()</code> \u662f\u7ed9\u6307\u9488\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\uff0c\u800c\u4e0d\u662f\u7528\u4e8e\u7ed3\u6784\u7684</p> </li> </ul> </li> <li>\u8bb0\u5f97\u4f7f\u7528 <code>free()</code>\uff0c\u5c24\u5176\u662f\u5220\u9664\u8282\u70b9\u65f6\uff0c\u5426\u5219\u4f1a\u5e26\u6765\u4e25\u91cd\u540e\u679c</li> </ul>"},{"location":"3-x.html#double-linked-circular-lists","title":"Double Linked Circular Lists","text":"<p>\u56fe\u793a\uff1a</p> <p>\u58f0\u660e\uff1a</p> <pre><code>typedef struct node *node_ptr;\ntypedef struct node\n{\n    node_ptr llink;\n    element item;\n    note_ptr rlink;\n};\n</code></pre> <p>\u4f8b\u5b50\uff1a</p> <p>\u4f5c\u7528\uff1a\u7b80\u5316\u5220\u9664\u8282\u70b9\u7684\u8fc7\u7a0b</p>"},{"location":"3-x.html#applications","title":"Applications","text":""},{"location":"3-x.html#the-polynomial-adt","title":"The Polynomial ADT","text":"<ul> <li>Objects\uff1a\\(P(x) = a_1x^{e_1} + \\dots + a_nx^{e_n}\\)\uff0c\u6709\u4e00\u7ec4\u6709\u5e8f\u5bf9\\(&lt;e_i, a_i&gt;\\)\uff0c\u5176\u4e2d\\(a_i\\)\u79f0\u4e3a\u7cfb\u6570(coefficient)\uff1b\\(e_i\\)\u79f0\u4e3a\u6307\u6570(exponent)\uff0c\u4e3a\u975e\u8d1f\u6570</li> <li> <p>Operations\uff1a</p> <ul> <li><code>Finding_degree</code>\uff1a\u5224\u65ad\u591a\u9879\u5f0f\u7684\u6700\u9ad8\u6b21</li> <li><code>Addition</code></li> <li><code>Subtraction</code></li> <li><code>Multiplication</code></li> <li><code>Differentiation</code>\uff1a\u6c42\u5bfc</li> </ul> </li> </ul> <p>\u4e24\u79cd\u5b9e\u73b0\u65b9\u6cd5\uff1a</p> <pre><code>// 1. \u6570\u7ec4\u2014\u2014\u7f16\u5199\u52a0\u6cd5\u3001\u4e58\u6cd5\u7b49\u51fd\u6570\u8f83\u4e3a\u7b80\u5355\uff0c\u4f46\u4f1a\u6709\u5f88\u5927\u7684\u7a7a\u95f4\u6d6a\u8d39\ntypedef struct\n{\n    int CoeffArray[MaxDegree + 1];\n    int HighPower;\n} *Polynomial;\n\n// 2. \u94fe\u8868\u2014\u2014\u8282\u7701\u7a7a\u95f4\uff0c\u4f46\u7f16\u5199\u52a0\u6cd5\u3001\u4e58\u6cd5\u548c\u51fd\u6570\u8f83\u4e3a\u56f0\u96be\ntypedef struct Node *PtrToNode;\n\nstruct Node\n{\n    int Coefficient;\n    int Exponent;\n    PtrToNode Next;\n};\n\ntypedef PtrToNode Polynomial;  // \u8282\u70b9\u6839\u636e\u6307\u6570\u5927\u5c0f\u6392\u5e8f\u597d\n</code></pre> <p>\u4e0b\u9762\u7528\u6570\u7ec4\u5f62\u5f0f\u7f16\u5199\u52a0\u6cd5\u548c\u4e58\u6cd5\u51fd\u6570</p> <pre><code>// Addition\nvoid add_polynomial( POLYNOMIAL poly1, POLYNOMIAL poly2, POLYNOMIAL poly_sum )\n{\n    int i;\n    zero_polynomial( poly_sum );\n    poly_sum-&gt;high_power = max( poly1-&gt;high_power, poly2-&gt;high_power);\n    for( i = poly_sum-&gt;high_power; i &gt;= 0; i-- )\n        poly_sum-&gt;coeff_array[i] = \n            poly1-&gt;coeff_array[i] + poly2-&gt;coeff_array[i];\n}\n\n// Multiplication\nvoid mult_polynomial( POLYNOMIAL poly1, POLYNOMIAL poly2, POLYNOMIAL poly_prod )\n{\n    unsigned int i, j;\n    zero_polynomial( poly_prod );\n    poly_prod-&gt;high_power = poly1-&gt;high_power + poly2-&gt;high_power;\n    if( poly_prod-&gt;high_power &gt; MAX_DEGREE )\n        error(\"Exceeded array size\");\n    else\n        for( i = 0; i &lt;= poly-&gt;high_power; i++ )\n            for( j = 0; j &lt;= poly2-&gt;high_power; j++ )\n                poly_prod-&gt;coeff_array[i+j] +=\n                    poly1-&gt;coeff_array[i] * poly2-&gt;coeff_array[j];\n}\n</code></pre> \u8865\u5145\uff1a\u94fe\u8868\u5b9e\u73b0\u52a0\u6cd5\u51fd\u6570\uff08\u81ea\u5df1\u5199\u7684\uff0c\u6709\u4e9b\u5570\u55e6\uff09 <pre><code>Polynomial Add( Polynomial a, Polynomial b )\n{ \n    PtrToNode head = (PtrToNode)malloc(sizeof(struct Node));\n    head-&gt;Next = NULL;\n    Polynomial ans = head;\n    Polynomial cur = head;\n\n    while (a-&gt;Next != NULL &amp;&amp; b-&gt;Next != NULL)\n    {\n        PtrToNode temp = (PtrToNode)malloc(sizeof(struct Node));\n        temp-&gt;Next = NULL;\n        if (a-&gt;Next-&gt;Exponent &gt; b-&gt;Next-&gt;Exponent)\n        {\n            temp-&gt;Coefficient = a-&gt;Next-&gt;Coefficient;\n            temp-&gt;Exponent = a-&gt;Next-&gt;Exponent;\n            a = a-&gt;Next;\n        }\n        else if (a-&gt;Next-&gt;Exponent &lt; b-&gt;Next-&gt;Exponent)\n        {\n            temp-&gt;Coefficient = b-&gt;Next-&gt;Coefficient;\n            temp-&gt;Exponent = b-&gt;Next-&gt;Exponent;\n            b = b-&gt;Next;\n        }\n        else\n        {\n            temp-&gt;Coefficient = a-&gt;Next-&gt;Coefficient + b-&gt;Next-&gt;Coefficient;\n            if (temp-&gt;Coefficient == 0)\n            {\n                a = a-&gt;Next;\n                b = b-&gt;Next;\n                free(temp);\n                continue;\n            }\n            else\n            {\n                temp-&gt;Exponent = a-&gt;Next-&gt;Exponent;\n            }\n            a = a-&gt;Next;\n            b = b-&gt;Next;\n        }\n        cur-&gt;Next = temp;\n        cur = cur-&gt;Next;\n    }\n\n    while (a-&gt;Next != NULL)\n    {\n        PtrToNode temp = (PtrToNode)malloc(sizeof(struct Node));\n        temp-&gt;Coefficient = a-&gt;Next-&gt;Coefficient;\n        temp-&gt;Exponent = a-&gt;Next-&gt;Exponent;\n        temp-&gt;Next = NULL;\n        cur-&gt;Next = temp;\n        a = a-&gt;Next;\n        cur = cur-&gt;Next;\n    }\n\n    while (b-&gt;Next != NULL)\n    {\n        PtrToNode temp = (PtrToNode)malloc(sizeof(struct Node));\n        temp-&gt;Coefficient = b-&gt;Next-&gt;Coefficient;\n        temp-&gt;Exponent = b-&gt;Next-&gt;Exponent;\n        temp-&gt;Next = NULL;\n        cur-&gt;Next = temp;\n        b = b-&gt;Next;\n        cur = cur-&gt;Next;\n    }    \n    return head;\n}\n</code></pre>"},{"location":"3-x.html#multilists","title":"Multilists","text":"<p>\u95ee\u9898</p> <p>\u6709 40000 \u540d\u5b66\u751f\u548c 2500 \u95e8\u8bfe\uff0c\u8981\u6c42\u5217\u51fa\u6bcf\u95e8\u8bfe\u5b66\u751f\u7684\u540d\u5355\uff0c\u4ee5\u53ca\u6bcf\u4f4d\u5b66\u751f\u7684\u8bfe\u8868</p> <ul> <li>\u5982\u679c\u7528\u6570\u7ec4\uff0840000 \\(\\times\\) 2500\uff09\u505a\uff0c\u4f1a\u6d6a\u8d39\u5de8\u5927\u7684\u7a7a\u95f4\u3002</li> <li>\u56e0\u6b64\u7528\u5faa\u73af\u94fe\u8868\uff0c\u800c\u4e14\u5bf9\u4e8e\u94fe\u8868\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u6709\u4e24\u7ec4\u6307\u9488\uff1a<ul> <li>\u4e00\u7ec4\u6307\u5411\u9009\u8fd9\u95e8\u8bfe\u7684\u5176\u4ed6\u5b66\u751f</li> <li>\u53e6\u4e00\u7ec4\u6307\u5411\u8fd9\u4f4d\u5b66\u751f\u7684\u5176\u4ed6\u8bfe\u7a0b</li> </ul> </li> </ul> <p>\u56fe\u793a\uff1a</p> <p>\u7136\u800c\uff0c\u867d\u7136\u770b\u8d77\u6765\u5f88\u4f18\u96c5\uff0c\u4f46\u5b9e\u73b0\u8d77\u6765\u56f0\u96be\u91cd\u91cd\uff08\u60f3\u8c61\u4e00\u4e0b\u63d2\u5165\u548c\u5220\u9664\u7684\u64cd\u4f5c\uff09\uff0c\u5f88\u96be\u7f16\u5199\u597d\u4ee3\u7801\u3002</p>"},{"location":"3-x.html#cursor-implementation-of-linked-lists","title":"Cursor Implementation of Linked Lists","text":"<p>\u7528\u6307\u9488\u5b9e\u73b0\u7684\u94fe\u8868\u7684\u7279\u5f81\uff1a</p> <ul> <li>\u94fe\u8868\u4e3a\u4e00\u7ec4\u7ed3\u6784\u4f53\uff0c\u6bcf\u4e2a\u7ed3\u6784\u4f53\u5305\u542b\u4e00\u4e2a\u6570\u636e\u57df\u548c\u6307\u9488\u57df\uff08\u6307\u5411\u4e0b\u4e00\u4e2a\u7ed3\u6784\uff09</li> <li>\u901a\u8fc7 <code>malloc()</code> \u5206\u914d\u65b0\u7684\u7ed3\u6784\u4f53\uff0c\u4e14\u901a\u8fc7\u8c03\u7528 <code>free()</code> \u91ca\u653e</li> </ul> <p>\u95ee\u9898</p> <p>\u5bf9\u4e8e\u4e00\u4e9b\u6ca1\u6709\u6307\u9488\u7c7b\u578b\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u5982\u4f55\u505a\u5230\u4e0d\u7528\u6307\u9488\u5b9e\u73b0\u94fe\u8868\u5462\uff1f</p> <p>\u2014\u2014\u7528\u6e38\u6807\u5b9e\u73b0(cursor implementation)!</p> <p>\u901a\u5e38\u6e38\u6807\u5b9e\u73b0\u6cd5\u6bd4\u7528\u6307\u9488\u66f4\u5feb\uff0c\u56e0\u4e3a\u8fd9\u79cd\u65b9\u6cd5\u6ca1\u6709\u8c03\u7528<code>malloc()</code>\u548c<code>free()</code>\u7b49\u5185\u5b58\u7ba1\u7406\u51fd\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u6e38\u6807\u201c\u6a21\u62df\u201d\u57fa\u4e8e\u6307\u9488\u7684\u94fe\u8868\u5b9e\u73b0\u3002</p> <p>\u6211\u4eec\u9700\u8981\u989d\u5916\u7528\u4e00\u4e2a\u5217\u8868(\u79f0\u4e3a<code>freelist</code>)\uff0c\u4fdd\u5b58\u4e0d\u5728\u539f\u5217\u8868\u4e2d\u7684\u5143\u7d20\uff0c\u6a21\u62df\u5185\u5b58\u7684\u7a7a\u95f2\u7a7a\u95f4\uff0c\u8fd9\u91cc\u6211\u4eec\u7528\u6e38\u6807\u7a7a\u95f4(cursor space)\u6765\u5b9e\u73b0\uff0c\u5b83\u7684\u56fe\u793a\u5982\u4e0b\uff1a</p> <p>\u58f0\u660e\uff1a</p> <pre><code>typedef unsigned int node_ptr;\nstruct node\n{\n    element_type element;\n    node_ptr next;\n};\ntypedef node_ptr LIST;\ntypedef node_ptr position;\nstruct node CURSOR_SPACE[SPACE_SIZE];\n</code></pre> <p>\u5b9e\u73b0\u601d\u8def\uff1a</p> <ul> <li><code>malloc</code>\uff1a\u5c06\u8868\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u79fb\u51fa</li> <li><code>free</code>\uff1a\u5c06\u65b0\u7684\u4f4d\u7f6e\u653e\u5728\u8868\u7684\u524d\u9762</li> </ul> \u52a8\u753b\u6f14\u793a <code>malloc()</code><code>free()</code> <p> </p> <p> </p> \u4ee3\u7801\u5b9e\u73b0 <pre><code>// \u94fe\u8868\u7684\u7c7b\u578b\u58f0\u660e\uff0c\u4e00\u822c\u653e\u5728.h\u6587\u4ef6\u4e2d\n#ifndef _Cursor_H\n\ntypedef int PtrToNode;\ntypedef PtrToNode List;\ntypedef PtrToNode Position;\n\nvoid InitializeCursorSpace(void);\n\nList MakeEmpty(List L);\nint IsEmpty(List L);\nint IsLast(Position P, const List L);\nPosition Find(ElementType X, const List L);\nvoid Delete(ElementType X, List L);\nPosition FindPrevious(ElementType X, const List L);\nvoid Insert(ElementType X, List L, Position P);\nvoid DeleteList(List L);\nPosition Header(const List L);\nPosition First(const List L);\nPosition Advance(const Position P);\nElementType Retrieve(const Position P);\n\n#endif\n</code></pre> <pre><code>// \u94fe\u8868\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u4e00\u822c\u653e\u5728.c\u6587\u4ef6\u4e2d\n\n// \u8282\u70b9\nstruct Node\n{\n    ElementType Element;\n    Position Next;\n};\n\nstruct Node CursorSpace[SpaceSize];\n\n// \u5047\u8bbe\u6e38\u6807\u5206\u914d\u548c\u91ca\u653e\u51fd\u6570\u5df2\u6709\u51fd\u6570\u539f\u578b\n// \u6e38\u6807\u5206\u914d\nstatic Position CursorAlloc(void)\n{\n    Position P;\n\n    P = CursorSpace[0].Next;\n    CursorSpace[0].Next = CursorSpace[P].Next;\n\n    return P;\n}\n\n// \u6e38\u6807\u91ca\u653e\nstatic void CursorFree(Position P)\n{\n    CursorSpace[P].Next = CursorSpace[0].Next;\n    CursorSpace[0].Next = P;\n}\n\n// \u68c0\u67e5\u94fe\u8868\u662f\u5426\u4e3a\u7a7a\nint IsEmpty(List L)\n{\n    return CursorSpace[L].Next == 0;\n}\n\n// \u68c0\u67e5\u8282\u70b9 P \u662f\u5426\u4e3a\u6700\u540e\u4e00\u9879\n// \u6ce8\u610f\u5230\u94fe\u8868 L \u6ca1\u6709\u7528\u4e0a\uff0c\u653e\u5728\u8fd9\u91cc\u4ee5\u9632\u7279\u6b8a\u60c5\u51b5\u7684\u5904\u7406\nint IsLast(Position P, List L)  \n{\n    return CursorSpace[P].Next == 0;\n}\n\n// \u67e5\u627e\u6570\u636e X \u5728\u94fe\u8868 L \u4e2d\u7684\u4f4d\u7f6e\nPosition Find(ElementType X, List L)\n{\n    Position P;\n\n    P = CursorSpace[L].Next;\n    while (P &amp;&amp; CursorSpace[P].Element != X)\n        P = CursorSpace[P].Next;\n\n    return P;\n}\n\n// \u5220\u9664\u94fe\u8868 L \u4e2d\u7684\u6570\u636e X\nvoid Delete(ElementType X, List L)\n{\n    Position P, TmpCell;\n\n    P = FindPrevious(X, L);\n\n    if (!IsLast(P, L))\n    {\n        TmpCell = CursorSpace[P].Next;\n        CursorSpace[P].Next = CursorSapce[TmpCell].Next;\n        CursorFree(TmpCell); // \u5220\u9664\u8282\u70b9\u65f6\u4e0d\u8981\u5fd8\u8bb0\u91ca\u653e\u5185\u5b58\uff01\uff01\uff01\n    }\n}\n\n// \u5728\u4f4d\u7f6e P \u540e\u63d2\u5165\u65b0\u6570\u636e X\nvoid Insert(ElementType X, List L, Position P)\n{\n    Position TmpCell;\n\n    TmpCell = CursorAlloc();\n    if (TmpCell == 0)\n        FatalError(\"Out of Space!!!\"); // \u8fd9\u91cc\u7528\u5230\u5904\u7406\u9519\u8bef\u4fe1\u606f\u7684\u81ea\u5b9a\u4e49\u51fd\u6570\n\n    CursorSpace[TmpCell].Element = X;\n    CursorSpace[TmpCell].Next = CursorSpace[P].Next;\n    CursorSpace[P].Next = TmpCell;\n}\n</code></pre>"},{"location":"3-x.html#supplement-reverse-a-linked-list","title":"Supplement: Reverse a Linked List","text":"<pre><code>List Reverse( List L )\n{\n    Position cur;\n    Position pre;\n    Position rear;\n\n    cur = L-&gt;Next;\n    while (cur != NULL)\n    {\n        rear = cur-&gt;Next;\n        if (cur == L-&gt;Next)\n            cur-&gt;Next = NULL;\n        else\n            cur-&gt;Next = pre;\n        pre = cur;\n        cur = rear;\n    }\n    L-&gt;Next = pre;\n\n    return L;\n}\n</code></pre>"},{"location":"3-x.html#the-stack-adt","title":"The Stack ADT","text":""},{"location":"3-x.html#adt","title":"ADT","text":"<p>stack(\u6808)\uff1a\u4e00\u79cdLIFO(last-in-first-out\uff0c\u540e\u8fdb\u5148\u51fa)\u7684\u5217\u8868\uff0c\u5373\u4ec5\u5728\u6709\u5e8f\u5217\u8868\u7684\u9876\u7aef(top)\u8fdb\u884c\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c</p> <ul> <li>Objects\uff1a\u62e5\u67090\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u7684\u6709\u9650\u6709\u5e8f\u5217\u8868</li> <li>Operations\uff1a<ul> <li><code>Int IsEmpty(Stack S);</code>\uff1a\u68c0\u67e5\u6808\u662f\u5426\u4e3a\u7a7a</li> <li><code>Stack CreateStack();</code>\uff1a\u521b\u5efa\u6808</li> <li><code>DisposeStack(Stack S);</code> </li> <li><code>MakeEmpty(Stack S);</code>\uff1a\u6e05\u7a7a\u6808</li> <li><code>Push(ElementType X, Stack S);</code>\uff1a\u63d2\u5165\u65b0\u5143\u7d20 </li> <li><code>ElementType Top(Stack S);</code>\uff1a\u83b7\u5f97\u6808\u9876\u5143\u7d20 </li> <li><code>Pop(Stack S);</code>\uff1a\u5220\u9664\u6808\u9876\u5143\u7d20 </li> </ul> </li> </ul> <p>\u6ce8\u610f</p> <ul> <li>\u5bf9\u7a7a\u7684\u6808\u4f7f\u7528 <code>Pop</code> \u6216 <code>Top</code> \u64cd\u4f5c\u5c06\u4f1a\u5f15\u53d1\u6808ADT\u9519\u8bef</li> <li>\u5bf9\u6ee1\u7684\u6808\u4f7f\u7528 <code>Push</code> \u64cd\u4f5c\u5c06\u4f1a\u5f15\u53d1\u5b9e\u73b0\u9519\u8bef(implementation error)</li> </ul>"},{"location":"3-x.html#implementations","title":"Implementations","text":""},{"location":"3-x.html#linked-list-impletation","title":"Linked List Impletation","text":"<p>\u52a8\u753b\u6f14\u793a</p> PushTopPop <p> </p> <p> </p> <p> </p> \u4ee3\u7801\u5b9e\u73b0 <pre><code>// .h\u6587\u4ef6\u4ee3\u7801\uff1a\u6808 ADT \u7684\u7c7b\u578b\u58f0\u660e\n#ifndef _Stack_h\n\nstruct Node;\ntypedef struct Node *PtrToNode;\ntypedef PtrToNode Stack;\n\nint IsEmpty(Stack S);\nStack CreateStack(void);\nvoid DisposeStack(Stack S);\nvoid MakeEmpty(Stack S);\nvoid Push(ElementType X, Stack S);\nElementType Top(Stack S);\nvoid Pop(Stack S);\n\n#endif /* _Stack_h*/\n</code></pre> <pre><code>// .c \u6587\u4ef6\u4ee3\u7801\uff1a\u94fe\u8868\u65b9\u5f0f\u7684\u5b9e\u73b0\nstruct Node\n{\n    ElementType Element;\n    PtrToNode Next;\n};\n\nint IsEmpty(Stack S)\n{\n    return S-&gt;next == NULL;\n}\n\nStack CreateStack(void)\n{\n    Stack S;\n\n    S = (Stack)malloc(sizeof(struct Node));\n    if (S == NULL)\n        FatalError(\"Out of space!!\"); // \u81ea\u5b9a\u4e49\u51fd\u6570\n    MakeEmpty(S);\n    return S;\n}\n\nvoid MakeEmpty(Stack S)\n{\n    if (S == NULL)\n        Error(\"Must use CreateStack first\");  // \u81ea\u5b9a\u4e49\u51fd\u6570\n    else \n        while (!IsEmpty(S))\n            Pop(S);\n}\n\nvoid Push(ElementType X, Stack S)\n{\n    PtrToNode TmpCell;\n\n    TmpCell = (PtrToNode)malloc(sizeof(struct Node));\n    if (TmpCell == NULL)\n        FatalError(\"Out of space!!\");\n    else\n    {\n        TmpCell-&gt;Element = X;\n        TmpCell-&gt;Next = S-&gt;Next;\n        S-&gt;Next = TmpCell;\n    }\n}\n\nElementType Top(Stack S)\n{\n    if (!IsEmpty(S))\n        return S-&gt;Next-&gt;Element;\n    Error(\"Empty stack\");\n    return 0; // Return value used to avoid warning\n}\n\nvoid Pop(Stack S)\n{\n    PtrToNode FirstCell;\n\n    if (IsEmpty(S))\n        Error(\"Empty stack\");\n    else\n    {\n        FirstCell = S-&gt;Next;\n        S-&gt;Next = S-&gt;Next-&gt;Next;\n        free(FirstCell);\n    }\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5e38\u6570\\(O(1)\\)</p> <p>\u7f3a\u70b9\uff1a\u591a\u6b21\u4f7f\u7528 <code>malloc()</code> \u548c <code>free()</code>\u5f00\u9500\u592a\u5927</p> <p>\u6539\u8fdb\u65b9\u6cd5\uff1a\u989d\u5916\u521b\u5efa\u4e00\u4e2a\u6808\uff0c\u7528\u4e8e\u5b58\u653e\u672c\u6765\u5e94\u8be5 <code>free()</code> \u6389\u7684\u7a7a\u95f4\uff0c\u7b49\u5230\u6709\u65b0\u7684\u5143\u7d20\u9700\u8981 <code>push</code> \u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u7528\u8fd9\u4e2a\u201c\u56de\u6536\u7ad9\u201d\u4e2d\u7684\u7a7a\u95f4\uff0c\u800c\u65e0\u9700\u518d\u4f7f\u7528 <code>malloc()</code></p>"},{"location":"3-x.html#array-impletation","title":"Array Impletation","text":"\u4ee3\u7801\u5b9e\u73b0 <pre><code>// .h \u6587\u4ef6\u4ee3\u7801\uff1a\u6808 ADT \u7684\u7c7b\u578b\u58f0\u660e\n#ifndef _Stack_h\n\nstruct StackRecord;\ntypedef struct StackRecord *Stack;\n\nint IsEmpty(Stack S);\nint IsFull(Stack S);\nStack CreateStack(int MaxElements);\nvoid DisposeStack(Stack S);\nvoid MakeEmpty(Stack S);\nvoid Push(ElementType X, Stack S);\nElementType Top(Stack S);\nvoid Pop(Stack S);\nElementType TopAndTop(Stack S);\n\n#endif /* _Stack_h*/\n</code></pre> <pre><code>// .c \u6587\u4ef6\u4ee3\u7801\uff1a(\u52a8\u6001\u5206\u914d)\u6570\u7ec4\u65b9\u5f0f\u7684\u5b9e\u73b0\n#define EmptyTOS (-1)   // \u52a0\u62ec\u53f7\u662f\u4e3a\u4e86\u9632\u6b62\u8fd0\u7b97\u987a\u5e8f\u7684\u9519\u8bef\n#define MintackSize (5) // \u540c\u4e0a\nstruct StackRecord\n{\n    int Capacity;\n    int TopOfStack;\n    ElementType *Array;\n};\n\nStack CreateStack(int MaxElements)\n{\n    Stack S;\n\n    if (MaxElemets &lt; MinStackSize)\n        Error(\"Stack size if too small\");\n\n    S = (Stack)malloc(sizeof(struct StackRecord));\n    if (S == NULL)\n        FatalError(\"Out of space!!!\");\n    S-&gt;Array = (ElementType *)malloc(sizeof(ElementType) * MaxElements);\n    if (S-&gt;Array == NULL)\n        FatalError(\"Out of Space!!!\");\n    S-&gt;Capacity = MaxElements;\n    MakeEmpty(S);\n\n    return S;\n}\n\nvoid DisposeStack(Stack S)\n{\n    if (S != NULL)\n    {\n        free(S-&gt;Array);\n        free(S);\n    }\n}\n\nint IsEmpty(Stack S)\n{\n    return S-&gt;TopOfStack == EmptyTOS;\n}\n\nvoid MakeEmpty(Stack S)\n{\n    S-&gt;TopOfStack = EmptyTOS;\n}\n\nvoid Push(ElementType X, Stack S)\n{\n    if(IsFull(S))\n        Error(\"Full stack\");\n    else\n        S-&gt;Array[++S-&gt;TopOfStack] = X;\n}\n\nElementType Top(Stack S)\n{\n    if (!IsEmpty(S))\n        return S-&gt;Array[S-&gt;TopOfStack];\n    Error(\"Empty stack\");\n    return 0; // Return value used to avoid warning\n}\n\nvoid Pop(Stack S)\n{\n    PtrToNode FirstCell;\n\n    if (IsEmpty(S))\n        Error(\"Empty stack\");\n    else\n    {\n        S-&gt;TopOfStack--;\n    }\n}\n\n// \u5e02\u9762\u4e0a\u5f88\u591a\u6559\u6750\u90fd\u4f1a\u628a Pop \u548c Top \u51fd\u6570\u96c6\u6210\u5230 Pop \u51fd\u6570\u4e0a\n// \u800c\u672c\u4e66\u7684\u4f5c\u8005\u5c06\u4e24\u8005\u5206\u5f00\uff0c\u4f46\u4ed6\u4e5f\u63d0\u4f9b\u4e86\u96c6\u6210\u7684\u7248\u672c(\u524d\u9762\u6ca1\u6709\u5199\u51fd\u6570\u539f\u578b)\nElementType TopAndPop(Stack S)\n{\n    if(!IsEmpty(S))\n        return S-&gt;Array[S-&gt;TopOfStack--];\n    Error(\"Empty stack\");\n    return 0; // Return value used to avoid warning\n}\n</code></pre> <p>\u6ce8</p> <ul> <li>\u6808\u6a21\u578b\u9700\u8981\u5c01\u88c5\u597d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u9664\u4e86\u6808\u76f8\u5173\u51fd\u6570\u5916\uff0c\u4ee3\u7801\u7684\u5176\u4ed6\u90e8\u5206\u4e0d\u80fd\u4f7f\u7528 <code>Array</code> \u6216 <code>TopOfStack</code> \u7684\u53d8\u91cf</li> <li>\u5728\u6267\u884c <code>Push</code> \u548c <code>Pop</code> \u524d\u5fc5\u987b\u8fdb\u884c\u9519\u8bef\u68c0\u67e5</li> </ul>"},{"location":"3-x.html#applications_1","title":"Applications","text":""},{"location":"3-x.html#balancing-symbols","title":"Balancing Symbols","text":"<p>\uff1a\u68c0\u67e5\u8868\u8fbe\u5f0f\u7684\u62ec\u53f7\u662f\u5426\u5339\u914d</p> <p>\u4f2a\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <pre><code>Algorithm\n{\n    Make an Empty stack S;\n    while (read in a character c)\n    {\n        if (c in an opening symbol)\n            Push(c, S);\n        else if (c is a closing symbol)\n        {\n            if (S is empty)\n            {\n                ERROR;\n                exit;\n            }\n            else // stack is okay\n            {\n                if (Top(S) does not match c)\n                {\n                    ERROR;\n                    exit;\n                }\n                else \n                    Pop(S);\n            }  // end else-stack is okay\n        } // end else-if-closing symbol\n    } // end while-loop\n    if (S is not empty)\n        ERROR;\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(N)\\)\uff0c\u8fd9\u662f\u4e00\u4e2a\u5728\u7ebf\u7b97\u6cd5</p>"},{"location":"3-x.html#postfix-evaluation","title":"Postfix Evaluation","text":"\u52a8\u753b\u6f14\u793a <p>\u6ce8\uff1agif \u56fe\u7247\u6700\u591a\u64ad\u653e 30s\uff0c\u56e0\u6b64\u64ad\u653e\u901f\u5ea6\u8c03\u6210\u4e86 1.57 \u500d\uff0c\u53ef\u80fd\u4f1a\u5f71\u54cd\u89c2\u611f\uff08\u5f53\u7136\u5bf9\u6574\u4e2a\u539f\u7406\u8f83\u4e3a\u7406\u89e3\u7684\u8bdd\u5176\u5b9e\u5f71\u54cd\u4e0d\u5927\uff09</p> <p> </p> <p>\u5904\u7406\u6b65\u9aa4\uff1a</p> <ul> <li>\u9047\u5230\u64cd\u4f5c\u6570\uff0c\u5c06\u5176\u538b\u5165\u6808\u4e2d</li> <li>\u9047\u5230\u8fd0\u7b97\u7b26 \\(opt\\)\uff0c\u5f39\u51fa\u6808\u6700\u9876\u4e0a\u4e24\u4e2a\u5143\u7d20\\(a, b\\)\uff0c\u5176\u4e2d \\(top = a\\)\uff0c\u7136\u540e\u8ba1\u7b97 \\(c = b\\ opt\\ a\\)\uff0c\u6700\u540e\u5c06 \\(c\\) \u538b\u5165\u6808\u4e2d</li> <li>\u904d\u5386\u5b8c\u540e\u7f00\u8868\u8fbe\u5f0f\u540e\uff0c\u6808\u4e2d\u5e94\u5f53\u5269\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u8be5\u5143\u7d20\u5373\u4e3a\u6700\u7ec8\u7ed3\u679c</li> </ul> <p>\u6ce8\uff1a\u540e\u9762\u8bb2\u5230\u7684\u8868\u8fbe\u5f0f\u6811\u7684\u6784\u5efa\u4e5f\u91c7\u7528\u7c7b\u4f3c\u6b65\u9aa4</p> \u4ee3\u7801\u5b9e\u73b0 <pre><code>// \u8fd9\u91cc\u7684\u6808\u7528\u7684\u662f\u6570\u7ec4\u8868\u793a\u6cd5\n// \u800c\u4e14\u8be5\u7b97\u6cd5\u53ea\u80fd\u5904\u7406 10 \u4ee5\u5185\u7684\u6574\u6570\u56db\u5219\u8fd0\u7b97\uff0c\u4ec5\u4f9b\u53c2\u8003\nint PostExp(char * exp, stack S)\n{\n    int len;\n    int i;\n    element a, b;\n    int ans;\n\n    len = strlen(exp);\n\n    for (i = 0; i &lt; len; i++)\n    {\n        if (exp[i] == ' ' || exp[i] == '\\n')\n            continue;\n        else if (isdigit(exp[i]))\n            Push(exp[i], S);\n        else\n        {\n            b = Pop(S);\n            a = Pop(S);\n            if (!a || !b)\n            {\n                printf(\"wrong expression!\\n\");\n                return INT_MAX; // \u65e0\u7a77\u5927\u8868\u793a\u9519\u8bef\u4fe1\u53f7\n            }\n            switch(exp[i])\n            {\n                case '+':\n                    Push(a + b - '0', S);\n                    break;\n                case '-':\n                    Push(a - b + '0', S);\n                    break;\n                case '*':\n                    Push((a - '0') * (b - '0') + '0', S);\n                    break;\n                case '/':\n                    Push((a - '0') / (b - '0') + '0', S);\n                    break;    \n                default:\n                    printf(\"wrong expression!\\n\");\n                    return INT_MAX;     \n            }\n\n        }\n    }\n    ans = Pop(S) - '0';\n    return ans;\n}\n</code></pre>"},{"location":"3-x.html#infix-to-postfix-conversion","title":"Infix to Postfix Conversion","text":"<p>\u5173\u952e\u70b9</p> <ul> <li>\u64cd\u4f5c\u6570(operands)\u7684\u987a\u5e8f\u4e0d\u53d8\uff0c\u56e0\u6b64\u76f4\u63a5\u8f93\u51fa</li> <li>\u5728\u6808\u5185\uff0c\u9ad8\u4f18\u5148\u7ea7\u7684\u8fd0\u7b97\u7b26(operators)\u5728\u4f4e\u4f18\u5148\u7ea7\u8fd0\u7b97\u7b26\u7684\u524d\u9762</li> <li>\u6ce8\u610f\uff1a\u5982\u679c\u2018(\u2019\u4e0d\u5728\u6808\u5185\uff0c\u5219\u5b83\u7684\u4f18\u5148\u7ea7\u6700\u9ad8\uff1b\u5982\u679c\u5b83\u5728\u6808\u5185\uff0c\u5219\u4f18\u5148\u7ea7\u6700\u4f4e</li> </ul> <p>\u5177\u4f53\u5b9e\u73b0</p> <ol> <li>\u5982\u679c\u5f85\u5224\u65ad\u7684\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u6808\u9876\u8fd0\u7b97\u7b26(\u5305\u62ec<code>(</code>)\uff0c\u6216\u8005\u6808\u5185\u65e0\u5143\u7d20\uff0c\u5c06\u5176\u538b\u5165\u6808</li> <li>\u5426\u5219\uff0c\u82e5\u8fd0\u7b97\u7b26\u662f<code>)</code>\uff0c\u5219\u5c06\u6808\u5185\u5305\u62ec<code>(</code>\u524d\u7684\u6240\u6709\u8fd0\u7b97\u7b26\u6309\u51fa\u6808\u987a\u5e8f\u5f39\u51fa\uff08<code>(</code>\u4e5f\u4ec5\u5728\u8be5\u60c5\u51b5\u4e0b\u624d\u80fd\u5f39\u51fa\uff09</li> <li>\u5426\u5219\u7684\u8bdd\uff0c\u4ece\u6808\u9876\u5f00\u59cb\u4f9d\u6b21\u5f39\u51fa\u8fd0\u7b97\u7b26\uff0c\u76f4\u5230\u6ee1\u8db3\u6761\u4ef61\uff0c\u518d\u5c06\u8be5\u8fd0\u7b97\u7b26\u538b\u5165\u6808\u4e2d</li> </ol> <p>\u6ce8\uff1a\u4e0a\u8ff0\u539f\u5219\u9002\u7528\u4e8e\u52a0\u51cf\u4e58\u9664\u56db\u5219\u8fd0\u7b97\uff0c\u4f46\u4e0d\u9002\u5408\u5e42\u8fd0\u7b97\uff0c\u56e0\u4e3a\u5e42\u8fd0\u7b97\u7b26 ^ \u7ed3\u5408\u65b9\u5411\u81ea\u53f3\u5411\u5de6</p> \u52a8\u753b\u6f14\u793a <p> </p> \u4ee3\u7801\u5b9e\u73b0 <pre><code>// \u76f4\u63a5\u6458\u81ea\u6211\u7684 project 2\nQueue InToPost(char * exp)\n{\n\u00a0 \u00a0 char * tmp = (char *)malloc(sizeof(char) * VLENGTH); \u00a0// Containing the variables or constant\n\u00a0 \u00a0 Stack s; \u00a0 // The stack for operators, in order to getting the proper order in postfix form\n\u00a0 \u00a0 Queue q; \u00a0 // The postfix expression, split them into variables, constants and operators in a queue\n\u00a0 \u00a0 char opt; \u00a0// The operator\n\u00a0 \u00a0 char * head = exp; \u00a0// Cheking if it's the first character in the expression\n\u00a0 \u00a0 \n\u00a0 \u00a0 // Initialization\n\u00a0 \u00a0 s = CreateStack();\n\u00a0 \u00a0 q = CreateQueue();\n\u00a0 \u00a0 tmp[0] = '\\0';\n\u00a0 \u00a0 \n\u00a0 \u00a0 while (*exp != '\\0') // Traversing the infix expression\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 if (isalnum(*exp)) \u00a0// Finding the potential variables and constants\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CharToString(*exp, tmp); \u00a0// Receiving it\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 else if (*exp == '-' &amp;&amp; (exp == head || *(exp - 1) == '(')) // Handling with the case with minus sign\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Enqueue(\"0\", q);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Push2(*exp, s);\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 else \u00a0// If it's an operator\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (strlen(tmp)) \u00a0// If there is a variable or a constant\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (*exp == '(' &amp;&amp; (!strcmp(tmp, \"sin\") || !strcmp(tmp, \"cos\") || !strcmp(tmp, \"ln\"))) \u00a0// Dealing with math functions\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Enqueue(\"0\", q);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 switch (tmp[0])\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 case 's': \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // sin\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Push2('!', s);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 case 'c': \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // cos\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Push2('@', s);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 case 'l': \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // ln\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Push2('#', s);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 else\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Enqueue(tmp, q); \u00a0// Outputting it\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tmp[0] = '\\0'; \u00a0 \u00a0// Resetting\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // If it's an empty stack or the priority of the current operator is higher than the top element, or the top element is the left parentheses\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (IsEmpty(s) || priority(*exp) &lt; priority(s-&gt;top-&gt;operator) || s-&gt;top-&gt;operator == '(')\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Push2(*exp, s); \u00a0// Pushing the operator into the stack\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 else if (*exp == ')') \u00a0// If it's a right parentheses\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 while (s-&gt;top-&gt;operator != '(') \u00a0// Poping out all the operators on the left parentheses in the stack\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 opt = Top2(s);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Pop(s);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CharToString(opt, tmp);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Enqueue(tmp, q); \u00a0// Don't forget to output it!\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tmp[0] = '\\0'; \u00a0 \u00a0// Resetting\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Pop(s); \u00a0// Don't forget throw the left parentheses out!\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 while (s-&gt;top-&gt;operator == '!' || s-&gt;top-&gt;operator == '@' || s-&gt;top-&gt;operator == '#') // Coping with math functions, but unluckily, there are still some bugs\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 opt = Top2(s);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Pop(s);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CharToString(opt, tmp);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Enqueue(tmp, q); \u00a0// Don't forget to output it!\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tmp[0] = '\\0'; \u00a0 \u00a0// Resetting\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 else // Else Poping out all elements with the higher priority out, until encountering the '(' or the lower one\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 while (s-&gt;top-&gt;operator != '(' &amp;&amp; priority(*exp) &gt;= priority(s-&gt;top-&gt;operator))\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 opt = Top2(s);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Pop(s);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CharToString(opt, tmp);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Enqueue(tmp, q); \u00a0// Don't forget to output it!\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tmp[0] = '\\0'; \u00a0 \u00a0// Resetting\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Push2(*exp, s); \u00a0// Pushing the new one to the stack\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 exp++; \u00a0// Checking the next one\n\u00a0 \u00a0 }\n\n\u00a0 \u00a0 // Dealing with the remaining part(important!)\n\u00a0 \u00a0 if (strlen(tmp))\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 Enqueue(tmp, q);\n\u00a0 \u00a0 \u00a0 \u00a0 tmp[0] = '\\0';\n\u00a0 \u00a0 }\n\n\u00a0 \u00a0 while (!IsEmpty(s)) \u00a0// Disposing of the remaining elements in the stack\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 if (Top2(s) != '(' \u00a0&amp;&amp; Top2(s) != ')') \u00a0// Special case for parentheses\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 opt = Top2(s);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Pop(s);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CharToString(opt, tmp);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Enqueue(tmp, q);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tmp[0] = '\\0'; \u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 else\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Pop(s); \u00a0 \u00a0 \u00a0 \u00a0\n\u00a0 \u00a0 }\n\n\u00a0 \u00a0 return q; \u00a0 // Returing the output sequence\n\n}\n</code></pre> <p>\u6ce8\uff1a</p> <ul> <li>\u8fd9\u91cc\u7684\u4ee3\u7801\u662f\u9488\u5bf9 project \u7684\u95ee\u9898\u201c\u5b9a\u5236\u201d\u7684\uff0c\u56e0\u6b64\u53ef\u80fd\u4e0d\u592a\u5177\u6709\u901a\u7528\u6027</li> <li>\u8fd9\u91cc\u6211\u5c06\u5f97\u5230\u7684\u540e\u7f00\u8868\u8fbe\u5f0f\u5b58\u50a8\u4e3a\u961f\u5217\uff0c\u662f\u4e3a\u4e86\u65b9\u4fbf\u540e\u7eed\u6784\u5efa\u8868\u8fbe\u5f0f\u6811</li> </ul>"},{"location":"3-x.html#function-calls","title":"Function Calls","text":"<p>\u6bcf\u4e00\u6b21\u51fd\u6570\u8c03\u7528\u4ea7\u751f\u7684\u6570\u636e\uff0c\u5305\u62ec\u5c40\u90e8\u53d8\u91cf(local variables)\u548c\u8fd4\u56de\u5730\u5740(return address)\uff0c\u90fd\u4f1a\u88ab\u5b58\u5165\u5230\u6808\u5e27(stack frame)\u5f53\u4e2d\uff0c\u800c\u8fd9\u4e2a\u5e27\u4f1a\u88ab\u5b58\u5230\u7cfb\u7edf\u6808(system stack)\u4e2d\u3002</p> <p>\u7531\u4e8e\u7cfb\u7edf\u4e0d\u4f1a\u68c0\u67e5\u6808\u6ea2\u51fa(overflow)\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u5f53\u8c03\u7528\u51fd\u6570\u8fc7\u591a\u65f6\u4f1a\u5e26\u6765\u707e\u96be\u6027\u540e\u679c\uff08\u6bd4\u5982\u6f0f\u6389\u57fa\u672c\u60c5\u51b5\u7684\u9012\u5f52\u51fd\u6570\uff09</p> <p>\u5c3e\u90e8\u9012\u5f52(tail recursion)\uff1a\u9012\u5f52\u51fd\u6570\u5728\u6700\u540e\u4e00\u884c\u8fdb\u884c\u9012\u5f52\u8c03\u7528\u3002\u8fd9\u65f6\u7cfb\u7edf\u5f80\u5f80\u5c06\u9012\u5f52\u51fd\u6570\u6539\u5199\u6210\u5faa\u73af\u5f62\u5f0f\uff08<code>goto</code>\uff0c\u5f53\u7136\u81ea\u5df1\u5199\u5faa\u73af\u65f6\u5343\u4e07\u522b\u7528\u8fd9\u4e2a\uff09\uff0c\u89c1\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a <pre><code>// Recursion\nvoid PrintList(List L)\n{\n    if (L != NULL)\n    {\n        PrintElement(L-&gt;Element);\n        PrintList(L-&gt;Next);\n    }\n}  // a bad use of recursion\n\n// Iteration\nvoid PrintList(List L)\n{\n    top: if (L != NULL)\n    {\n        PrintElement(L-&gt;Element);\n        L = L-&gt;Next;\n        goto top;\n    }  // do NOT do this!\n}  // compiler removes recursion\n</code></pre> \u867d\u7136\u5bf9\u4e8e\u540c\u4e00\u95ee\u9898\uff0c\u975e\u9012\u5f52\u7684\u7a0b\u5e8f\u5f80\u5f80\u5feb\u4e8e\u9012\u5f52\uff0c\u4f46\u9012\u5f52\u7a0b\u5e8f\u901a\u5e38\u66f4\u52a0\u7b80\u5355\u548c\u6613\u4e8e\u7406\u89e3\u3002</p>"},{"location":"3-x.html#the-queue-adt","title":"The Queue ADT","text":""},{"location":"3-x.html#adt_1","title":"ADT","text":"<p>\u961f\u5217(queue)\uff1a\u4e00\u79cdFIFO(first-in-first-out\uff0c\u5148\u8fdb\u5148\u51fa)\u7684\u5217\u8868\uff0c\u5373\u5728\u6709\u5e8f\u5217\u8868\u7684\u4e00\u7aef\u63d2\u5165\uff0c\u53e6\u4e00\u7aef\u5220\u9664</p> <ul> <li>Objects\uff1a\u62e5\u67090\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u7684\u6709\u9650\u6709\u5e8f\u5217\u8868</li> <li> <p>Operations\uff1a</p> <ul> <li><code>Int IsEmpty(Queue Q);</code>\uff1a\u68c0\u67e5\u961f\u5217\u662f\u5426\u4e3a\u7a7a</li> <li><code>Stack CreateQueue();</code>\uff1a\u521b\u5efa\u961f\u5217</li> <li><code>DisposeQueue(Queue Q);</code> </li> <li><code>MakeEmpty(Queue Q);</code>\uff1a\u6e05\u7a7a\u961f\u5217</li> <li><code>Enqueue(ElementType X, Queue Q);</code>\uff1a\u5165\u961f </li> <li><code>ElementType Front(Queue Q);</code>\uff1a\u83b7\u5f97\u961f\u9996\u5143\u7d20 </li> <li><code>Dequeue(Queue Q);</code>\uff1a\u51fa\u961f </li> </ul> </li> </ul>"},{"location":"3-x.html#array-implementation","title":"Array Implementation","text":"\u4ee3\u7801\u5b9e\u73b0 <pre><code>// .h\u6587\u4ef6\u4ee3\u7801\uff1a\u961f\u5217ADT\u7684\u7c7b\u578b\u58f0\u660e\n#ifndef _Queue_h\n\nstruct QueueRecord;\ntypedef struct QueueRecord *Queue;\n\nint IsEmpty(Queue Q);\nint IsFull(Queue Q);\nStack CreateQueue(int MaxElements);\nvoid DisposeQueue(Queue Q);\nvoid MakeEmpty(Queue Q);\nvoid Enqueue(ElementType X, Queue Q);\nElementType Front(Queue Q);\nvoid Dequeue(Queue Q);\nElementType FrontAndDequeue(Queue Q);\n\n#endif /* _Queue_h*/\n</code></pre> <pre><code>// .c \u6587\u4ef6\u4ee3\u7801\uff1a(\u52a8\u6001\u5206\u914d)\u6570\u7ec4\u65b9\u5f0f\u7684\u5b9e\u73b0\n#define MintackSize (5) // \u52a0\u62ec\u53f7\u662f\u4e3a\u4e86\u9632\u6b62\u8fd0\u7b97\u987a\u5e8f\u7684\u9519\u8bef\nstruct QueueRecord\n{\n    int Capacity;\n    int Front;\n    int Rear;\n    int Size;\n    ElementType *Array;\n};\n\nint IsEmpty(Queue Q)\n{\n    return Q-&gt;Size == 0;\n}\n\nvoid MakeEmpty(Queue Q)\n{\n    Q-&gt;Size = 0;\n    Q-&gt;Front = 1;\n    Q-&gt;Rear = 0;\n}\n\n// \u5f62\u6210\u5faa\u73af\u961f\u5217\nstatic int Succ(int Value, Queue Q)\n{\n    if (++Value == Q-&gt;Capacity)\n        Value = 0;\n    return Value;\n}\n\nvoid Enqueue(ElementType X, Queue Q)\n{\n    if (IsFull(Q))\n        Error(\"Full Queue\");\n    else\n    {\n        Q-&gt;Size++;\n        Q-&gt;Rear = Succ(Q-&gt;Rear, Q);\n        Q-&gt;Array[Q-&gt;Rear] = X;\n    }\n}\n\nvoid Dequeue(Queue Q)\n{\n    if (IsEmpty(Q))\n        Error(\"Empty Queue\");\n    else\n    {\n        Q-&gt;Size--;\n        Q-&gt;Front = Succ(Q-&gt;Front, Q);\n    }\n}\n\nElementType Front(Queue Q)\n{\n    if (IsEmpty(Q))\n        Error(\"Empty Queue\");\n    else\n        return Q-&gt;Array[Q-&gt;Front];\n}\n</code></pre> <p>\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u91c7\u7528\u4e86\u5faa\u73af\u961f\u5217(circular queue)\u7684\u65b9\u6cd5\uff0c\u80fd\u591f\u6700\u5927\u5316\u5229\u7528\u961f\u5217\u7684\u7a7a\u95f4\u3002\u5bf9\u4e8e\u5faa\u73af\u961f\u5217\uff0c\u533a\u5206\u7a7a\u961f\u5217\u548c\u6ee1\u961f\u5217\u67092\u79cd\u505a\u6cd5\uff1a</p> <ul> <li>\u7a7a\u51fa\u4e00\u5757\u7a7a\u95f4</li> <li>\u589e\u52a0\u4e00\u4e2a <code>Size</code> \u7684\u5b57\u6bb5\uff0c\u7528\u6765\u5b9e\u65f6\u7edf\u8ba1\u961f\u5217\u5143\u7d20\u4e2a\u6570\uff0c\u8fd9\u6837\u65e0\u9700\u6d6a\u8d39\u7a7a\u95f4\uff08\u4e0a\u8ff0\u4ee3\u7801\u4fbf\u91c7\u7528\u8fd9\u79cd\u505a\u6cd5\uff09 <p>\u5728\u6cd52\u4e2d\uff0c\u5982\u679c\u7528 <code>front</code> \u8868\u793a\u961f\u9996\u5143\u7d20\uff0c<code>size</code> \u8868\u793a\u5f53\u524d\u961f\u4f0d\u5927\u5c0f\uff0c<code>m</code> \u8868\u793a\u961f\u4f0d\u6700\u5927\u5927\u5c0f\uff0c\u5219\u961f\u5c3e\u5143\u7d20 <code>rear = (front + size - 1) % m</code></p> </li> </ul>"},{"location":"3-x.html#linked-list-implementation","title":"Linked List Implementation","text":"\u4ee3\u7801\u5b9e\u73b0\uff08\u76f4\u63a5\u6458\u81ea\u6211\u7684\u67d0\u4e2a\u4f5c\u4e1a\uff09 <pre><code>// Declaration\ntypedef struct QueueNode * PtrToQueue;  // The pointer to a queue node\ntypedef struct queue * Queue;           // The actual queue\nstruct QueueNode                        // The node(double linked list)\n{\n    char var[VLENGTH];\n    PtrToQueue next;                    // The pointer to the next node\n    PtrToQueue pre;                     // The pointer to the previous node\n};\n\nstruct queue                            // just a structure, the real one is defined above!\n{\n    PtrToQueue front;                 \n    PtrToQueue rear;\n    int size;\n};\n\nint IsEmptyQ(Queue Q);                  // Detecting whether the queue is empty\nQueue CreateQueue();                    // Creating the queue\nvoid DisposeQueue(Queue Q);             // Clearing the queue\nvoid Enqueue(char * x, Queue Q);        // Putting the element into the queue\nchar * Front(Queue Q);                  // Obtaining the front element\nvoid Dequeue(Queue Q);                  // Deleting the front element\n\n\n// Functions\nint IsEmptyQ(Queue Q)\n{\n    return Q-&gt;size == 0;   // Just Cheking the size\n}\n\n// Creating the queue\nQueue CreateQueue()\n{\n    Queue q;\n    // Allocating spaces for the while queue, the front node and the rear node\n    q = (Queue)malloc(sizeof(struct queue));\n    q-&gt;front = (PtrToQueue)malloc(sizeof(struct QueueNode));\n    q-&gt;rear = (PtrToQueue)malloc(sizeof(struct QueueNode));\n    q-&gt;front = q-&gt;rear; // Letting the front pointer and the rear pointer point to the same position, representing the empty queue\n    q-&gt;size = 0;   // Letting the size be 0(empty)\n\n    return q;\n}\n\n// Clearing the queue\nvoid DisposeQueue(Queue Q)\n{\n    while (!IsEmptyQ(Q))  // Deleting all the element until all the element is out\n        Dequeue(Q);\n}\n\n// Putting the element into the queue\nvoid Enqueue(char * x, Queue Q)\n{   // Allocating a space for the temporary node\n    PtrToQueue tmp = (PtrToQueue)malloc(sizeof(struct QueueNode));\n\n    strcpy(tmp-&gt;var, x);  // Assignment\n    tmp-&gt;pre = Q-&gt;rear;   // Building the relationship with the originally rear node\n    tmp-&gt;next = Q-&gt;rear-&gt;next;\n    Q-&gt;rear-&gt;next = tmp;\n    Q-&gt;rear = tmp;        // Setting the new node as the rear node\n    Q-&gt;size++;            // Incrementing the size\n}\n\n// Obtaining the front element\nchar * Front(Queue Q)\n{\n    if (!IsEmptyQ(Q))           // If not empty, obtaining the front node\n        return Q-&gt;front-&gt;next-&gt;var;\n\n    printf(\"Empty Queue!!!\\n\");  // Warning!!!\n    return 0;\n}\n\n// Deleting the front element\nvoid Dequeue(Queue Q)\n{// Allocating a space for the temporary node\n    if (IsEmptyQ(Q))     // Warning!\n        printf(\"Empty Queue!!!\");\n    else\n    {\n        PtrToQueue tmp = Q-&gt;front-&gt;next; // Remember the queue has a dummy header!\n        Q-&gt;front-&gt;next = tmp-&gt;next;   // Setting the next node as the new front node\n        tmp-&gt;next-&gt;pre = Q-&gt;front;\n        free(tmp);   // Deleting the originally front node\n        Q-&gt;size--;   // Decrementing the size\n    }\n\n}\n</code></pre>"},{"location":"3-x.html#applications_2","title":"Applications","text":"<ul> <li>\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u4efb\u52a1\u5b89\u6392\uff1a\u6bcf\u4e2a\u4efb\u52a1\u6309\u7167 FIFO \u539f\u5219\u6267\u884c <p>\u8fd9\u91cc\u6709\u4e2a\u5c0f\u95ee\u9898\uff1a\u6bcf\u4e2a\u4efb\u52a1\u53ef\u4ee5\u5728\u4e2d\u9014 <code>kill</code> \u6389\uff0c\u8fd9\u4e0d\u7b26\u5408\u961f\u5217\u7684\u51fa\u961f\u65b9\u6cd5</p> </li> </ul>"},{"location":"4-x.html","title":"Chap 4 Trees","text":"<p> \u7ea6 2678 \u4e2a\u5b57  259 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 17 \u5206\u949f</p> \u6838\u5fc3\u77e5\u8bc6 <ul> <li>\u6811\u7684\u8868\u793a\u6cd5\uff1afirst-child-next-sibling</li> <li>\u4e8c\u53c9\u6811<ul> <li>\u6027\u8d28</li> <li>\u6811\u7684\u904d\u5386\uff1a\u524d\u3001\u4e2d\u3001\u540e\u3001\u5c42</li> <li>\u7ebf\u7d22\u4e8c\u53c9\u6811</li> <li>\u5e94\u7528\uff1a\u6587\u4ef6\u7cfb\u7edf\u3001\u8868\u8fbe\u5f0f\u6811</li> </ul> </li> <li>\u4e8c\u53c9\u641c\u7d22\u6811<ul> <li>\u5404\u79cd\u64cd\u4f5c\uff0c\u91cd\u70b9\u662f\u63d2\u5165\u548c\u5220\u9664</li> </ul> </li> </ul> <p>\u6ce8\uff1a\u66f4\u591a\u7406\u8bba\u90e8\u5206\u7684\u77e5\u8bc6\u53ef\u53c2\u89c1\u79bb\u6563\u6570\u5b66\u540c\u540d\u7ae0\u8282</p>"},{"location":"4-x.html#preliminaries","title":"Preliminaries","text":""},{"location":"4-x.html#definitions","title":"Definitions","text":"<ul> <li> <p>\u6811(trees)\uff1a\u5b83\u662f\u4e00\u7ec4\u8282\u70b9\uff0c\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\uff1a</p> <ul> <li>\u5305\u542b1\u4e2a\u6839\u8282\u70b9(root) \\(r\\)</li> <li>\u67090\u4e2a\u6216\u591a\u4e2a\u5b50\u6811(subtrees) \\(T_1, \\dots, T_k\\)\uff0c\u6bcf\u4e2a\u5b50\u6811\u7684\u6839\u8282\u70b9\u90fd\u548c\\(r\\)\u901a\u8fc7\u4e00\u6761\u8fb9(edge)\u8fde\u63a5</li> </ul> </li> </ul> <p>\u6ce8\uff1a</p> <ul> <li>\u5b50\u6811\u4e4b\u95f4\u4e0d\u4f1a\u76f8\u4e92\u8fde\u63a5\uff0c\u56e0\u6b64\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u67d0\u4e2a\u5b50\u6811\u7684\u6839\u8282\u70b9</li> <li>\u5bf9\u4e8e\u4e00\u68f5\u6709 \\(N\\) \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u5b83\u6709 \\(N - 1\\) \u6761\u8fb9</li> </ul> <ul> <li>\u5ea6(degree)\uff1a<ul> <li>\u4e00\u4e2a\u8282\u70b9\u7684\u5ea6\u6307\u7684\u662f\u5b83\u6240\u6709\u5b50\u6811\u7684\u4e2a\u6570</li> <li>\u4e00\u68f5\u6811\u7684\u5ea6\u4e3a\\(\\max\\limits_{\\text{node } \\in \\text{ tree}}\\{\\text{degree(node)}\\}\\)</li> </ul> </li> <li>\u7236\u8282\u70b9(parent)\uff1a\u6709\u5b50\u6811\u7684\u8282\u70b9</li> <li>\u5b69\u5b50\u8282\u70b9(children)\uff1a\u7236\u8282\u70b9\u5b50\u6811\u7684\u6839\u8282\u70b9</li> <li>\u5144\u5f1f\u8282\u70b9(siblings)\uff1a\u6709\u5171\u540c\u7236\u8282\u70b9\u7684\u5b69\u5b50\u8282\u70b9</li> <li>\u53f6\u5b50\u8282\u70b9(leaf)\uff1a\u5ea6\u4e3a0\u7684\u8282\u70b9</li> <li>\u4ece\\(n_1\\)\u5230\\(n_k\\)\u8def\u5f84(path)\uff1a\u4e00\u4e2a\u5305\u542b\u8282\u70b9 \\(n_1, n_2, \\dots, n_k\\) \u552f\u4e00\u7684\u5e8f\u5217\uff0c\u6ee1\u8db3 \\(n_i\\) \u662f \\(n_{i+1}\\) \u7684\u7236\u8282\u70b9(\\(1 \\le i &lt; k\\))</li> <li>\u8def\u5f84\u957f\u5ea6(length)\uff1a\u8def\u5f84\u4e0a\u8fb9\u7684\u6761\u6570</li> <li>\u9876\u70b9\\(n_i\\)\u7684\u6df1\u5ea6(depth)\uff1a\u4ece\u6839\u8282\u70b9\u51fa\u53d1\u5230\\(n_i\\)\u7684\u8def\u5f84\u957f\u5ea6\uff0c\u89c4\u5b9a \\(\\mathrm{depth}(root) = 0\\)</li> <li>\u9876\u70b9\\(n_i\\)\u7684\u9ad8\u5ea6(height)\uff1a\u4ece\\(n_i\\)\u5230\u53f6\u5b50\u7ed3\u70b9\u7684\u6700\u957f\u8def\u5f84\u957f\u5ea6\uff0c\u89c4\u5b9a \\(\\mathrm{height}(leaf) = 0\\)</li> </ul> \\[\\therefore \\mathrm{height}(root) = \\mathrm{depth}(deepest\\text{ }leaf)\\] <ul> <li>\u7956\u5148(ancestor)\uff1a\u4ece\u8be5\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8282\u70b9</li> <li>\u540e\u4ee3(descendant)\uff1a\u8be5\u8282\u70b9\u6240\u6709\u5b50\u6811\u7684\u8282\u70b9</li> <li>\u5185\u90e8\u8282\u70b9(internal vertices)\uff1a\u6709\u5b69\u5b50\u8282\u70b9\u7684\u9876\u70b9</li> </ul>"},{"location":"4-x.html#implementation","title":"Implementation","text":""},{"location":"4-x.html#list-representation","title":"List Representation","text":"<p>\u7f3a\u9677\uff1a\u6bcf\u4e2a\u8282\u70b9\u7684\u7a7a\u95f4\u5927\u5c0f\u53d6\u51b3\u4e8e\u5b83\u6709\u591a\u5c11\u4e2a\u5b50\u6811\uff0c\u8fd9\u6837\u5b9e\u73b0\u8d77\u6765\u5c31\u5f88\u9ebb\u70e6</p>"},{"location":"4-x.html#firstchild-nextsibling-representation","title":"FirstChild-NextSibling Representation","text":"<p>\u6ce8\uff1a\u5bf9\u4e8e\u540c\u4e00\u68f5\u6811\uff0c\u8fd9\u79cd\u8868\u793a\u5e76\u4e0d\u552f\u4e00\uff0c\u56e0\u4e3a\u5b69\u5b50\u7684\u987a\u5e8f\u53ef\u4ee5\u662f\u4efb\u610f\u7684</p>"},{"location":"4-x.html#applicationfile-system","title":"Application(File System)","text":"<p>Unix \u6587\u4ef6\u6811 \\(\\Rightarrow\\) DOS \u76ee\u5f55\u5217\u8868</p> <p>\u5206\u5c42\u6587\u4ef6\u7cfb\u7edf\u7684\u76ee\u5f55\u5217\u8868</p> Unix \u7cfb\u7edfDOS \u7cfb\u7edf <p> </p> <p> </p> <p>\u6ce8\u610f\uff1a\u5728UNIX\u7cfb\u7edf\u4e2d\u4f4d\u4e8e\u6df1\u5ea6 \\(d_i\\) \u7684\u6587\u4ef6\uff0c\u5728\u8f6c\u5316\u4e3a DOS \u7cfb\u7edf\u7684\u8868\u793a\u6cd5\u65f6\u9700\u8981\u5c06\u5b83\u4eec\u7684\u540d\u5b57\u7f29\u8fdb \\(d_i\\) \u500d\u7684\u591a\u4e2a\u7a7a\u683c</p> <p>\u4ee3\u7801\u5b9e\u73b0\uff08\u524d\u5e8f\u904d\u5386\uff09\uff1a <pre><code>static void ListDir(DirOfFile D, int Depth)\n{\n    if (D is legitimate entry)\n    {\n        PrintName(D, Depth);\n        if (D is a directory)\n            for (each child C of D)\n                ListDir(C, Depth + 1);\n    }\n}\n</code></pre> <code>Depth</code> \u53d8\u91cf\u662f\u4e0d\u5e94\u8be5\u88ab\u7528\u6237\u770b\u5230\u7684\u5185\u90e8\u53d8\u91cf\uff0c\u9700\u8981\u9690\u85cf\u8d77\u6765\u3002\u4e00\u79cd\u89e3\u51b3\u65b9\u6cd5\u662f\u50cf\u4e0b\u9762\u90a3\u6837\u5b9a\u4e49\u53e6\u5916\u4e00\u4e2a\u51fd\u6570\uff0c\u9690\u85cf<code>Depth</code> \u63a5\u53e3</p> <pre><code>void ListDirectory(DirOfFile D)\n{\n    ListDir(D, 0);\n}\n</code></pre> <p>\u8ba1\u7b97\u76ee\u5f55\u5927\u5c0f\uff1a</p> <p>\u4ee3\u7801\u5b9e\u73b0\uff08\u540e\u5e8f\u904d\u5386\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\\(O(N)\\)\uff09 <pre><code>static int SizeDir(DirOrFile D)\n{\n    int TotalSize;\n    TotalSize = 0;\n    if (D is a legitimate entry)\n    {\n        TotalSize = FileSize(D);\n        if (D is a directory)\n            for (each child C of D)\n                TotalSize += SizeDir(C);\n    } // end if D is legal\n    return TotalSize;\n}\n</code></pre></p>"},{"location":"4-x.html#binary-trees","title":"Binary Trees","text":"<p>\u4e8c\u53c9\u6811(binary tree)\uff1a\u6bcf\u4e2a\u8282\u70b9\u62e5\u6709\u4e0d\u8d85\u8fc7\u4e24\u4e2a\u5b69\u5b50\u7684\u6811</p> <p>\u8865\u5145\uff1a\u4e00\u822c\u6811\uff08\u5de6\u56fe\uff09\u7684\u540e\u5e8f\u904d\u5386 = \u7531\u4e0a\u8ff0\u65b9\u6cd5\u5f97\u5230\u7684\u4e8c\u53c9\u6811\uff08\u53f3\u56fe\uff09\u7684\u4e2d\u5e8f\u904d\u5386</p>"},{"location":"4-x.html#expression-treessyntax-trees","title":"Expression Trees(syntax trees)","text":"<ul> <li>\u5148\u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f -&gt; \u540e\u7f00\u8868\u8fbe\u5f0f</li> <li> <p>\u7136\u540e\u7c7b\u4f3c\u540e\u7f00\u8868\u8fbe\u5f0f\u6c42\u89e3\u7684\u65b9\u6cd5\uff0c\u9047\u5230\u8fd0\u7b97\u7b26\u65f6\uff0c\u5c06\u6808\u5185\u7684\u4e24\u4e2a\u64cd\u4f5c\u6570\u5f39\u51fa\uff0c\u4e0e\u8fd0\u7b97\u7b26\u6784\u5efa\u4e00\u68f5\u6811\uff0c\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff1a</p> <ul> <li>\u5de6\u5b50\u6811\uff1a\u6808\u9876\u4e0b\u9762\u7684\u5143\u7d20</li> <li>\u6839\u8282\u70b9\uff1a\u8fd0\u7b97\u7b26</li> <li>\u53f3\u5b50\u6811\uff1a\u6808\u9876\u5143\u7d20</li> </ul> <p>\u5c06\u8fd9\u68f5\u6811\u538b\u5165\u6808\u4e2d\uff0c\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\u76f4\u5230\u904d\u5386\u5b8c\u6574\u4e2a\u8868\u8fbe\u5f0f</p> </li> </ul> \u52a8\u753b\u6f14\u793a <p> </p> \u4ee3\u7801\u5b9e\u73b0 <pre><code>// from my work of project 2\nTree ExpTree(Queue q)\n{\n\u00a0 \u00a0 Tree ans; \u00a0 // The final expression tree\n\u00a0 \u00a0 Stack s; \u00a0 \u00a0// The stack for tree construction, containing the nodes or the trees\n\u00a0 \u00a0 PtrToNode node, op1, op2, new; \u00a0// node for all element in the queue; op1 and op2 are operands;and new is a new tree\n\u00a0 \u00a0 PtrToQueue cur = q-&gt;front-&gt;next; \u00a0// Starting from the second element, for the queue has a dummy header\n\n\u00a0 \u00a0 s = CreateStack(); \u00a0// Initialization\n\u00a0 \u00a0 while (cur != NULL) \u00a0// Traversing all the element in the queue\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 node = CreateNode(cur-&gt;var); \u00a0// Creating node for every element in the queue\n\u00a0 \u00a0 \u00a0 \u00a0 if(isalnum(cur-&gt;var[0]) || cur-&gt;var[0] == '-' &amp;&amp; isalnum(cur-&gt;var[1])) \u00a0// If it's an operand, push it into the stack\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Push1(node, s);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // printf(\"%s\\n\", str);\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 else \u00a0// If it's a operator,\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 op2 = Top1(s); \u00a0// Obtaining the top two operands from the stack\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Pop(s);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 op1 = Top1(s);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Pop(s);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new = CreateTree(node, op1, op2); \u00a0// Creating an expression (sub)tree\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Push1(new, s);\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 cur = cur-&gt;next;\n\u00a0 \u00a0 }\n\u00a0 \u00a0 ans = Top1(s); // The remaining tree in the stack is the answer\n\n\u00a0 \u00a0 return ans;\n\n}\n</code></pre>"},{"location":"4-x.html#tree-traversals","title":"Tree Traversals","text":"<p>\u6811\u7684\u904d\u5386(tree traversals)\uff1a\u5bf9\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u8bbf\u95ee\u4e00\u6b21\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(N)\\)</p> <p>\u524d\u5e8f\u904d\u5386(preorder traversal)</p> <pre><code>void preorder(tree_ptr tree)\n{\n    if (tree)\n    {\n        visit(tree);\n        for (each child C of tree)\n            preorder(C);\n    }\n}\n</code></pre> <p>\u540e\u5e8f\u904d\u5386(postorder traversal)</p> <pre><code>void postorder(tree_ptr tree)\n{\n    if (tree)\n    {\n        for (each child C of tree)\n            postorder(C);\n        visit(tree);\n    }\n}\n</code></pre> <p>\u5c42\u5e8f\u904d\u5386(levelorder traversal)</p> <pre><code>void levelorder(tree_ptr tree)\n{\n    enqueue(tree);\n    while (queue is not empty)\n    {\n        visit(T = dequeue());\n        for (each child C of T)\n            enqueue(C);\n    }\n}\n</code></pre> \u8865\u5145\uff1a\u201c\u4e4b\u201d\u5b57\u5f62\u904d\u5386 <p>\u53ef\u4ee5\u8ba4\u4e3a\u662f\u201c\u5c42\u5e8f\u904d\u5386 pro\u201d\uff1a\u7b2c 0 \u5c42\uff08\u6839\u8282\u70b9\uff09\u4ece\u53f3\u5f80\u5de6\u3001\u7b2c1\u5c42\u4ece\u5de6\u5f80\u53f3\u3001\u7b2c2\u5c42\u4ece\u53f3\u5f80\u5de6...\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u5c42\u904d\u5386\u5b8c\u540e\u90fd\u8981\u6539\u53d8\u4e00\u6b21\u904d\u5386\u65b9\u5411</p> <p>\u5b9e\u73b0\u65b9\u6cd5\uff1a\u7528 2 \u4e2a\u6808\uff0c\u4e00\u4e2a\u5b58\u4ece\u5de6\u5f80\u53f3\u904d\u5386\u7684\u8282\u70b9\uff0c\u4e00\u4e2a\u5b58\u4ece\u53f3\u5f80\u5de6\u904d\u5386\u7684\u8282\u70b9</p> <p>\u4e2d\u5e8f\u904d\u5386(inorder traversal) <pre><code>// Recursion\nvoid inorder(tree_ptr tree)\n{\n    if (tree)\n    {\n        inorder(tree-&gt;Left);\n        visit(tree-&gt;Element);\n        inorder(tree-&gt;Right);\n    }\n}\n\n// Iteration(using stack)\nvoid iter_inorder(tree_ptr tree)\n{\n    Stack S = CreateStack(MAX_SIZE);\n    for (;;)\n    {\n        for (; tree; tree = tree-&gt;left)\n            Push(tree, S);\n        tree = Top(S);\n        Pop(S);\n        if (!tree)\n            break;\n        visit(tree-&gt;Element);\n        tree = tree-&gt;Right;\n    }\n}\n</code></pre></p> <p>\u6ce8</p> <ul> <li>\u77e5\u9053\u524d\u5e8f\u6216\u8005\u540e\u5e8f\u904d\u5386 + \u4e2d\u5e8f\u904d\u5386\uff0c\u53ef\u4ee5\u786e\u5b9a\u552f\u4e00\u7684\u4e00\u68f5\u6811</li> <li>\u77e5\u9053\u524d\u5e8f\u904d\u5386 + \u540e\u5e8f\u904d\u5386\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u65e0\u6cd5\u786e\u5b9a\u6811\u7684\u5f62\u72b6</li> </ul>"},{"location":"4-x.html#threaded-binary-trees","title":"Threaded Binary Trees","text":"<p>\u5bf9\u4e8e\u4e00\u822c\u7684\u4e8c\u53c9\u6811\uff0c\u5b83\u7684\u53f6\u5b50\u8282\u70b9\u7684\u5de6\u53f3\u6307\u9488\u6307\u5411 <code>NULL</code>\uff0c\u8fd9\u6d6a\u8d39\u4e86\u5f88\u591a\u7a7a\u95f4\u3002\u800c\u7ebf\u7d22\u4e8c\u53c9\u6811(threaded binary trees)\u5f88\u597d\u5730\u5229\u7528\u4e86\u95f2\u7f6e\u7684\u8282\u70b9\uff0c\u5177\u4f53\u89c4\u5219\u5982\u4e0b\uff1a</p> <ul> <li>\u5982\u679c <code>Tree-&gt;Left</code> \u4e3a\u7a7a\uff0c\u5c06\u5b83\u6307\u5411\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u524d\u4e00\u4e2a\u8282\u70b9</li> <li>\u5982\u679c <code>Tree-&gt;Right</code> \u4e3a\u7a7a\uff0c\u5c06\u5b83\u6307\u5411\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u540e\u4e00\u4e2a\u8282\u70b9</li> <li>\u6709\u4e00\u4e2a\u5934\u8282\u70b9(dummy node)\uff0c\u4f7f\u5f97\u6700\u5de6\u8fb9\u548c\u6700\u53f3\u8fb9\u5b69\u5b50\u5206\u522b\u6307\u5411\u8fd9\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u5b69\u5b50</li> </ul> <pre><code>// \u7ed3\u6784\u58f0\u660e\ntypedef struct ThreadedTreeNode *PtrTo ThreadedNode;\ntypedef struct PtrToThreadedNode ThreadedTree;\nstruct ThreadedTreeNode\n{\n    int LeftThread;      // if it is True, then Left\n    TreadedTree Left;    // is a thread, not a child ptr\n    ElementType Element;\n    int RightThread;     // if it is True, then Right\n    ThreadedTree Right;  // is a thread, not a child ptr\n}\n</code></pre> <p>\u4f8b\u5b50</p> <p> </p> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u4ece dummy head node \u51fa\u53d1\uff0c\u91cd\u590d\u201c\u5de6\u7ebf\u7d22 \\(\\rightarrow\\) \u53f3\u7ebf\u7d22 \\(\\rightarrow\\) \u5de6\u7ebf\u7d22 \\(\\rightarrow\\) \u53f3\u7ebf\u7d22 \\(\\dots\\)\u201d\u7684\u904d\u5386\u8fc7\u7a0b\uff0c\u6700\u540e\u56de\u5230 dummy head node \uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u5bf9\u6574\u68f5\u6811\u8fdb\u884c\u4e00\u8d9f\u5b8c\u6574\u7684\u4e2d\u5e8f\u904d\u5386\u3002</p> \u6ce8 <p>\u867d\u7136\u8fd9\u91cc\u9ed8\u8ba4\u4f7f\u7528\u4e2d\u5e8f\u904d\u5386\u7684\u5b9a\u4e49\uff0c\u4f46\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u5176\u4fee\u6539\u6210\u524d\u5e8f\u6216\u8005\u540e\u5e8f\u904d\u5386\u7684\u7248\u672c(\u6bd4\u5982\u5bf9\u4e8e\u540e\u5e8f\u904d\u5386\u7248\u7684\u7ebf\u7d22\u4e8c\u53c9\u6811\uff0c\u67d0\u4e2a\u8282\u70b9\u7a7a\u51fa\u6765\u7684\u5de6\u5b50\u6811\u6307\u5411\u5b83\u5728\u540e\u5e8f\u904d\u5386\u4e2d\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u7a7a\u51fa\u6765\u7684\u53f3\u5b50\u6811\u6307\u5411\u5b83\u5728\u540e\u5e8f\u904d\u5386\u4e2d\u7684\u540e\u4e00\u4e2a\u8282\u70b9)</p>"},{"location":"4-x.html#special-cases","title":"Special Cases","text":"<ul> <li>\u6b6a\u659c\u4e8c\u53c9\u6811(skewed binary trees)\uff1a</li> </ul> <ul> <li>\u5b8c\u5168\u4e8c\u53c9\u6811(complete binary trees)\uff1a</li> </ul>"},{"location":"4-x.html#properties","title":"Properties","text":"<ul> <li> <p>\u7b2c \\(i\\) \u5c42(\\(i \\ge 1\\))\u6700\u591a\u62e5\u6709 \\(2^{i - 1}\\) \u4e2a\u8282\u70b9\uff1b\u6df1\u5ea6\u4e3a \\(k\\) \u7684\u4e8c\u53c9\u6811\u6700\u591a\u6709 \\(2^k - 1\\) \u4e2a\u8282\u70b9(\\(k \\ge 1\\))</p> </li> <li> <p>\u5bf9\u4e8e\u975e\u7a7a\u7684\u4e8c\u53c9\u6811\uff0c\\(n_0 = n_2 + 1\\)\uff0c\u5176\u4e2d \\(n_0\\) \u662f\u53f6\u5b50\u8282\u70b9\u4e2a\u6570\uff0c\\(n_2\\) \u662f\u5ea6\u4e3a 2 \u7684\u8282\u70b9\u4e2a\u6570</p> </li> </ul> <p>\u8bc1\u660e</p> <p>\u6ce8\uff1a\u8be5\u8bc1\u660e\u53ef\u63a8\u5e7f\u81f3n\u53c9\u6811</p> <ul> <li>\u4ee4 \\(n_1\\) \u4e3a\u5ea6\u4e3a 1 \u7684\u8282\u70b9\uff0c\\(n\\) \u4e3a\u8282\u70b9\u603b\u6570\uff0c\u5219\\(n = n_0 + n_1 + n_2\\)</li> <li>\u4ee4 \\(B\\) \u4e3a\u8fb9\u7684\u6761\u6570\uff0c\u5219 \\(n = B + 1\\)\uff0c\u800c\u4e14\u4e0d\u96be\u53d1\u73b0 \\(B = n_1 + 2n_2\\)</li> <li>\u8054\u7acb\u4e0a\u8ff0\u4e09\u4e2a\u65b9\u7a0b\uff0c\u53ef\u4ee5\u5f97\u5230 \\(n_0 = n_2 + 1\\)(\\(n_1\\) \u88ab\u6d88\u6389\u4e86)</li> </ul> <p>\u63a8\u8bba1\uff1a\u5bf9\u4e8e\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6613\u77e5 \\(n_1 = 0\\) \u6216 \\(1\\)\u3002\u7531 \\(n_0 = n_2 + 1\\) \u77e5:</p> <ul> <li>\u5b8c\u5168\u4e8c\u53c9\u6811\u6709\u5947\u6570\u4e2a\u8282\u70b9\u65f6\uff0c\\(n_1 = 0\\)</li> <li>\u5b8c\u5168\u4e8c\u53c9\u6811\u6709\u5076\u6570\u4e2a\u8282\u70b9\u65f6\uff0c\\(n_1 = 1\\)</li> </ul> <p>\u63a8\u8bba2\uff1a\\(n\\) \u53c9\u6811\u7684\u53f6\u5b50\u8282\u70b9\u4e2a\u6570\u4e0e \\(n_1\\) \u65e0\u5173\uff0c\u4e14 \\(n_0 = \\sum\\limits_{i = 2}^n (i - 1)n_i + 1\\)</p>"},{"location":"4-x.html#binary-search-tree","title":"Binary Search Tree","text":""},{"location":"4-x.html#definition","title":"Definition","text":"<p>\u4e8c\u53c9\u641c\u7d22\u6811(Binary Search Tree)\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5b83\u53ef\u4ee5\u662f\u7a7a\u6811\uff0c\u5982\u679c\u975e\u7a7a\uff0c\u5219\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a</p> <ul> <li> <p>\u6bcf\u4e2a\u8282\u70b9\u6709\u4e00\u4e2a\u6574\u6570\u7684\u952e(key)\uff0c\u6bcf\u4e2a\u952e\u4e92\u4e0d\u76f8\u540c</p> <p>\u8fd9\u91cc\u8fd9\u4e48\u5b9a\u4e49\u662f\u4e3a\u4e86\u65b9\u4fbf\u540e\u9762\u7684\u64cd\u4f5c\uff0c\u5b9e\u9645\u4e0a\u952e\u4e0d\u5fc5\u662f\u6574\u6570\uff0c\u952e\u4e5f\u53ef\u4ee5\u76f8\u540c</p> </li> <li> <p>\u975e\u7a7a\u5de6\u5b50\u6811\u7684\u952e\u5fc5\u987b\u5c0f\u4e8e\u6839\u4e0a\u7684\u952e</p> </li> <li>\u975e\u7a7a\u53f3\u5b50\u6811\u7684\u952e\u5fc5\u987b\u5927\u4e8e\u6839\u4e0a\u7684\u952e</li> <li>\u5de6\u53f3\u5b50\u6811\u4e5f\u662f\u4e8c\u53c9\u641c\u7d22\u6811</li> </ul> <p>\u6ce8</p> <ul> <li>\u5bf9\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540c\u4e00\u5c42\u4ece\u5de6\u5f80\u53f3\u904d\u5386\uff0c\u5f97\u5230\u7684\u952e\u7684\u5e8f\u5217\u662f\u6709\u5e8f\u7684</li> <li>\u901a\u8fc7\u5bf9\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5f97\u5230\u7684\u5143\u7d20\u5e8f\u5217\u662f\u6709\u5e8f\u7684</li> <li>\u7ed9\u51fa\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u524d\u5e8f\u6216\u8005\u540e\u5e8f\u904d\u5386\uff0c\u6839\u636e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u5e94\u5f53\u53ef\u4ee5\u8fd8\u539f\u51fa\u8fd9\u68f5\u6811</li> <li>\u5bf9\u4e8e\u4e00\u68f5\u5b8c\u5168\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5b83\u6700\u5c0f\u7684\u8282\u70b9\u4e00\u5b9a\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u6700\u5927\u7684\u5c31\u4e0d\u4e00\u5b9a\u4e86</li> </ul>"},{"location":"4-x.html#adt","title":"ADT","text":"<p>Objects\uff1a\u62e5\u6709 0 \u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u7684\u6709\u9650\u6709\u5e8f\u8868</p> <p>Operations\uff1a</p> <ul> <li><code>SearchTree MakeEmpty(SearchTree T);</code></li> <li><code>Position Find(ElementType X, SearchTree T);</code></li> <li><code>Position FindMin(SearchTree T);</code></li> <li><code>Position FindMax(SearchTree T);</code></li> <li><code>SearchTree Insert(ElementType X, SearchTree T);</code> </li> <li><code>SearchTree Delete(ElementType X, SearchTree T);</code> </li> <li><code>ElementType Retrieve(Position P);</code></li> </ul>"},{"location":"4-x.html#implementations","title":"Implementations","text":"\u9884\u5148\u5904\u7406 <pre><code>// \u58f0\u660e\u90e8\u5206\n#ifndef _Tree_H\n\nstruct TreeNode;\ntypedef struct TreeNode * Position;\ntypedef struct TreeNode * SearchTree;\n\nSearchTree MakeEmpty(SearchTree T);\nPosition Find(ElementType X, SearchTree T);\nPosition FindMin(SearchTree T);\nPosition FindMax(SearchTree T);\nSearchTree Insert(ElementType X, SearchTree T);\nSearchTree Delete(ElementType X, SearchTree T);\nElementType Retrieve(Position P);\n\n#endif // _Tree_H\n\n// \u5199\u5728\u6267\u884c\u6587\u4ef6\u90e8\u5206\nstruct TreeNode\n{\n    ElementType Element;\n    SearchTree Left;\n    SearchTree Right;\n}\n\n// \u521d\u59cb\u5316\u5904\u7406\uff08\u7528\u5230\u540e\u5e8f\u904d\u5386\uff09\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(logN)\nSearchTree MakeEmpty(SearchTree T)\n{\n    if (T != NULL)\n    {\n        MakeEmpty(T-&gt;Left);\n        MakeEmpty(T-&gt;Right);\n        free(T);\n    }\n    return NULL;\n}\n</code></pre>"},{"location":"4-x.html#find","title":"Find","text":"\u4ee3\u7801\u5b9e\u73b0\uff08\u9012\u5f52\u7248\uff09 <pre><code>Position Find(ElementType X, SearchTree T)\n{\n    if (T == NULL)\n        return NULL; // not found in an empty tree\n    if (X &lt; T-&gt;Element)  // if smaller than root\n        return Find(X, T-&gt;Left);  // search left subtree\n    else if (X &gt; T-&gt;Element)  // if larger than root\n        return Find(X, T-&gt;Right);  // search right subtree\n    else  // if X == root\n        return T;  // found\n}\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6 \\(T(N)\\) \u548c\u7a7a\u95f4\u590d\u6742\u5ea6 \\(S(N)\\) \u90fd\u7b49\u4e8e \\(O(d)\\)\uff0c\u5176\u4e2d \\(d\\) \u4e3a\u6811 \\(X\\) \u7684\u6df1\u5ea6</li> <li>\u51fd\u6570\u5f00\u59cb\u65f6\u5e94\u5148\u5224\u65ad\u6811\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u5c11\u4e86\u8fd9\u53e5\uff0c\u540e\u9762\u5c31\u4f1a\u53d1\u751f\u6bb5\u9519\u8bef\uff08\u5728\u4e0d\u5b58\u5728\u7684\u6811\u4e2d\u83b7\u53d6\u5143\u7d20\uff0c\u8fd9\u662f\u672a\u5b9a\u4e49\u7684\uff09</li> <li>\u8fd9\u91cc\u7684\u9012\u5f52\u51fd\u6570\u662f\u5c3e\u9012\u5f52(tail recursions)\uff0c\u56e0\u6b64\u7cfb\u7edf\u4f1a\u81ea\u52a8\u5c06\u9012\u5f52\u4f18\u5316\u4e3a\u5faa\u73af</li> </ul> \u4ee3\u7801\u5b9e\u73b0\uff08\u8fed\u4ee3\u7248\uff09 <pre><code>Position Iter_Find(ElementType X, SearchTree T)\n{\n    while (T)\n    {\n        if (X == T-&gt;Element)\n            return T;  // found\n        if (X &lt; T-&gt;Element)\n            T = T-&gt;Left;  // move down along left path\n        else\n            T = T-&gt;Right;  // move down along right path\n    } // end while-loop\n    return NULL;  // not found\n}\n</code></pre>"},{"location":"4-x.html#findmin","title":"FindMin","text":"\u4ee3\u7801\u5b9e\u73b0 <pre><code>Position FindMin(SearchTree T)\n{\n    if (T == NULL)\n        return NULL;  // not found in an empty tree\n    else if (T-&gt;Left == NULL)  // found left most\n        return T;\n    else\n        return FindMin(T-&gt;Left); // keep moving to left\n}\n</code></pre>"},{"location":"4-x.html#findmax","title":"FindMax","text":"\u4ee3\u7801\u5b9e\u73b0 <pre><code>Position FindMax(SearchTree T)\n{\n    if (T != NULL)\n        while (T-&gt;Right != NULL)\n            T = T-&gt;Right;  // keep moving to find right most\n    return T;  // return NULL or the right most\n}\n</code></pre> <p><code>FindMin()</code> \u548c <code>FindMax</code> \u51fd\u6570\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a \\(O(d)\\)\uff0c\\(d\\) \u4e3a\u6811\u7684\u6df1\u5ea6</p>"},{"location":"4-x.html#insert","title":"Insert","text":"<p>\u601d\u8def</p> <p>\u6267\u884c\u8fc7\u7a0b\u7c7b\u4f3c <code>Find</code></p> <ul> <li>\u5982\u679c\u627e\u5230\u4e86\u8be5\u8282\u70b9\uff0c\u53ef\u4ee5\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u4e5f\u53ef\u4ee5\u7ed9\u5b83\u7684\u8ba1\u6570\u5668 +1\uff08\u5982\u679c\u8282\u70b9\u6709\u8ba1\u6570\u5b57\u6bb5\u7684\u8bdd\uff09</li> <li>\u5426\u5219\u5c06\u6700\u540e\u9047\u5230\u7684\u975e\u7a7a\u8282\u70b9\u89c6\u4e3a\u65b0\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u7136\u540e\u5c06\u65b0\u8282\u70b9\u63d2\u5165 <code>NULL</code> \u7684\u4f4d\u7f6e\u4e0a</li> </ul> \u4ee3\u7801\u5b9e\u73b0 <pre><code>SearchTree Insert(ElementType X, SearchTree T)\n{\n    if (T == NULL)  // Create and return a one-node tree\n    {\n        T = (SearchTree)malloc(sizeof(struct TreeNode));\n        if (T == NULL)\n            FatalError(\"Out of space!!!\");\n        else\n        {\n            T-&gt;Element = X;\n            T-&gt;Left = T-&gt;Right = NULL;\n        }\n    }  // End create a one-node tree\n    else\n    {\n        if (X &lt; T-&gt;Element)\n            T-&gt;Left = Insert(X, T-&gt;Left);\n        else if (X &gt; T-&gt;Element)\n            T-&gt;Right = Insert(X, T-&gt;Right);\n        // Else X is in the tree already, we'll do nothing\n    }\n    return T; // Don't forget this line!!\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(d)\\)</p> <p>\u601d\u8003</p> \u95ee\u9898\u7b54\u6848 <p>\u53ef\u4e0d\u53ef\u4ee5\u8fd9\u6837\u7b80\u5316\u4e00\u4e0b\u63d2\u5165\u51fd\u6570\u2014\u2014\u5c06\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u6539\u4e3a<code>void</code>\uff0c\u7136\u540e\u5728\u7b2c\u4e00\u4e2a<code>else</code>\u4e2d\u4e0d\u91c7\u7528\u8d4b\u503c\u8bed\u53e5\uff0c\u6700\u540e\u4e5f\u4e0d\u8fd4\u56de<code>T</code></p> <p>NO!!!</p> <p>\u5982\u679c\u6700\u540e\u6ca1\u6709\u5728\u6811\u4e2d\u627e\u5230\u8981\u63d2\u5165\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u65b0\u5efa\u4e00\u68f5\u5b50\u6811\u3002\u5982\u679c\u5efa\u5b8c\u8fd9\u68f5\u6811\u540e\u6ca1\u6709\u8fd4\u56de\uff0c\u90a3\u4e48\u8fd9\u68f5\u5b50\u6811\u7684\u7236\u8282\u70b9\u65e0\u6cd5\u4e0e\u5b83\u5efa\u7acb\u8054\u7cfb\uff0c\u8fd9\u68f5\u5b50\u6811\u4e0e\u539f\u6765\u7684\u6811\u5c31\u662f\u65ad\u5f00\u7684\uff0c\u56e0\u6b64\u5efa\u4e86\u4e5f\u7b49\u4e8e\u767d\u5efa\u3002</p>"},{"location":"4-x.html#delete","title":"Delete","text":"<p>\u8fd9\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u6700\u96be\u5904\u7406\u7684\u90e8\u5206\u3002\u6211\u4eec\u8981\u5904\u7406\u6709\u4e09\u79cd\u60c5\u51b5\uff1a</p> <ul> <li>\u53f6\u5b50\u7ed3\u70b9</li> <li>\u6709\u4e00\u4e2a\u5b69\u5b50</li> <li>\u6709\u4e24\u4e2a\u5b69\u5b50</li> </ul> <p>\u5177\u4f53\u5206\u6790</p> <p>\u5176\u4e2d\u524d\u4e24\u79cd\u60c5\u51b5\u7684\u5b9e\u73b0\u8f83\u4e3a\u7b80\u5355\uff0c\u6700\u540e\u7684\u60c5\u51b5\u8f83\u4e3a\u590d\u6742</p> <ul> <li>\u5220\u9664\u53f6\u5b50\u8282\u70b9\uff1a\u76f4\u63a5\u5c06\u5b83\u7684\u7236\u8282\u70b9\u8fde\u63a5\u5230\u7a7a\u8282\u70b9\u4e0a</li> <li>\u5220\u9664\u5ea6\u4e3a1\u7684\u8282\u70b9\uff1a\u7528\u8be5\u8282\u70b9\u7684\u5b50\u8282\u70b9\u66ff\u6362\u5b83\u81ea\u8eab</li> <li> <p>\u5220\u9664\u5ea6\u4e3a2\u7684\u8282\u70b9\uff1a</p> <ul> <li> <p>\u7528\u8be5\u8282\u70b9\u5de6\u5b50\u6811\u7684\u6700\u5927\u8282\u70b9\u6216\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u8282\u70b9\uff08\u6311\u4e00\u79cd\uff09\u66ff\u6362\u5b83\u81ea\u8eab</p> <p>\u89e3\u91ca\uff1a\u4ee5\u53f3\u5b50\u6811\u6700\u5c0f\u8282\u70b9\u4e3a\u4f8b\uff0c\u5c06\u5176\u4f5c\u4e3a\u65b0\u7684\u7236\u8282\u70b9\uff0c\u56e0\u4e3a\u5b83\u65e2\u6ee1\u8db3\u6bd4\u5de6\u5b50\u6811\u6240\u6709\u8282\u70b9\u5927\uff08\u53f3\u5b50\u6811\u7684\u8282\u70b9&gt;\u5de6\u5b50\u6811\u7684\u8282\u70b9\uff09\uff0c\u53c8\u6ee1\u8db3\u6bd4\u65b0\u7684\u53f3\u5b50\u6811\u6240\u6709\u8282\u70b9\u5c0f\uff08\u5b83\u539f\u672c\u5c31\u662f\u53f3\u5b50\u6811\u6700\u5c0f\u7684\u8282\u70b9\uff09</p> </li> <li> <p>\u4ece\u5b50\u6811\u4e2d\u5220\u9664\u7528\u6765\u66ff\u6362\u7684\u8282\u70b9</p> <p>\u6ce8\u610f\u7528\u6765\u66ff\u6362\u7684\u8282\u70b9\u7684\u5ea6\u4e0d\u8d85\u8fc71</p> </li> </ul> </li> </ul> \u4ee3\u7801\u5b9e\u73b0 <pre><code>// \u8fd9\u91cc\u5220\u9664\u5ea6\u4e3a 2 \u7684\u8282\u70b9\u65f6\u91c7\u7528\u62ff\u53f3\u5b50\u6811\u6700\u5c0f\u8282\u70b9\u66ff\u6362\u7684\u65b9\u6cd5\nSearchTree Delete(ElementType X, SearchTree T)\n{\n    Position TmpCell;\n    if (T == NULL)\n        Error(\"Element not found\");\n    else\n    {\n        if (X &lt; T-&gt;ELement)  // Go left\n            T-&gt;Left = Delete(X, T-&gt;Left);\n        else if (X &gt; T-&gt;Element)  // Go right\n            T-&gt;Right = Delete(X, T-&gt;Right);\n        else  // Found element to be deleted\n        {\n            if (T-&gt;Left &amp;&amp; T-&gt;Right)  // Two children\n            {  // Replace with smallest in right subtree\n                TmpCell = FindMin(T-&gt;Right);\n                T-&gt;Element = TmpCell-&gt;Element;\n                T-&gt;Right = Delete(T-&gt;Element, T-&gt;Right);\n            }  // End if \n            else  // One or zero child\n            {\n                TmpCell = T;\n                if (T-&gt;Left == NULL)  // Also handles 0 child\n                    T = T-&gt;Right;\n                else if (T-&gt;Right == NULL)\n                    T = T-&gt;Left;\n                free(TmpCell);  // End else 1 or 0 child\n            }\n        }\n    } \n    return T;\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(h)\\)\uff0c\\(h\\) \u662f\u6811\u7684\u9ad8\u5ea6\u3002\u663e\u7136\uff0c\u8fd9\u79cd\u5220\u9664\u7684\u64cd\u4f5c\u6548\u7387\u4e0d\u9ad8</p> <p>\u6539\u8fdb\u65b9\u6cd5\uff1a\u5982\u679c\u5220\u9664\u64cd\u4f5c\u7528\u7684\u4e0d\u591a\uff0c\u53ef\u4ee5\u91c7\u7528 lazy deletion \u7684\u65b9\u6cd5\u2014\u2014\u4e3a\u6bcf\u4e2a\u8282\u70b9\u6dfb\u52a0\u4e00\u4e2a <code>flag</code> \u5b57\u6bb5\uff0c\u6765\u6807\u8bb0\u8282\u70b9\u662f\u5426\u88ab\u5220\u9664\u3002\u56e0\u6b64\u6211\u4eec\u4e0d\u5fc5\u901a\u8fc7\u91ca\u653e\u8282\u70b9\u7684\u7a7a\u95f4\u7684\u65b9\u5f0f\u6765\u5220\u9664\u8282\u70b9\uff1b\u800c\u4e14\u5982\u679c\u6211\u4eec\u91cd\u65b0\u63d2\u5165\u5df2\u7ecf\u5220\u9664\u7684\u8282\u70b9\uff0c\u4e5f\u4e0d\u9700\u8981\u4f7f\u7528 <code>malloc()</code> \u5206\u914d\u5185\u5b58\uff0c\u4ece\u800c\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6548\u7387\u3002</p>"},{"location":"4-x.html#average-case-analysis","title":"Average-Case Analysis","text":"<p>\u901a\u8fc7\u8ba1\u7b97\u53d1\u73b0\uff0c\u6811\u7684\u6240\u6709\u8282\u70b9\u7684\u5e73\u5747\u6df1\u5ea6\u4e3a \\(O(logN)\\)\uff08\u8bc1\u660e\u8fc7\u7a0b\u89c1\u6559\u6750 \\(P_{108}\\)\uff09</p> <p>\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5927\u5c0f\u53d6\u51b3\u4e8e\u63d2\u5165\u7684\u987a\u5e8f\u548c\u5220\u9664\u64cd\u4f5c</p> <ul> <li>\u63d2\u5165\uff1a\u5982\u679c\u987a\u5e8f\u4e0d\u591f\u968f\u673a\uff08\u6700\u574f\u7684\u60c5\u51b5\uff1a\u5347/\u964d\u5e8f\uff09\uff0c\u5219\u6811\u4f1a\u9000\u5316\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u56e0\u6b64\u6700\u574f\u60c5\u51b5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(N)\\)</li> <li>\u5220\u9664\uff1a\u4ee5\u66ff\u6362\u4e3a\u53f3\u5b50\u6811\u6700\u5c0f\u8282\u70b9\u4e3a\u4f8b\uff0c\u8fc7\u591a\u7684\u5220\u9664\u64cd\u4f5c\u4f1a\u5bfc\u81f4\u53f3\u5b50\u6811\u4e0d\u65ad\u7f29\u5c0f\uff0c\u5de6\u5b50\u6811\u7684\u89c4\u6a21\u4f1a\u5927\u4e8e\u53f3\u5b50\u6811\uff0c\u7834\u574f\u4e86\u6811\u7684\u5e73\u8861</li> </ul>"},{"location":"5-x.html","title":"Chap 5 Hashing","text":"<p> \u7ea6 2197 \u4e2a\u5b57  210 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 14 \u5206\u949f</p> \u6838\u5fc3\u77e5\u8bc6 <ul> <li>\u6563\u5217\u51fd\u6570</li> <li>\u5355\u72ec\u94fe\u8868\u6cd5</li> <li>\u5f00\u653e\u5730\u5740<ul> <li>\u7ebf\u6027\u63a2\u6d4b</li> <li>\u4e8c\u6b21\u63a2\u6d4b</li> <li>\u53cc\u91cd\u6563\u5217\u6cd5</li> </ul> </li> <li>\u518d\u6563\u5217</li> </ul> \u5f15\u5165\uff1a\u63d2\u503c\u6392\u5e8f(interpolation sort) <p>\u5728 Chap 7 \u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u4e00\u4e9b\u57fa\u4e8e\u6bd4\u8f83\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u8fd9\u7c7b\u7b97\u6cd5\u7684\u6700\u4f18\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n \\log n)\\)\uff0c\u7136\u800c\u8fd9\u4e0d\u662f\u6392\u5e8f\u7b97\u6cd5\u7684\u6781\u9650\u2014\u2014\u63d2\u503c\u6392\u5e8f\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u65f6\u95f4\u590d\u6742\u5ea6\u4ec5\u4e3a \\(O(1)\\) \u7684\u65b9\u6cd5\uff0c\u5176\u672c\u8d28\u4e3a\u57fa\u4e8e\u516c\u5f0f\u7684\u641c\u7d22(search by formula)\u3002</p> <p>\u9898\u76ee\uff1a\u4ece\u6709\u5e8f\u5217\u8868 f[l].key, f[l+1].key, ..., f[u].key \u4e2d\u627e\u5230\u7279\u5b9a\u7684 key</p> <p> </p>"},{"location":"5-x.html#general-idea","title":"General Idea","text":"<p>\u7b80\u5355\u8868(symbol table) ADT</p> <ul> <li> <p>Objects\uff1a\u4e00\u7ec4\"\u540d\u79f0 + \u5c5e\u6027\"\u5bf9\u7684\u96c6\u5408\uff0c\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u540d\u79f0\u662f\u552f\u4e00\u7684</p> </li> <li> <p>Operations\uff1a</p> <ul> <li><code>SymTab Create(TableSize)</code></li> <li><code>Boolean IsIn(symtab, name)</code></li> <li><code>Attribute Find(symtab, name)</code></li> <li><code>SymTab Insert(symtab, name, attr)</code></li> <li><code>SymTab Delete(symtab, name)</code></li> </ul> </li> </ul> <p>\u6563\u5217\u8868(hash tables)</p> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u6807\u8bc6\u7b26 x\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6563\u5217\u51fd\u6570(hash function) f(x)\uff0c\u7528\u6765\u8868\u793a x \u5728 ht[] \u7684\u4f4d\u7f6e\uff0c\u5373\u4e0b\u56fe\u4e2d\u5305\u542b x \u7684\u7bee\u5b50(bucket)\u7684\u7d22\u5f15</p> <ul> <li>T \u8868\u793a\u6807\u8bc6\u7b26\u7684\u603b\u6570</li> <li>n \u8868\u793a ht[] \u4e2d\uff08\u5373\u5df2\u6392\u597d\u5e8f\u7684\uff09\u6807\u8bc6\u7b26\u7684\u603b\u6570</li> <li>\u6807\u8bc6\u7b26\u5bc6\u5ea6(identifier density) = \\(\\dfrac{n}{T}\\)</li> <li>\u52a0\u8f7d\u5bc6\u5ea6(loading density)\\(\\lambda = \\dfrac{n}{s \\cdot b}\\)</li> </ul> <p>\u6563\u5217\u8868\u7684\u5e38\u89c1\u95ee\u9898</p> <ul> <li>\u51b2\u7a81(collision)\uff1a2 \u4e2a\u4e0d\u540c\u7684\u6807\u8bc6\u7b26\u653e\u5165\u76f8\u540c\u7684\u7bee\u5b50\u5185\uff0c\u5373 \\(f(i_1) = f(i_2)\\) \u4e14 \\(i_1 \\ne i_2\\)</li> <li>\u6ea2\u51fa(overflow)\uff1a\u67d0\u4e2a\uff08\u4e9b\uff09\u7bee\u5b50\u7684\u7a7a\u95f4\u5df2\u6ee1\uff0c\u65e0\u6cd5\u5b89\u7f6e\u65b0\u7684\u6807\u8bc6\u7b26 <p>\u6ce8\uff1a\u5f53\u7bee\u5b50\u5bb9\u91cf s = 1 \u65f6\uff0c\u51b2\u7a81\u548c\u6ea2\u51fa\u540c\u65f6\u53d1\u751f</p> </li> </ul> Example <p> </p> <p>\u82e5\u6ca1\u6709\u6ea2\u51fa\uff0c\u6563\u5217\u8868\u7684\u4e3b\u8981\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a\u5e38\u6570\u7ea7\uff0c\u5373\uff1a</p> \\[ T_{search} = T_{insert} = T_{delete} = O(1) \\]"},{"location":"5-x.html#hash-function","title":"Hash Function","text":"<p>\u6563\u5217\u51fd\u6570f\u7684\u6027\u8d28\uff1a</p> <ul> <li>f(x) \u5fc5\u987b\u5bb9\u6613\u8ba1\u7b97\uff0c\u4e14\u80fd\u6700\u5c0f\u5316\u51b2\u7a81\u7684\u53ef\u80fd</li> <li>f(x) \u4e0d\u80fd\u6709\"\u504f\u89c1\"\uff0c\u80fd\u591f\u5c06\u6240\u6709\u7684\u952e\u5e73\u5747\u5206\u914d\u81f3\u6563\u5217\u8868\u5185\uff0c\u4e5f\u5c31\u662f\u8bf4\uff1a \\(\\forall x,\\ \\forall i\\)\uff0c\\(f(x) = i\\) \u7684\u6982\u7387\u4e3a \\(\\dfrac{1}{b}\\)\u3002\u8fd9\u6837\u7684\u6563\u5217\u51fd\u6570\u88ab\u79f0\u4e3a\u7edf\u4e00\u6563\u5217\u51fd\u6570(uniform hash function)</li> </ul> <p>\u4e00\u4e9b\u6563\u5217\u51fd\u6570</p> \u51fd\u65701\u51fd\u65702\u51fd\u65703\u51fd\u65704 \\[f(x) = x\\ \\%\\ TableSize\\] <p>x \u4e3a\u6574\u6570</p> <p>\u8fd9\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u6563\u5217\u51fd\u6570\uff0c\u56e0\u4e3a\u7528\u8fd9\u79cd\u51fd\u6570\u5f88\u5bb9\u6613\u53d1\u751f\u51b2\u7a81\u3002\u7136\u800c\uff0c\u82e5\u6211\u4eec\u8ba9 \\(TableSize\\) \u4e3a\u4e00\u4e2a\u8d28\u6570\uff0c\u4e14\u4ee4\u6240\u6709\u7684\u952e\u5c3d\u53ef\u80fd\u968f\u673a\uff0c\u51b2\u7a81\u5c31\u4e0d\u90a3\u4e48\u5bb9\u6613\u53d1\u751f\u4e86</p> \\[f(x) = (\\sum x[i])\\ \\%\\ TableSize\\] <p>x \u4e3a\u5b57\u7b26\u4e32</p> <p>\u8fd9\u662f\u524d\u4e00\u79cd\u51fd\u6570\u7684\u53d8\u79cd\uff0c\u7528\u4e8e\u5b57\u7b26\u4e32\u7684\u60c5\u51b5\uff0c\\(\\sum x[i]\\) \u4e3a\u6240\u6709\u5b57\u7b26\u7684 ASCII \u7801\u4e4b\u548c\u3002\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u5f88\u7b80\u5355\uff0c\u4e5f\u5f88\u5bb9\u6613\u4ea7\u751f\u51b2\u7a81</p> \\[f(x) = (x[0] + x[1] * 27 + x[2] * 27^2)\\ \\%\\ TableSize\\] <p>x \u4e3a\u957f\u5ea6\u4e3a 3 \u7684\u82f1\u6587\u5b57\u7b26\u4e32\uff08\u5168\u5927\u5199\u6216\u5168\u5c0f\u5199\uff09\uff0827 = 26 \u4e2a\u5b57\u6bcd + NULL(\u7a7a)\uff09</p> <p>\u8fd9\u662f\u5bf9\u524d\u4e00\u79cd\u51fd\u6570\u7684\u6539\u826f\uff0c\u628a\u6bcf\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u4e3a\u4e00\u4e2a\u552f\u4e00\u768427\u8fdb\u5236\u6570\u3002\u8fd9\u786e\u5b9e\u80fd\u5b8c\u5168\u907f\u5f00\u51b2\u7a81\uff0c\u7136\u800c\u5b9e\u9645\u957f\u5ea6\u4e3a3\u7684\u82f1\u8bed\u5355\u8bcd\u7684\u4e2a\u6570\u8fdc\u5c11\u4e8e\u6563\u5217\u8868\u7684\u7bee\u5b50\u4e2a\u6570\uff0c\u4ece\u800c\u5bfc\u81f4\u7a7a\u95f4\u7684\u5de8\u5927\u6d6a\u8d39</p> \\[f(x) = (\\sum x[N - i - 1] * 32^i)\\ \\%\\ TableSize\\] <p>\u5982\u679c\u6211\u4eec\u5c06 27 \u6539\u6210 32\uff0c\u5219\u7528\u5de6\u79fb 5 \u4f4d\u7684\u8fd0\u7b97\u66ff\u4ee3\u4e58\u4ee5 26 \u7684\u8fd0\u7b97\uff0c\u6548\u7387\u66f4\u9ad8(\u79fb\u4f4d\u7684\u901f\u5ea6\u5927\u4e8e\u4e58\u6cd5)\u3002\u7531\u4e8e\u662f\u5de6\u79fb\u4f4d\uff0c\u6240\u4ee5\u9700\u8981\u7a0d\u5fae\u8c03\u6574\u4e00\u4e0b\u6563\u5217\u503c\u7684\u8868\u793a\uff0c\u5982\u4e0b\u56fe\u6240\u793a</p> <p> </p> <p>\u4ee3\u7801\uff1a <pre><code>Index Hash3(const char *x, int TableSize)\n{\n    unsigned int HashVal = 0;\n    while (*x != '\\0')\n        HashVal = (HashVal &lt;&lt; 5) + *x++;\n    return HashVal % TableSize;\n}\n</code></pre> \u7f3a\u70b9\uff1a\u82e5\u5b57\u7b26\u4e32 x \u592a\u957f\uff0c\u90a3\u4e48\u6700\u5148\u8fdb\u5165\u6563\u5217\u503c\u7684\u5b57\u7b26\u4f1a\u88ab\u5de6\u79fb\u5230\u8fb9\u754c\u5916\u9762\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u8c28\u614e\u6311\u9009 x \u7684\u5b57\u7b26</p>"},{"location":"5-x.html#separate-chaining","title":"Separate Chaining","text":"<p>\u5355\u72ec\u94fe\u8868\u6cd5(separate chaining)\uff1a\u5c06\u6240\u6709\u6563\u5217\u503c\u76f8\u540c\u7684\u952e\u653e\u5165\u540c\u4e00\u5f20\u94fe\u8868\u4e2d</p> <p>\u6ce8\uff1a\u8fd9\u79cd\u65b9\u6cd5\u53c8\u79f0\u4e3a\u5f00\u6563\u5217\u6cd5(open hashing)</p> \u4ee3\u7801\u5b9e\u73b0 <ul> <li>\u521d\u59cb\u5316</li> </ul> <pre><code>struct ListNode;\ntypedef struct ListNode * Position;\nstruct HashTbl;\ntypedef struct HashTbl * HashTable;\n\nstruct ListNode\n{\n    ElementType Element;\n    Position Next;\n};\ntypedef Position List;\n\n/* List *TheList will be an array of lists, allocated later */\n/* The lists use headers (for simplicity), */\n/* though this wastes space */\nstruct HashTbl\n{\n    int TableSize;\n    List * TheLists;\n};\n</code></pre> <ul> <li>\u521b\u5efa\u7a7a\u8868</li> </ul> <pre><code>HashTable InitializeTable(int TableSize)\n{\n    HashTable H;\n    int i;\n    if (TableSize &lt; MinTableSize)\n    {\n        Error(\"Table size too small\");\n        return NULL;\n    }\n    H = (HashTable)malloc(sizeof(struct HashTbl)); // Allocate table\n    if (H == NULL)\n        FatalError(\"Out of Space!!!\");\n    H-&gt;TableSize = NextPrime(TableSize);  // Better be prime\n    H-&gt;TheLists = malloc(sizeof(List) * H-&gt;TableSize);  // Array of lists\n    if (H-&gt;TheLists == NULL)\n        FatalError(\"Out of space!!!\");\n    for(i = 0; i &lt; H-&gt;TableSize; i++)\n    {   // Allocate list headers\n        H-&gt;TheLists[i] = malloc(sizeof(struct ListNode)); // Slow!\n        if ( H-&gt;TheLists[i] == NULL )\n            FatalError(\"Out of space!!!\");\n        else\n            H-&gt;TheLists[i]-&gt;Next = NULL;\n    }\n    return H;\n}\n</code></pre> \u6563\u5217\u8868\u793a\u610f\u56fe <p> </p> <p>\u6ce8\u610f\uff1a\u6563\u5217\u8868\u7684\u5f00\u5934\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u7bee\u5b50\u90fd\u662f\u6709\"\u7a7a\u5934\"\u7684\uff0c\u8fd9\u4e3b\u8981\u662f\u4e3a\u4e86\u5220\u9664\u64cd\u4f5c\u7684\u65b9\u4fbf\u3002\u82e5\u6ca1\u6709\u5220\u9664\u64cd\u4f5c\uff0c\u5219\u6700\u597d\u4e0d\u8981\u7528\u7a7a\u5934\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4</p> <ul> <li>\u4ece\u6563\u5217\u8868\u4e2d\u627e\u952e</li> </ul> <pre><code>Position Find(ElementType Key, HashTable H)\n{\n    Position P;\n    List L;\n\n    L = H-&gt;TheLists[Hash(Key, H-&gt;TableSize)];\n\n    P = L-&gt;Next;\n    // Identical to the code to perform a Find for List ADT\n    while (P != NULL &amp;&amp; P-&gt;Element != Key) // Probably need strcmp\n        P = P-&gt;Next;\n    return P;\n}\n</code></pre> <ul> <li>\u5c06\u952e\u63d2\u5165\u6563\u5217\u8868\u5185\uff08\u653e\u5728\u7bee\u5b50\u7684\u6700\u4e0a\uff08\u524d\uff09\u9762\uff09</li> </ul> <pre><code>void Insert(ElementType Key, HashTable H)\n{\n    Position Pos, NewWell;\n    List L;\n    Pos = Find(Key, H);\n    if (Pos == NULL) // Key is not found, then insert\n    {\n        NewCell = (Position)malloc(sizeof(struct ListNode));\n        if (NewCell == NULL)\n            FatalError(\"Out of space!!!\");\n        else\n        {\n            L = H-&gt;TheLists[Hash(Key, H-&gt;TableSize)];\n            NewCell-&gt;Next = L-&gt;Next;\n            NewCell-&gt;Element = Key; // Probably need strcpy\n            L-&gt;Next = NewCell;\n        }\n    }\n}\n</code></pre> <p>\u6ce8\uff1a</p> <ul> <li>\u4e0d\u597d\u7684\u4e00\u70b9\u662f\u8be5\u51fd\u6570\u7528\u4e86\u4e24\u6b21 <code>Hash()</code> \u51fd\u6570\uff0c\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u6539\u8fdb\u4e00\u4e0b</li> <li>\u6211\u4eec\u8981\u8ba9 <code>TableSize</code> \u5c3d\u53ef\u80fd\u63a5\u8fd1\u952e\u7684\u6570\u91cf\uff0c\u5373\u8ba9\u52a0\u8f7d\u5bc6\u5ea6 \\(\\lambda \\approx 1\\)</li> <li>\u8fd9\u91cc\u4ec5\u8003\u8651\u6240\u6709\u952e\u90fd\u4e0d\u540c\u7684\u60c5\u51b5\uff0c\u82e5\u51fa\u73b0\u76f8\u540c\u7684\u952e\uff0c\u8981\u4e48\u9009\u62e9\u65e0\u89c6\uff0c\u8981\u4e48\u589e\u52a0\u4e00\u4e2a\u989d\u5916\u7684\u5b57\u6bb5\u8bb0\u5f55\u91cd\u590d\u7684\u6b21\u6570</li> </ul>"},{"location":"5-x.html#open-addressing","title":"Open Addressing","text":"<p>\u5f00\u653e\u5730\u5740(open addressing)\uff1a\u901a\u8fc7\u5bfb\u627e\u4e0b\u4e00\u4e2a\u7a7a\u7684\u5355\u5143\u6765\u89e3\u51b3\u51b2\u7a81\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u5fc5\u4f7f\u7528\u6307\u9488\u4e86\u3002</p> <p>\u6ce8\uff1a\u8fd9\u79cd\u65b9\u6cd5\u53c8\u79f0\u4e3a\u95ed\u6563\u5217\u6cd5(close hashing)</p> <p>\u6a21\u7248\uff1a</p> <p><pre><code>Algorithm: insert key into an array of hash table\n{\n    index = hash(key);\n    initialize i = 0  // the counter of probing\n    while (collision at index)\n    {\n        index = (hash(key) + f(i)) % TableSize;\n        if (table is full) break;\n        else i++;\n    }\n    if (table is full)\n        ERROR(\"No space left\");\n    else\n        Insert key at index;\n}\n</code></pre> \u5176\u4e2d\uff0cf(i)\u4e3a\u51b2\u7a81\u89e3\u51b3\u51fd\u6570\uff0c\u521d\u59cb\u72b6\u6001\u4e3af(0) = 0\u3002\u901a\u5e38\u7528\u4e8e\\(\\lambda &lt; 0.5\\)\u7684\u60c5\u51b5\u3002</p> <p>\u6b63\u5982 <code>while</code> \u5faa\u73af\u6240\u793a\uff0c\u82e5\u4f7f\u7528\u4e00\u6b21\u51b2\u7a81\u89e3\u51b3\u51fd\u6570\u540e\uff0c\u51b2\u7a81\u4ecd\u7136\u53d1\u751f\uff0c\u90a3\u5c31\u7ee7\u7eed\u4f7f\u7528\u51b2\u7a81\u89e3\u51b3\u51fd\u6570\uff0c\u76f4\u81f3\u51b2\u7a81\u89e3\u51b3\uff0c\u6216\u53d1\u73b0\u65e0\u6cd5\u89e3\u51b3\u76f4\u63a5\u9000\u51fa\u3002</p>"},{"location":"5-x.html#linear-probing","title":"Linear Probing","text":"<p>\u6700\u7b80\u5355\u7684\u51b2\u7a81\u89e3\u51b3\u51fd\u6570\u4e3a\u7ebf\u6027\u63a2\u6d4b(linear probing)\uff1af(i) = i\uff0c\u5b83\u4ec5\u662f\u4e00\u4e2a\u7ebf\u6027\u51fd\u6570</p> <p>Example</p> <p> </p> <p>\u5bf9\u6bd4\u524d\u9762\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u53d1\u73b0\uff1a\u867d\u7136\u52a0\u8f7d\u5bc6\u5ea6\u5f97\u5230\u4e0d\u5c0f\u7684\u63d0\u5347\uff0c\u4f46\u662f\u5e73\u5747\u641c\u7d22\u65f6\u95f4\u6bd4\u8f83\u957f\u3002</p> <p>\u7ebf\u6027\u63a2\u6d4b\u4e2d\u9884\u671f\u63a2\u6d4b\u6b21\u6570\u5173\u4e8e\u52a0\u8f7d\u5bc6\u5ea6\u7684\u8868\u8fbe\u5f0f\uff1a</p> \\[ p = \\begin{cases}\\dfrac{1}{2}(1 + \\dfrac{1}{(1 - \\lambda)^2}) &amp; \\text{for insertion and unsuccessful searches}\\\\ \\dfrac{1}{2}(1 + \\dfrac{1}{1 - \\lambda}) &amp; \\text{for successful searches}\\end{cases} \\] <p>\u5bf9\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\uff0cp = 1.36\u3002\u867d\u7136\u5f88\u5c0f\uff0c\u4f46\u662f\u5728\u6700\u574f\u60c5\u51b5\u4e0bp\u4f1a\u5f88\u5927\u3002</p> <p>\u7ebf\u6027\u63a2\u6d4b\u7684\u95ee\u9898\uff1a\u57fa\u672c\u805a\u96c6(primary cluster)</p> <p>\u7ebf\u6027\u63a2\u6d4b\u5c06\u4f4d\u7f6e\u4e0d\u5339\u914d\u7684\u952e\u5b89\u653e\u81f3\u540e\u9762\u6700\u8fd1\u7684\u7a7a\u5185\uff0c\u8fd9\u6837\u505a\u4f1a\u5f62\u6210\u533a\u5757(cluster)\uff0c\u4f7f\u5f97\u6563\u5217\u8868\u5206\u5e03\u4e0d\u5747\u5300\uff0c\u5bfc\u81f4\u5373\u4f7f\u8868\u7684\u7a7a\u95f4\u770b\u8d77\u6765\u633a\u7a7a\u7684\uff0c\u4f46\u662f\u67d0\u4e9b\u5730\u65b9\u805a\u96c6\u4e86\u4e00\u5806\u5143\u7d20\u3002</p> \u968f\u673a\u51b2\u7a81\u89e3\u51b3\u7b56\u7565(random collision resolution strategy) <ul> <li>\u4e0d\u6210\u529f\u7684\u63a2\u6d4b\u6b21\u6570\uff1a\\(\\dfrac{1}{1 - \\lambda}\\)</li> <li>\u6210\u529f\u63a2\u6d4b\u7684\u5e73\u5747\u6b21\u6570 = \u4e0d\u6210\u529f\u7684\u63a2\u6d4b\u6b21\u6570</li> </ul> <p>\u7ebf\u6027\u63a2\u6d4b\u4e0e\u968f\u673a\u7b56\u7565\u7684\u6548\u7387\u6bd4\u8f83\uff08\u5176\u4e2d S \u8868\u793a\u6210\u529f\u7684\u641c\u7d22\uff0cU \u8868\u793a\u4e0d\u6210\u529f\u7684\u641c\u7d22\uff0cI \u8868\u793a\u63d2\u5165\uff09</p> <p> </p>"},{"location":"5-x.html#quadratic-probing","title":"Quadratic Probing","text":"<p>\u4e8c\u6b21\u63a2\u6d4b(quadratic probing) \u7684\u51fd\u6570\u4e3a\uff1a\\(f(i) = i^2\\)</p> <p>\u5b9a\u7406\uff1a\u82e5\u4f7f\u7528\u4e8c\u6b21\u63a2\u6d4b\uff0c\u4e14\u8868\u7684\u5927\u5c0f\u662f\u4e00\u4e2a\u8d28\u6570\uff0c\u5219\u5f53\u8868\u81f3\u5c11\u6709\u4e00\u534a\u7684\u7a7a\u4f59\u7a7a\u95f4\u65f6\uff0c\u65b0\u7684\u5143\u7d20\u603b\u662f\u80fd\u591f\u88ab\u6210\u529f\u63d2\u5165\u3002</p> \u8bc1\u660e <p>\u53ea\u8981\u8bc1\u660e\u524d \\(\\lfloor \\dfrac{TableSize}{2} \\rfloor\\) \u4e2a\u53ef\u66ff\u4ee3\u7684\u4f4d\u7f6e\u662f\u4e0d\u540c\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\\(\\forall\\ 0 &lt; i \\ne j \\le \\lfloor \\dfrac{TableSize}{2} \\rfloor\\)\uff0c\u6211\u4eec\u6709\uff1a</p> \\[ (h(x) + i^2)\\ \\%\\ TableSize \\ne (h(x) + j^2)\\ \\%\\ TableSize \\] <p>\u53cd\u8bc1\u6cd5\uff1a\u5047\u8bbe \\(h(x) + i^2 \\equiv h(x) + j^2 (\\text{mod }\\  TableSize)\\)\uff0c\u90a3\u4e48\u53ef\u4ee5\u5f97\u5230 \\((i + j)(i - j) \\equiv 0(\\text{mod } TableSize)\\)\uff0c\u5373 (i + j) \u6216 (i - j) \u80fd\u591f\u88ab\u8d28\u6570 TableSize \u6574\u9664\uff0c\u4f46\u8fd9\u663e\u7136\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u63a8\u51fa\u77db\u76fe\uff0c\u56e0\u6b64\u5b9a\u7406\u6210\u7acb\u3002</p> <p>\u6ce8</p> <p>\u82e5\u8868\u7684\u5927\u5c0f\u662f\u4e00\u4e2a\u5f62\u5982 4k + 3 \u7684\u8d28\u6570\uff0c\u5219\u4f7f\u7528\u4e8c\u6b21\u63a2\u6d4b \\(f(i) = \\pm i^2\\) \u6765\u63a2\u6d4b\u6574\u5f20\u8868</p> \u4ee3\u7801\u5b9e\u73b0 <ul> <li>\u58f0\u660e</li> </ul> <pre><code>#ifndef _HashQuad_H\n\ntypedef unsigned int Index;\ntypedef Index Position;\n\nstruct HashTbl;\ntypedef struct HashTbl *HashTable;\n\nHashTable InitializeTable(int TableSize);\nvoid DestroyTable(HashTable H);\nPosition Find(ElementType Key, HashTable H);\nvoid Insert(ElementType Key, HashTable H);\nElementType Retrieve(Position P, HashTable H);\nHashTable Rehash(HashTable H);\n// Routine such as Delete and MakeEmpty are omitted\n\n#endif // _HashQuad_H\n\n// Place in the implementation file\n\nenum KindOfEntry {Legitimate, Empty, Deleted};\n\nstruct HashEntry\n{\n    ElementType Element;\n    enum KindOfEntry Info;\n};\n\ntypedef struct HashEntry Cell;\n\n// Cell * TheCells will be an array of HashEntry cells, allocated later\nstruct HashTbl\n{\n    int TableSize;\n    Cell * TheCells;\n};\n</code></pre> <ul> <li>\u521d\u59cb\u5316</li> </ul> <pre><code>HashTable InitializeTable(int TableSize)\n{\n    HashTable H;\n    int i;\n\n    if (TableSize &lt; MinTableSize)\n    {\n        Error(\"Table size too small\");\n        return NULL;\n    }\n\n    // Allocate table\n    H = (HashTable)malloc(sizeof(struct HashTbl));\n    if (H == NULL)\n        FatalError(\"Out of Space!!!\");\n\n    H-&gt;TableSize = NextPrime(TableSize);\n\n    // Allocate array of Cells\n    H-&gt;TheCells = (Cell *)malloc(sizeof(Cell) * H-&gt;TableSize);\n    if (H-&gt;TheCells == NULL)\n        FatalError(\"Out of Space!!!\");\n\n    for (i = 0; i &lt; H-&gt;TableSize; i++)\n        H-&gt;TheCells[i].Info = Empty;\n\n    return H;\n}\n</code></pre> <ul> <li>\u5bfb\u627e\u4f4d\u7f6e</li> </ul> <pre><code>Position Find(ElementType Key, HashTable H)\n{\n    Position CurrentPos;\n    int CollisionNum = 0;\n    CurrentPos = Hash(Key, H-&gt;TableSize);\n    while (H-&gt;TheCells[CurrentPos].Info != Empty &amp;&amp;\n            H-&gt;TheCells[CurrentPos].Element != Key)\n    {\n        CurrentPos += 2 * ++CollisionNum - 1;  // 1\n        if (CurrentPos &gt;= H-&gt;TableSize)        // 2\n            CurrentPos -= H-&gt;TableSize;\n    }\n    return CurrentPos;  // 3\n}\n</code></pre> <p>\u6ce8</p> <p>\u82e5\u4ea4\u6362 <code>while</code> \u5faa\u73af\u5185\u7684\u4e24\u4e2a\u5224\u65ad\u6761\u4ef6\uff0c\u7a0b\u5e8f\u5f88\u6709\u53ef\u80fd\u51fa\u73b0\u6bb5\u9519\u8bef\uff0c\u56e0\u4e3a\u6ca1\u6709\u5148\u5224\u65ad\u662f\u5426\u6709\u5143\u7d20</p> <ol> <li>\u8fd9\u91cc\u7528\u5230\u4e8c\u6b21\u63a2\u6d4b\u51fd\u6570\u7684\u9012\u63a8\u5173\u7cfb\uff1a\\(F(i) = F(i - 1) + 2i - 1\\)\uff0c\u907f\u514d\u4f7f\u7528\u4e58\u6cd5\uff0c\u4ece\u800c\u63d0\u9ad8\u6548\u7387</li> <li>\u8fd9\u5757\u8bed\u53e5\u66ff\u6362\u4e86\u539f\u6765\u7684\u6a21\u9664\u8fd0\u7b97\uff0c\u63d0\u9ad8\u4e86\u6548\u7387\uff1b\u4f46\u662f\u82e5 <code>CurrentPos</code> \u5927\u4e8e2\u500d\u7684 <code>TableSize</code>\uff0c\u5c31\u65e0\u6cd5\u5b9e\u73b0\u6a21\u9664\u7684\u529f\u80fd\u4e86\uff08\u56e0\u6b64\u4f7f\u7528\u524d\u786e\u4fdd <code>CurrentPos</code> \u4e0d\u8d85\u8fc72\u500d\u7684 <code>TableSize</code>\uff09</li> <li>\u8fd4\u56de\u53ef\u63d2\u5165\u7684\u4f4d\u7f6e</li> </ol> <ul> <li>\u63d2\u5165\u5143\u7d20</li> </ul> <pre><code>void Insert (ElementType Key, HashTable H)\n{\n    Position Pos;\n    Pos = Find(Key, H);\n    if (H-&gt;TheCells[Pos].Info != Legitimate)  // Ok to insert here\n    {\n        H-&gt;TheCells[Pos].Info = Legitimate;\n        H-&gt;TheCells[Pos].Element = Key; // Probably need strcpy\n    }\n}\n</code></pre> <p>\u6ce8</p> <ul> <li>\u5982\u679c\u6709\u8fc7\u591a\u7684\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\uff0c\u63d2\u5165\u7684\u6548\u7387\u4f1a\u663e\u8457\u964d\u4f4e</li> <li>\u5c3d\u7ba1\u4e8c\u6b21\u63a2\u6d4b\u89e3\u51b3\u4e86\u57fa\u672c\u805a\u96c6\u7684\u95ee\u9898\uff0c\u4f46\u5b83\u4f1a\u5bfc\u81f4\u4e8c\u6b21\u805a\u96c6\uff1a\u901a\u8fc7\u6563\u5217\u51fd\u6570\u88ab\u5206\u914d\u5230\u76f8\u540c\u4f4d\u7f6e\u7684\u952e\uff0c\u63a2\u6d4b\u5230\u76f8\u540c\u7684\u53ef\u66ff\u4ee3\u7684\u4f4d\u7f6e\u3002</li> </ul>"},{"location":"5-x.html#double-hashing","title":"Double Hashing","text":"<p>\u53cc\u6563\u5217(double hashing)\u7684\u51fd\u6570\uff1a\\(f(i) = i * \\mathrm{hash}_2(x)\\)\uff0c\u5176\u4e2d\\(\\mathrm{hash}_2(x)\\)\u4e3a\u7b2c 2 \u4e2a\u6563\u5217\u51fd\u6570</p> <ul> <li>\\(\\mathrm{hash}_2(x) \\ne 0\\)</li> <li>\u786e\u4fdd\u6240\u6709\u4f4d\u7f6e\u90fd\u80fd\u88ab\u63a2\u6d4b\u5230</li> </ul> <p>\u8f83\u597d\u7684\u6563\u5217\u51fd\u6570\uff1a\\(\\mathrm{hash}_2(x) = R - (x \\% R)\\)\uff0c\u5176\u4e2d R \u4e3a\u5c0f\u4e8e <code>TableSize</code> \u7684\u8d28\u6570</p> <p>\u6ce8</p> <ul> <li>\u82e5\u53cc\u6563\u5217\u51fd\u6570\u80fd\u6b63\u786e\u6267\u884c\uff0c\u90a3\u4e48\u7531\u6a21\u62df\u7ed3\u679c\u77e5\uff0c\u9884\u671f\u7684\u63a2\u6d4b\u6b21\u6570\u548c\u968f\u673a\u51b2\u7a81\u89e3\u51b3\u7b56\u7565\u7684\u5927\u81f4\u76f8\u540c</li> <li>\u4e8c\u6b21\u63a2\u6d4b\u4e0d\u9700\u8981\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u6563\u5217\u51fd\u6570\uff0c\u56e0\u6b64\u5728\u5b9e\u8df5\u4e2d\u66f4\u7b80\u5355\u3001\u66f4\u5feb</li> </ul>"},{"location":"5-x.html#rehashing","title":"Rehashing","text":"<p>\u5728\u4e8c\u6b21\u63a2\u6d4b\u4e2d\uff0c\u6211\u4eec\u6709\u65f6\u4f1a\u7528\u5230\u201c\u518d\u6563\u5217(rehashing)\u201d\u7684\u6280\u5de7</p> <p>\u4f55\u65f6\u4f7f\u7528\u518d\u6563\u5217</p> <ul> <li>\u88ab\u5360\u7528\u7684\u8868\u7a7a\u95f4\u8fbe\u5230\u4e00\u534a\u65f6</li> <li>\u63d2\u5165\u5931\u8d25\u65f6</li> <li>\u6563\u5217\u8868\u7684\u52a0\u8f7d\u56e0\u6570\u8fbe\u5230\u7279\u5b9a\u503c\u65f6</li> </ul> <p>\u5177\u4f53\u505a\u6cd5\uff1a</p> <ul> <li>\u5efa\u7acb\u4e00\u5f20\u989d\u5916\u7684\u8868\uff0c\u5927\u5c0f\u662f\u539f\u6765\u7684\u4e24\u500d</li> <li>\u904d\u5386\u539f\u6765\u7684\u6574\u5f20\u6563\u5217\u8868\u4e2d\u672a\u5220\u9664\u7684\u5143\u7d20</li> <li>\u4f7f\u7528\u65b0\u7684\u6563\u5217\u51fd\u6570\uff0c\u5c06\u904d\u5386\u5230\u7684\u5143\u7d20\u63d2\u5165\u65b0\u7684\u8868\u4e2d</li> </ul> <p>\u5982\u679c\u8868\u5185\u6709N\u4e2a\u952e\uff0c\u5219\u65f6\u95f4\u590d\u6742\u5ea6\\(T(N) = O(N)\\)</p> \u4ee3\u7801\u5b9e\u73b0 <pre><code>HashTable ReHash(HashTable H)\n{\n    int i, OldSize;\n    Cell * OldCells;\n\n    OldCells = H-&gt;TheCells;\n    OldSize = H-&gt;TableSize;\n\n    // Get a new, empty table\n    H = InitializeTable(2 * OldSize);\n\n    // Scan through old table, reinserting into new\n    for (i = 0; i &lt; OldSize; i++)\n        if (OldCells[i].Info == Legitimate)\n            Insert(OldCells[i].Element, H);\n\n    free(OldCells);\n\n    return H;\n}\n</code></pre>"},{"location":"6-x.html","title":"Chap 6 Priority Queues(Heaps)","text":"<p> \u7ea6 3322 \u4e2a\u5b57  73 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 18 \u5206\u949f</p> \u6838\u5fc3\u77e5\u8bc6 <ul> <li>\u4e8c\u53c9\u5806\u7684\u8868\u793a\uff1a\u6570\u7ec4</li> <li>\u5e38\u7528\u64cd\u4f5c\uff1a<code>Insert</code>\u3001<code>DeleteMin</code>\uff0c\u5206\u522b\u6d89\u53ca\u201c\u4e0a\u6ee4\u201d\u548c\u201c\u4e0b\u6ee4\u201c\u7684\u601d\u60f3</li> <li>\u5176\u4ed6\u64cd\u4f5c\uff1a<code>BuildHeap</code></li> </ul> \u4f55\u65f6\u7528\u5806\uff1f <p>\u5f53\u6211\u4eec\u53ea\u5173\u5fc3\u4e00\u4e2a\u5217\u8868\u4e2d\u6700\u5c0f\uff08\u5927\uff09\u7684\u5143\u7d20\u65f6\uff08\u9891\u7e41\u67e5\u627e\u6216\u4f7f\u7528\uff09\uff0c\u6211\u4eec\u5e94\u4f18\u5148\u4f7f\u7528\u5806</p>"},{"location":"6-x.html#simple-implementation","title":"Simple Implementation","text":"<p>\u6bd4\u8f83\u4e0b\u5217\u51e0\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff1a</p> <ul> <li>\u6570\u7ec4<ul> <li>\u63d2\u5165\uff1a\u5728\u5c3e\u90e8\u6dfb\u52a0\u9879 ~ \\(\\Theta(1)\\)</li> <li>\u5220\u9664\uff1a\u627e\u6700\u5927/\u6700\u5c0f\u7684\u952e ~ \\(\\Theta(n)\\)\uff1b\u5220\u9664\u9879\u540e\u79fb\u52a8\u5269\u4f59\u9879 ~ \\(O(n)\\)</li> </ul> </li> <li>\u94fe\u8868<ul> <li>\u63d2\u5165\uff1a\u5728\u5934\u90e8\u6dfb\u52a0\u9879 ~ \\(\\Theta(1)\\)</li> <li>\u5220\u9664\uff1a\u627e\u6700\u5927/\u6700\u5c0f\u7684\u952e ~ \\(\\Theta(n)\\)\uff1b\u5220\u9664\u9879 ~ \\(\\Theta(1)\\)</li> </ul> </li> <li>\u6709\u5e8f\u6570\u7ec4<ul> <li>\u63d2\u5165\uff1a\u627e\u5230\u6b63\u786e\u7684\u4f4d\u7f6e ~ \\(O(n)\\)\uff1b\u79fb\u52a8\u6570\u7ec4\u5e76\u52a0\u5165\u8be5\u9879 ~ \\(O(n)\\)</li> <li>\u5220\u9664\uff1a\u79fb\u9664\u9996\u9879/\u672b\u9879 ~ \\(\\Theta(1)\\)</li> </ul> </li> <li>\u6709\u5e8f\u94fe\u8868<ul> <li>\u63d2\u5165\uff1a\u627e\u5230\u6b63\u786e\u7684\u4f4d\u7f6e ~ \\(O(n)\\)\uff1b\u52a0\u5165\u9879 ~ \\(\\Theta(1)\\)</li> <li>\u5220\u9664\uff1a\u79fb\u9664\u9996\u9879/\u672b\u9879 ~ \\(\\Theta(1)\\)</li> </ul> </li> </ul> <p>\u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u4e9b\u7ed3\u6784\u5b9e\u73b0\u8d77\u6765\u76f8\u5bf9\u6bd4\u8f83\u5bb9\u6613\uff0c\u4e14\u5404\u6709\u4f18\u52a3\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u63d2\u5165\u7684\u64cd\u4f5c &gt; \u5220\u9664\u7684\u64cd\u4f5c\uff0c\u56e0\u6b64\u6559\u6750\u4f5c\u8005\u66f4\u63a8\u8350\u94fe\u8868\u3002</p> What about BST(\u4e8c\u5206\u641c\u7d22\u6811)\uff1f <p>\u4e8c\u5206\u641c\u7d22\u6811\u6709\u4ee5\u4e0b\u95ee\u9898\uff1a</p> <ul> <li>\u867d\u7136\u7406\u8bba\u4e0a\u5b83\u7684\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(\\log n)\\)\uff0c\u7136\u800c\u5b9e\u9645\u5e94\u7528\u4e2d\u63d2\u5165\u64cd\u4f5c\u662f\u968f\u673a\u7684\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u6811\u7684\u4e0d\u5e73\u8861\uff0c\u4ece\u800c\u5f71\u54cd\u65f6\u95f4\u590d\u6742\u5ea6</li> <li>\u867d\u7136\u5220\u9664\u64cd\u4f5c\u5e76\u4e0d\u662f\u968f\u673a\u7684\uff0c\u4f46\u6211\u4eec\u53ea\u8981\u627e\u6700\u5c0f\u8282\u70b9\u5e76\u4e14\u5220\u9664\u5b83\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u5de6\u5b50\u6811\u8d8a\u6765\u8d8a\u5c0f\uff0c\u7834\u574f\u4e86\u6811\u7684\u5e73\u8861\uff0c\u4ece\u800c\u5f71\u54cd\u590d\u6742\u5ea6</li> <li>\u6211\u4eec\u53ef\u80fd\u60f3\u5230\u6784\u5efa\u4e00\u68f5\u5e73\u8861\u7684\u6811\uff0c\u6bd4\u5982 AVL \u6811\u3002\u4f46\u662f AVL \u6811\u4e2d\u7684\u5f88\u591a\u64cd\u4f5c\u5728\u4f18\u5148\u961f\u5217\u4e2d\u7528\u4e0d\u5230\uff0c\u4e14\u5b83\u7684\u6307\u9488\u4f7f\u7528\u5f88\u5371\u9669\u3002</li> </ul>"},{"location":"6-x.html#adt-model","title":"ADT Model","text":"<p>\u4f18\u5148\u961f\u5217/\u5806(priority queue/heap)\uff1a</p> <ul> <li>Objects\uff1a\u542b\u6709 0 \u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u7684\u6709\u9650\u6709\u5e8f\u8868</li> <li>Operations\uff1a<ul> <li><code>PriorityQueue Initialize(int MaxElements);</code></li> <li><code>void Insert(ElementType X, PriorityQueue H);</code> </li> <li><code>ElmentType DeleteMin(PriorityQueue H);</code> </li> <li><code>ElementType FindMin(PriorityQueue H);</code></li> </ul> </li> </ul> <p>\u73b0\u5728\uff0c\u6211\u4eec\u6b63\u5f0f\u4ecb\u7ecd\u65b0\u7684\u6570\u636e\u7ed3\u6784\u2014\u2014\u4e8c\u53c9\u5806(binary heap, \u7b80\u79f0\u5806(heap))</p>"},{"location":"6-x.html#binary-heap","title":"Binary Heap","text":""},{"location":"6-x.html#structure-property","title":"Structure Property","text":"<p>\u5b8c\u5168(complete)\u4e8c\u53c9\u6811\uff1a\u4e00\u68f5\u6709 \\(n\\) \u4e2a\u8282\u70b9\u4e14\u9ad8\u4e3a \\(h\\) \u7684\u6811\uff0c\u5b83\u7684\u8282\u70b9\u4e0e\u4e00\u68f5\u9ad8\u4e3a \\(h\\) \u7684\u5b8c\u7f8e\u4e8c\u53c9\u6811(perfect binary tree)\u7684\u8282\u70b9\uff08\u4ece 1\u5230 \\(n\\) \u6807\u53f7\uff09\u4e00\u4e00\u5bf9\u5e94</p> <p>\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff1a\u9664\u4e86\u6700\u540e\u4e00\u5c42\u5916\u7684\u6240\u6709\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5b69\u5b50\uff0c\u6700\u540e\u4e00\u5c42\u7684\u8282\u70b9\u4e3a\u53f6\u5b50\u8282\u70b9</p> <p>\u53e6\u4e00\u79cd\u5b9a\u4e49\uff1a\u9664\u4e86\u6700\u540e\u4e00\u5c42\u5916\uff0c\u6bcf\u5c42\u7684\u8282\u70b9\u90fd\u586b\u6ee1\uff0c\u6700\u540e\u4e00\u5c42\u7684\u8282\u70b9\u4ece\u5de6\u5f80\u53f3\u586b\u8865\u7684\u6811</p> <p>\u4e00\u68f5\u9ad8\u4e3a \\(h\\) \u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u6709 \\(2^h\\)~\\(2^{h + 1} - 1\\) \u4e2a\u8282\u70b9 \\(\\Leftrightarrow h = \\lfloor \\log N \\rfloor\\)</p> <p>\u56e0\u4e3a\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u89c4\u5f8b\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u5b58\u50a8\u4e8c\u53c9\u5806\uff0c\u7528\u7d22\u5f15\u627e\u5230\u76f8\u5e94\u8282\u70b9\uff08\u89c1\u4e0b\u9762\u5f15\u7406\uff09\uff0c\u5341\u5206\u7b80\u5355\uff0c\u4f46\u521b\u5efa\u5806\u7684\u65f6\u5019\u8981\u8003\u8651\u6700\u5927\u5bb9\u91cf</p> <p>\ud83c\udf1f\u5f15\u7406\uff1a\u5982\u679c\u4e00\u68f5\u6709\\(n\\)\u4e2a\u8282\u70b9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u6309\u5c42\u5e8f\u8868\u793a\uff0c\u5219\u5bf9\u4e8e\u7d22\u5f15\u4e3a \\(i(1 \\le i \\le n)\\) \u7684\u8282\u70b9\uff0c\u6211\u4eec\u6709\uff1a</p> <ul> <li> <p>\u7236\u8282\u70b9\u7684\u7d22\u5f15 \\(= \\begin{cases} \\lfloor \\dfrac{i}{2} \\rfloor &amp; \\text{if } i \\ne 1 \\\\ \\text{None} &amp; \\text{if } i = 1\\end{cases}\\)</p> <p>C\u8bed\u8a00\u7684\u6574\u6570\u9664\u6cd5\u81ea\u52a8\u5e2e\u6211\u4eec\u5411\u4e0b\u53d6\u6574\uff0c\u56e0\u6b64\u76f4\u63a5\u9664\u5c31\u884c\u4e86</p> </li> <li> <p>\u5de6\u5b69\u5b50\u7684\u7d22\u5f15 \\(= \\begin{cases} 2i &amp; \\text{if } 2i \\le n \\\\ \\text{None} &amp; \\text{if } 2i &gt; n\\end{cases}\\)</p> </li> <li> <p>\u53f3\u5b69\u5b50\u7684\u7d22\u5f15 \\(= \\begin{cases} 2i + 1 &amp; \\text{if } 2i + 1 \\le n \\\\ \\text{None} &amp; \\text{if } 2i + 1 &gt; n\\end{cases}\\)</p> </li> </ul> <p>\u6ce8</p> <p>\u7d22\u5f15\u4ece 1 \u5f00\u59cb\uff0c\u770b\u4f3c\u53ea\u662f\u4e3a\u4e86\u5f97\u5230\u6bd4\u8f83\u8212\u670d\u7684\u8868\u793a\u6cd5\u3002\u4f46\u8fd9\u6837\u505a\u540e\uff0c\u7d22\u5f15\u4e3a 0 \u7684\u4f4d\u7f6e\u5c31\u7a7a\u51fa\u6765\u4e86\uff0c\u6211\u4eec\u4e4b\u540e\u4f1a\u5229\u7528\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u4f5c\u4e3a\u54e8\u5175(sentinel)\uff08\u5c06\u5176\u8bbe\u4e3a\u6574\u4e2a\u5806\u7684\u6700\u5c0f\u503c\uff09\uff0c\u65b9\u4fbf\u540e\u9762\u7684\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c</p> <p>\u58f0\u660e\u90e8\u5206\uff1a</p> <pre><code>struct HeapStruct\n{\n    /* Maximum size that can fit in the heap */\n    unsigned int max_heap_size;\n    /* Current size of elements in the heap */\n    unsigned int size;\n    element_type *elements;\n};\ntypedef struct HeapStruct *PriorityQueue;\n</code></pre>"},{"location":"6-x.html#initialize","title":"Initialize","text":"<pre><code>PriorityQueue Initiailize(int MaxElments)\n{\n    PriorityQueue H;\n    if (MaxElements &lt; MinPQSize)\n        return Error(\"Priority queue size is too small\");\n    H = (PriorityQueue)malloc(sizeof(struct HeapStruct));\n    if (H == NULL)\n        return FatalError(\"Out of Space!!!\");\n    // Allocate the array plus one extra for sentinel\n    H-&gt;Elements = (ElementType * )malloc((MaxElements + 1) * sizeof(ElementType));\n    if (H-&gt;Elements == NULL)\n        return FatalError(\"Out of Space!!!\");\n    H-&gt;Capacity = MaxElements;\n    H-&gt;Size = 0;\n    H-&gt;Elements[0] = MinData;  // set the sentinel\n    return H;\n}\n</code></pre>"},{"location":"6-x.html#heap-order-property","title":"Heap Order Property","text":"<ul> <li>\u6700\u5c0f\u6811(min tree)\uff1a\u4e00\u68f5\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u952e\u503c\u4e0d\u5927\u4e8e\u5b83\u7684\u5b69\u5b50</li> <li>\u6700\u5c0f\u5806(min heap)\uff1a\u5b8c\u5168\u4e8c\u53c9\u6811 + \u6700\u5c0f\u6811</li> </ul> <p>\u6211\u4eec\u4e5f\u80fd\u4ee5\u7c7b\u4f3c\u7684\u65b9\u6cd5\u5b9a\u4e49\u6700\u5927\u5806\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5199\u51fa\u6765\u4e86</p> <ul> <li>\u663e\u800c\u6613\u89c1\uff0c\u6839\u8282\u70b9\u662f\u5806\u4e2d\u6700\u5c0f(\u5927)\u7684\u8282\u70b9</li> <li>\u4ece\u5806\u7684\u6839\u8282\u70b9\u51fa\u53d1\uff0c\u5230\u4efb\u610f\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u662f\u6709\u5e8f\u7684\uff08\u6bd4\u5982\u6700\u5c0f\u5806\u4e2d\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u662f\u6309\u5347\u5e8f\u6392\u5217\u7684\uff09</li> <li>\u4f46\u662f\u5bf9\u6574\u4e2a\u5806\u7684\u904d\u5386\u65e0\u6cd5\u8868\u793a\u6240\u6709\u8282\u70b9\u7684\u987a\u5e8f</li> </ul>"},{"location":"6-x.html#basic-heap-operations","title":"Basic Heap Operations","text":""},{"location":"6-x.html#insertion","title":"Insertion","text":"<p>\u601d\u8def</p> <ul> <li>\u56e0\u4e3a\u8981\u4fdd\u6301\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u72b6\u6001\uff0c\u56e0\u6b64\u552f\u4e00\u53ef\u63d2\u5165\u8282\u70b9\u7684\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e</li> <li>\u63d2\u5165\u4ee5\u540e\u8981\u8c03\u6574\u8282\u70b9\u7684\u4f4d\u7f6e\uff1a<ul> <li>\u5c06\u8be5\u8282\u70b9\u4e0e\u5176\u7236\u8282\u70b9\u6bd4\u8f83\uff0c\u5982\u679c\u6bd4\u7236\u8282\u70b9\u5c0f\uff0c\u5219\u5c06\u7236\u8282\u70b9\u5f80\u4e0b\u79fb</li> <li>\u91cd\u590d\u8be5\u6b65\u9aa4\uff0c\u76f4\u81f3\u6bd4\u5f53\u524d\u6bd4\u8f83\u7684\u8282\u70b9\u66f4\u5927\u5219\u505c\u6b62\uff0c\u6b64\u65f6\u7684\u4f4d\u7f6e\u5373\u4e3a\u65b0\u8282\u70b9\u7684\u4f4d\u7f6e</li> </ul> </li> </ul> <p>\u8fd9\u79cd\u6280\u5de7\u88ab\u79f0\u4e3a\u201c\u4e0a\u6ee4(percolate up)\u201d\u3002</p> \u52a8\u753b\u6f14\u793a <p> </p> <p>\u8fd9\u91cc\u7684\u52a8\u753b\u6f14\u793a\u7a0d\u5fae\u6709\u70b9\u5c0f\u95ee\u9898\uff1a\u5b9e\u9645\u8fc7\u7a0b\u4e2d\uff0c\u65b0\u52a0\u5165\u7684\u503c\u8981\u7b49\u5230\u4f4d\u7f6e\u786e\u5b9a\u540e\u518d\u653e\u5165\u6570\u7ec4\u4e2d\uff0c\u800c\u4e0d\u662f\u9a6c\u4e0a\u5c31\u653e\u5165\uff08\u8fd9\u6837\u770b\u8d77\u6765\u5c31\u50cf\u662f\u5728\u201c\u4ea4\u6362\u201d\u4e24\u4e2a\u6570\uff0c\u5b9e\u9645\u4e0a\u6ca1\u6709\u51fa\u73b0\u8fc7\u4ea4\u6362\u7684\u64cd\u4f5c\uff09</p> \u4ee3\u7801\u5b9e\u73b0 <pre><code>// H-&gt;Elements[0] is a sentinel\nvoid Insert(ElementType X, PriorityQueue H)\n{\n    int p = ++H-&gt;Size;\n    H-&gt;Element[p] = X;\n    PercolateUp(p, H);\n}\n\nvoid PercolateUp(int p, PriorityHeap H)\n{\n    int i;\n    ElementType x = H-&gt;Elements[p];\n\n    for (i = p; H-&gt;Elements[i / 2] &gt; x; i /= 2)\n        H-&gt;Elements[i] = H-&gt;Elements[i / 2];\n\n    H-&gt;Elements[i] = x;\n}\n</code></pre> <ul> <li>\u5728\u6bd4\u8f83\u8fc7\u7a0b\u4e2d\uff0c\u5e76\u6ca1\u6709\u76f4\u63a5\u4ea4\u6362\u4e24\u4e2a\u6570\uff0c\u56e0\u4e3a\u5b9e\u73b0\u4e00\u6b21\u4ea4\u6362\u5c31\u9700\u8981\u4e09\u6761\u8d4b\u503c\u8bed\u53e5\u3002\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u5411\u4e0a\u79fb\u52a8 \\(d\\) \u5c42\uff0c\u5219\u9700\u8981\u6267\u884c \\(3d\\) \u6b21\u8fd0\u7b97\uff1b\u800c\u4e0a\u9762\u7684\u65b9\u6cd5\u53ea\u9700 \\(d + 1\\) \u6b21\u8fd0\u7b97\uff0c\u663e\u7136\u66f4\u5feb</li> <li>\u6b63\u5982\u4e0a\u9762\u6240\u8bf4\uff0c0 \u4f4d\u7f6e\u7684\u8282\u70b9\u88ab\u79f0\u4e3a\u54e8\u5175\uff0c\u5c06\u5b83\u7684\u503c\u8bbe\u4e3a\u6574\u4e2a\u5806\u7684\u6700\u5c0f\u503c\u3002\u6709\u4e86\u5b83\uff0c\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u7528\u201c<code>while</code>\u5faa\u73af + \u6839\u8282\u70b9\u4f4d\u7f6e\u7279\u5224\u201c\u8fd9\u4e48\u9ebb\u70e6\uff0c\u5bf9\u5f85\u6839\u8282\u70b9\u4e5f\u80fd\u50cf\u5bf9\u5f85\u5176\u4ed6\u8282\u70b9\u4e00\u6837\uff0c\u56e0\u6b64\u53ea\u8981\u7528\u7b80\u5355\u7684 <code>for</code> \u5faa\u73af\u5c31\u80fd\u5b9e\u73b0</li> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(T(N) = O(\\log N)\\)</li> </ul>"},{"location":"6-x.html#deletemin","title":"DeleteMin","text":"<p>\u601d\u8def</p> <ul> <li>\u8981\u627e\u5230\u6700\u5c0f\u503c\u975e\u5e38\u7b80\u5355\u2014\u2014\u5c31\u662f\u9996\u9879</li> <li>\u4f46\u662f\u5220\u9664\u9996\u9879\u540e\uff0c\u8fd8\u662f\u8981\u4fdd\u8bc1\u8be5\u6811\u662f\u5b8c\u5168\u4e8c\u53c9\u6811+\u6700\u5c0f\u6811\u3002\u56e0\u6b64\u5b9e\u9645\u4e0a\u6211\u4eec\u5e94\u5220\u9664\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u8003\u8651\u5982\u4f55\u5b89\u7f6e\u539f\u6765\u5728\u6700\u540e\u4f4d\u7f6e\u4e0a\u7684\u8282\u70b9\uff1a<ul> <li>\u5148\u5c06\u5b83\u653e\u5165\u6839\u8282\u70b9\u7684\u4f4d\u7f6e\uff08\u56e0\u4e3a\u201d\u5220\u9664\u201c\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u7a7a\u51fa\u6765\u4e86\uff09\uff0c\u518d\u8ba9\u5b83\u548c\u5de6\u53f3\u5b69\u5b50\u6bd4\u8f83</li> <li>\u5982\u679c\u6bd4\u5de6\u53f3\u5b69\u5b50\u90fd\u5927\uff0c\u5219\u8981\u5c06\u6700\u5c0f\u7684\u5b69\u5b50\u653e\u5165\u6839\u8282\u70b9</li> <li>\u63a5\u7740\u5c06\u5b83\u4e0e\u8fd9\u4e2a\u5b69\u5b50\u7684\u5de6\u53f3\u5b69\u5b50\u6bd4\u8f83\uff0c\u2026\u2026\uff0c\u76f4\u81f3\u6bd4\u5de6\u53f3\u5b69\u5b50\u90fd\u5c0f\u4e3a\u6b62</li> </ul> </li> </ul> <p>\u8fd9\u79cd\u6280\u5de7\u88ab\u79f0\u4e3a\u201c\u4e0b\u6ee4(percolate down)\u201d\u3002</p> \u52a8\u753b\u6f14\u793a <p> </p> <p>\u8fd9\u91cc\u7684\u52a8\u753b\u540c\u6837\u6709\u70b9\u5c0f\u95ee\u9898\uff1a\u6ce8\u610f\u201c\u4e0b\u6ee4\u201d\u548c\u201c\u4e0a\u6ee4\u201d\u7684\u672c\u8d28\u76f8\u540c\uff0c\u5b83\u4eec\u53ea\u662f\u901a\u8fc7\u6bd4\u8f83\u5143\u7d20\u5927\u5c0f\u786e\u5b9a\u65b0\u5143\u7d20\u5e94\u653e\u7684\u4f4d\u7f6e\uff0c\u4e2d\u95f4\u6ca1\u6709\u91c7\u7528\u4ea4\u6362\u7684\u64cd\u4f5c\u3002</p> \u4ee3\u7801\u5b9e\u73b0 <pre><code>ElementType DeleteMin(PriorityQueue H)\n{\n    ElementType MinElement;\n    MinElement = H-&gt;Elements[1];\n    H-&gt;Elements[1] = H-&gt;Elements[H-&gt;Size--];\n    PercolateDown(1, H);\n    return MinElement;\n}\n\nvoid PercolateDown(int p, PriorityQueue H)\n{\n    int i, child;\n    ElementType last = H-&gt;Elements[p];\n\n    for (i = p; i * 2 &lt;= H-&gt;Size; i = child)\n    {\n        child = i * 2;\n        if (child != H-&gt;Size &amp;&amp; H-&gt;Elements[child + 1] &lt; H-&gt;Elements[child])\n            child++;\n        if (last &gt; H-&gt;Elements[child])\n            H-&gt;Elements[i] = H-&gt;Elements[child];\n        else\n            break;\n    }\n    H-&gt;Elements[i] = last;\n}\n</code></pre> <ul> <li>\u770b\u5230 <code>PercolateDown()</code> \u51fd\u6570\u7684 <code>for</code> \u5faa\u73af\u4e2d\u7684\u7b2c\u4e00\u4e2a <code>if</code> \u8bed\u53e5\uff1a<ul> <li>\u5b83\u8003\u8651\u4e86\u53ea\u6709\u4e00\u4e2a\u5de6\u5b69\u5b50\u7684\u8282\u70b9\u7684\u60c5\u51b5</li> <li>\u540c\u65f6\uff0c\u5b83\u4e5f\u9009\u62e9\u4e86\u6700\u5c0f\u7684\u5b69\u5b50\u4f5c\u4e3a\u63a5\u4e0b\u6765\u7684\u6bd4\u8f83\u5bf9\u8c61</li> </ul> </li> <li>\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u4e2a\u54e8\u5175\u6765\u79fb\u9664\u8fd9\u4e2a <code>if</code> \u8bed\u53e5\uff1a\u5bf9\u4e8e\u8282\u70b9\u603b\u6570\u4e3a\u5076\u6570\u7684\u5806\uff08\u7531\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6027\u8d28\u77e5\uff0c\u6b64\u65f6\u5b58\u5728\u4e00\u4e2a\u53ea\u6709\u5de6\u5b69\u5b50\u7684\u8282\u70b9\uff09\uff0c\u5728\u6700\u540e\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u5c06\u5176\u503c\u8bbe\u4e3a\u6574\u4e2a\u5806\u7684\u6700\u5927\u503c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u9632\u6b62\u67d0\u4e2a\u8282\u70b9\u4e0b\u6ee4\u7684\u65f6\u5019\u88ab\u5b89\u7f6e\u5728\u4e0d\u5b58\u5728\u7684\u8282\u70b9\u4e0a\uff0c\u800c\u4e0d\u9700\u8981\u7279\u5224</li> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(T(N) = O(\\log N)\\)</li> </ul>"},{"location":"6-x.html#other-heap-operations","title":"Other Heap Operations","text":"<p>\u6ce8\u610f</p> <ul> <li>\u5982\u679c\u6211\u4eec\u60f3\u8981\u9891\u7e41\u5730\u67e5\u627e\u67d0\u4e2a\u5217\u8868\u4e2d\u7684\u4efb\u610f\u5143\u7d20\uff0c\u90a3\u4e48\u5806\u7edd\u5bf9\u4e0d\u662f\u5408\u7406\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u5728\u5806\u91cc\u627e\u5143\u7d20\u9700\u8981\u7ebf\u6027\u626b\u63cf\uff08\\(O(n)\\)\uff09\u3002\u6211\u4eec\u5e94\u8be5\u91c7\u7528\u4e8c\u5206\u641c\u7d22\u6811\u3001\u6563\u5217\u8868\u7b49\u65b9\u6cd5</li> <li>\u5728\u6700\u5c0f\u5806\u4e2d\u627e\u6700\u5927\u503c\u4e5f\u662f\u4e0d\u5408\u7406\u7684\uff0c\u7406\u7531\u540c\u4e0a</li> </ul> <p>\\(\\mathrm{DecreaseKey}(P, \\Delta, H)\\)</p> <p>\u5c06\u4f4d\u7f6e\u4e3a\\(P\\)\u7684\u8282\u70b9\u7684\u952e\u503c\u51cf\u53bb \\(\\Delta\\)\uff0c\u8fd9\u6837\u5bf9\u5e94\u8282\u70b9\u7684\u4f18\u5148\u7ea7\u5c31\u4f1a\u63d0\u9ad8\uff08\u4e0a\u6ee4\uff09</p> <p>\\(\\mathrm{IncreaseKey}(P, \\Delta, H)\\)</p> <p>\u5c06\u4f4d\u7f6e\u4e3a\\(P\\)\u7684\u8282\u70b9\u7684\u952e\u503c\u52a0\u4e0a \\(\\Delta\\)\uff0c\u8fd9\u6837\u5bf9\u5e94\u8282\u70b9\u7684\u4f18\u5148\u7ea7\u5c31\u4f1a\u4e0b\u964d\uff08\u4e0b\u6ee4\uff09</p> <p>\u6ce8\uff1a\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u4e00\u822c\u7531\u7cfb\u7edf\u7ba1\u7406\u5458\uff0c\u800c\u975e\u4e00\u822c\u7684\u7528\u6237\u4f7f\u7528\u3002\u6bd4\u5982\uff1a</p> <ul> <li>\u524d\u8005\u53ef\u4f7f\u67d0\u4e2a\u7a0b\u5e8f\u63d0\u5230\u6700\u9ad8\u4f18\u5148\u7ea7</li> <li>\u540e\u8005\u53ef\u5c06\u5360\u7528CPU\u65f6\u95f4\u8fc7\u591a\u7684\u8fdb\u7a0b\u7684\u4f18\u5148\u7ea7\u5f80\u4e0b\u8c03</li> </ul> <p>\\(\\mathrm{Delete}(P, H)\\)</p> <p>\u4ece\u5806\u4e2d\u79fb\u9664\u4f4d\u7f6e\u4e3a\\(P\\)\u7684\u8282\u70b9\uff08\u5220\u9664\u7531\u7528\u6237\u7ec8\u6b62\uff08\u975e\u6b63\u5e38\u7ed3\u675f\uff09\u7684\u8fdb\u7a0b\uff09\u3002\u770b\u4f3c\u5f88\u590d\u6742\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u8fd0\u7528\u4e4b\u524d\u7684 <code>DecreaseKey()</code> \u548c <code>DeleteMin()</code> \u51fd\u6570\uff0c\u5176\u4e2d\u524d\u8005\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4ee4\u4e3a \\(\\infty\\)\uff08\u51cf\u53bb\u65e0\u9650\u5927\u7684\u6570\uff0c\u6210\u4e3a\u6700\u5c0f\u7684\u6570\uff0c\u7136\u540e\u5229\u7528 <code>DeleteMin()</code>\uff09</p> <p>\\(\\mathrm{BuildHeap}(H)\\)</p> <p>\uff1a\u5217\u8868\uff08\u6570\u7ec4\uff09\\(\\rightarrow\\) \u6700\u5c0f\u5806</p> <p>\u65b9\u6cd5</p> \u6cd51\u6cd52 <p>\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u4f7f\u7528<code>Insert()</code>\u51fd\u6570 \\(\\rightarrow O(N\\log N)\\) \uff1f\u274c</p> <p>\u91c7\u7528\u201c\u4e0b\u6ee4\u201d\u601d\u60f3\uff1a</p> <ul> <li>\u5148\u5c06\u8868\u4e2d\u7684\u5143\u7d20\u6309\u5c42\u5e8f\u653e\u5165\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d</li> <li>\u7136\u540e\u4ece\u5c42\u5e8f\u904d\u5386\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5185\u90e8\u8282\u70b9\u5f00\u59cb\uff0c\u6309\u5c42\u5e8f\u7684\u9006\u5e8f\u5230\u6839\u8282\u70b9\u4e3a\u6b62\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u9700\u8981\u4f7f\u7528 <code>PercolateDown()</code> \u51fd\u6570\uff0c\u786e\u5b9a\u81ea\u5df1\u7684\u6700\u7ec8\u4f4d\u7f6e</li> </ul> <p>\u5b9a\u7406\uff1a\u5bf9\u4e8e\u4e00\u68f5\u9ad8\u4e3a \\(h\\)\uff0c\u62e5\u6709 \\(2^{h+1}-1\\) \u4e2a\u8282\u70b9\u7684\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff0c\u6240\u6709\u8282\u70b9\u9ad8\u5ea6\u4e4b\u548c\u4e3a \\(2^{h+1} - 1 - (h+1)\\)</p> <p>\u7531\u8fd9\u4e2a\u5b9a\u7406\uff0c\u53ef\u63a8\u5f97\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a\\(O(N)\\)</p> \u52a8\u753b\u6f14\u793a <p> </p> <p>\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <pre><code>for (i = N / 2; i &gt; 0; i--)\n    PercolateDown(i);\n</code></pre>"},{"location":"6-x.html#applications-of-priority-queues","title":"Applications of Priority Queues","text":"<p>\u4e3e\u4f8b\uff1a</p> <ul> <li>\u64cd\u4f5c\u7cfb\u7edf</li> <li>\u5916\u90e8\u6392\u5e8f\uff08\u4e4b\u540e ADS \u4f1a\u8bb2\u5230\uff09</li> <li>\u8d2a\u5fc3\u7b97\u6cd5</li> <li>\u79bb\u6563\u4e8b\u4ef6\u6a21\u62df\uff08\u89c1\u4e0b\u9762\uff09</li> </ul>"},{"location":"6-x.html#the-selection-problem","title":"The Selection Problem","text":"<p>\u95ee\u9898</p> <p>\u7ed9\u5b9a\\(N\\)\u4e2a\u5143\u7d20\uff0c\u627e\u5230\u7b2c\\(k\\)\u5927\u7684\u5143\u7d20</p> <p>\u7b97\u6cd5</p> <p>\u8fd9\u4e24\u4e2a\u7b97\u6cd5\u6613\u4e8e\u7406\u89e3\u4f46\u6548\u7387\u4e0d\u9ad8\uff1a</p> \u7b97\u6cd51\u7b97\u6cd52 <p>\u5bf9\u6240\u6709\u5143\u7d20\u6392\u597d\u5e8f\uff0c\u518d\u627e\u7b2c\\(k\\)\u5927\u7684\u6570 \\(\\rightarrow O(N^2)\\)</p> <p>\u5148\u53d6\u524d\\(k\\)\u4e2a\u6570\u5e76\u5bf9\u8fd9\u4e9b\u6570\u6392\u597d\u5e8f\uff0c\u518d\u5c06\u5269\u4f59 \\(N - k\\) \u4e2a\u6570\u5206\u522b\u4e0e\u8fd9 \\(k\\) \u4e2a\u6570\u6bd4\u8f83\uff1a\u5982\u679c\u6bd4\u8fd9 \\(k\\) \u4e2a\u6570\u4e2d\u6700\u5c0f\u7684\u6570\u66f4\u5927\uff0c\u5c06\u6700\u5c0f\u7684\u6570\u8e22\u51fa\u53bb\uff0c\u8ba9\u5f85\u5224\u65ad\u7684\u6570\u8fdb\u53bb\u5e76\u653e\u5165\u6b63\u786e\u7684\u4f4d\u7f6e\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(N \\cdot k)\\)\u3002\u6700\u574f\u60c5\u51b5 \\(k = \\lceil N/2 \\rceil\\) \u65f6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(N^2)\\)</p> <p>\u5229\u7528\u6211\u4eec\u521a\u5b66\u7684\u5806\uff0c\u53ef\u4ee5\u5f97\u5230\u4e24\u4e2a\u590d\u6742\u5ea6\u5747\u4e3a \\(O(N \\log N)\\) \u7684\u7b97\u6cd5\uff1a</p> \u7b97\u6cd53\u7b97\u6cd54 <p>\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u8fd9\u91cc\u6211\u4eec\u8ba8\u8bba\u627e\u7b2c \\(k\\) \u5c0f\u7684\u6570\uff08\u9053\u7406\u90fd\u662f\u4e00\u6837\u7684\uff09\u3002\u5148\u5bf9\u8fd9 \\(N\\) \u4e2a\u5143\u7d20\u6784\u5efa\u5806\uff08\u4f7f\u7528 <code>BuildHeap()</code> \u51fd\u6570\uff09\uff0c\u7136\u540e\u4f7f\u7528 \\(k\\) \u6b21 <code>DeleteMin()</code> \u51fd\u6570\uff0c\u6700\u540e\u4e00\u6b21\u4ece\u5806\u4e2d\u5f97\u5230\u7684\u5143\u7d20\u4fbf\u662f\u6211\u4eec\u60f3\u8981\u7684\u7b2c \\(k\\) \u5c0f\u7684\u5143\u7d20\u3002\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(N + k \\log N)\\)\uff0c\u6700\u574f\u60c5\u51b5\u4e3a \\(k = \\lceil N/2 \\rceil\\)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(\\Theta(N \\log N)\\)</p> <p>\u501f\u9274\u7b97\u6cd52\u7684\u601d\u60f3\uff0c\u5148\u5bf9\u524d\\(k\\)\u4e2a\u6570\u6784\u5efa\u5806(\u4f7f\u7528 <code>BuildHeap()</code> \u51fd\u6570)\uff0c\u7136\u540e\u5c06\u5269\u4e0b \\(N - k\\) \u4e2a\u5143\u7d20\u4e0e\u5806\u4e2d\u6839\u8282\u70b9(\u6700\u5c0f\u503c)\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u6bd4\u5b83\u5927\uff0c\u5219\u9700\u8981\u4f7f\u7528 <code>DeleteMin()</code> \u548c <code>Insert()</code> \u4e24\u4e2a\u51fd\u6570\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(k + (N - k)\\log k) = O(N \\log k)\\)\uff0c\u6700\u574f\u60c5\u51b5\u4e3a \\(\\Theta(N \\log N)\\)</p>"},{"location":"6-x.html#event-simulation","title":"Event Simulation","text":"<p>\u95ee\u9898</p> <p>\u5728\u94f6\u884c\u4e2d\uff0c\u987e\u5ba2\u6392\u5728\u4e00\u5217\u961f\u4f0d\u4e2d\uff0c\u7b49\u5f85 \\(k\\) \u4f4d\u51fa\u7eb3\u5458\u4e2d\u7684\u4e00\u4f4d\u6709\u7a7a\u3002\u5206\u6790\u6bcf\u4f4d\u987e\u5ba2\u7684\u5e73\u5747\u7b49\u5f85\u65f6\u95f4\u3001\u961f\u4f0d\u7684\u957f\u5ea6</p> \u5206\u6790 <p>\u8be5\u6a21\u62df\u4e2d\u5305\u542b\u4e24\u4e2a\u4e8b\u4ef6\uff1a\u987e\u5ba2\u5230\u8fbe\u94f6\u884c\uff0c\u987e\u5ba2\u79bb\u5f00\u94f6\u884c\uff08\u4e00\u4f4d\u51fa\u7eb3\u5458\u56e0\u6b64\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\uff09</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6982\u7387\u51fd\u6570\u4ea7\u751f\u8f93\u5165\u6d41\uff0c\u8be5\u8f93\u5165\u6d41\u5305\u542b\u4e00\u7ec4\u6709\u5230\u8fbe\u65f6\u95f4\u548c\u670d\u52a1\u65f6\u95f4\u7684\u6709\u5e8f\u5bf9\uff0c\u6309\u5230\u8fbe\u65f6\u95f4\u6392\u5e8f\u3002\u6211\u4eec\u4e0d\u91c7\u7528\u7cbe\u786e\u7684\u65f6\u95f4\uff0c\u800c\u662f\u4ee5 tick \u4f5c\u4e3a\u8ba1\u65f6\u5355\u4f4d\u3002\u5f00\u59cb\u65f6\uff0c\u5c06 tick \u521d\u59cb\u5316\u4e3a 0\uff1b\u5f53\u6ca1\u6709\u987e\u5ba2\u8fdb\u6765\u4e14\u6240\u6709\u51fa\u7eb3\u5458\u90fd\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u65f6\uff0c\u6a21\u62df\u7ed3\u675f\u3002</p> <p>\u5982\u679c\u6211\u4eec\u901a\u8fc7\u5faa\u73af\u6bcf\u4e2a tick \u6765\u5904\u7406\u6574\u4e2a\u7a0b\u5e8f\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd0\u884c\u65f6\u95f4\u8ddf\u987e\u5ba2\u548c\u65f6\u95f4\u7684\u6570\u91cf\u65e0\u5173\uff0c\u800c\u4e14\u8fd0\u884c\u6548\u7387\u5f88\u4f4e\u3002\u56e0\u6b64\u6211\u4eec\u6839\u636e\u6700\u8fd1\u65f6\u95f4\u53d1\u751f\u7684\u4e8b\u4ef6\u6765\u589e\u52a0 tick\uff0c\u8fd9\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a\u4e0b\u4e00\u4f4d\u987e\u5ba2\u7684\u5230\u6765\uff0c\u6709\u4e00\u4f4d\u987e\u5ba2\u79bb\u5f00\u3002</p> <p>\u5bf9\u4e8e\u6b63\u5728\u6392\u961f\u7684\u987e\u5ba2\uff0c\u6211\u4eec\u7528\u961f\u5217\u6765\u5b58\u50a8\uff1b\u5bf9\u4e8e\u6bcf\u4f4d\u987e\u5ba2\u79bb\u5f00\u65f6\u95f4\u7684\u5b58\u50a8\uff0c\u6211\u4eec\u7528\u4f18\u5148\u961f\u5217\u5b58\u50a8\uff0c\u4ee5\u4fbf\u6211\u4eec\u627e\u5230\u6700\u8fd1\u53d1\u751f\u7684\u4e8b\u4ef6\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(C \\log(k + 1))\\)</p>"},{"location":"6-x.html#d-heaps","title":"d-Heaps","text":"<p>d\u53c9\u5806\uff1a\u6240\u6709\u8282\u70b9\u6700\u591a\u6709 \\(d\\) \u4e2a\u5b69\u5b50</p> <p>\\(d\\)\u5e76\u4e0d\u662f\u8d8a\u5927\u8d8a\u597d\uff0c\u7406\u7531\u5982\u4e0b\uff1a</p> <ul> <li>\u867d\u7136 <code>Insert()</code> \u901f\u5ea6\u53d8\u5feb\uff08\\(O(\\log_dN)\\)\uff09\uff0c\u4f46<code>DeleteMin()</code>\u8981\u627e\u5230\u6700\u5c0f\u7684\u5b69\u5b50\uff0c\u9700\u8981 \\(d - 1\\) \u6b21\u6bd4\u8f83\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u5c06\u4f1a\u53d8\u6210 \\(O(d \\log_d N)\\)</li> <li>\u5728\u627e\u67d0\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u5b69\u5b50\u6216\u7236\u8282\u70b9\u65f6\uff0c\u4e8c\u53c9\u5806\u4e2d\u7684 \\(\\times 2\\) \u6216 /2 \u4ec5\u4ec5\u662f\u4e2a\u79fb\u4f4d\u64cd\u4f5c\uff0c\u4f46d-Heap\u4e2d\u7684 \\(\\times d\\) \u6216 \\(/ d\\) \u5219\u66f4\u52a0\u590d\u6742</li> </ul> <p>\u4f18\u52bf\uff1a</p> <ul> <li>\u5c31\u5982\u524d\u6587\u6240\u8bf4\uff0c\u63d2\u5165\u64cd\u4f5c\u5f80\u5f80\u6bd4\u5220\u9664\u64cd\u4f5c\u591a\uff0c\u56e0\u6b64\u6211\u4eec\u4ece <code>Insert()</code> \u7684\u63d0\u901f\u4e2d\u83b7\u5f97\u7684\u597d\u5904\u6bd4 <code>DeleteMin()</code> \u7684\u964d\u901f\u5e26\u6765\u7684\u5f0a\u7aef\u66f4\u591a</li> <li>\u5982\u679c\u4f18\u5148\u961f\u5217\u592a\u5927\uff0c\u4ee5\u81f3\u4e8e\u4e3b\u5185\u5b58\u65e0\u6cd5\u5bb9\u7eb3\uff0c\u5219d-Heap\u6bd4\u4e8c\u53c9\u5806\u66f4\u6709\u4f18\u52bf</li> </ul> <p>\u8865\u5145\uff1a\u5bf9\u4e8e\u8282\u70b9\\(i\\)</p> <ul> <li>\u7236\u8282\u70b9\uff1a\\(\\lfloor \\dfrac{i + d - 2}{d} \\rfloor\\)</li> <li>\u7b2c\u4e00\u4e2a\u5b69\u5b50\uff1a\\((i - 1)d + 2\\)</li> <li>\u6700\u540e\u4e00\u4e2a\u5b69\u5b50\uff1a\\(id + 1\\)</li> </ul>"},{"location":"7-x.html","title":"Chap 7 Sorting","text":"<p> \u7ea6 3325 \u4e2a\u5b57  260 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 20 \u5206\u949f</p> \u6838\u5fc3\u77e5\u8bc6 <p>\u672c\u6765\u8fd9\u91cc\u5e94\u8be5\u6574\u7406\u4e00\u5f20\u8868\u683c\uff0c\u8868\u793a\u6bcf\u79cd\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u9002\u7528\u60c5\u51b5\u7b49\u7b49\uff0c\u4f46\u56e0\u65f6\u95f4\u95ee\u9898\u6765\u4e0d\u53ca\u6574\u7406\uff0c\u4e4b\u540e\u4f1a\u8865\u4e0a\u3002</p> <p>\u6838\u5fc3\u77e5\u8bc6\u5c31\u770b\u76ee\u5f55\u7684\u4e8c\u7ea7\u6807\u9898\u5427\uff0c\u5b9e\u5728\u6ca1\u65f6\u95f4\u4e86\uff08\u60b2\uff09</p>"},{"location":"7-x.html#preliminaries","title":"Preliminaries","text":"<p><code>void X_sort(ElementType A[], int N)</code></p> <ul> <li><code>N</code> \u5fc5\u987b\u662f\u5408\u6cd5\u7684\u6574\u6570</li> <li>\u65b9\u4fbf\u8d77\u89c1\uff0c\u5047\u8bbe\u6570\u7ec4\u5143\u7d20\u90fd\u662f\u6574\u6570</li> <li>\u57fa\u4e8e\u6bd4\u8f83\u7684\u6392\u5e8f(comparison-based sorting)\uff1a\u5047\u5b9a\u5b58\u5728 <code>&lt;</code>, <code>&gt;</code> \u8fd0\u7b97\u7b26\uff0c\u4e14\u5b83\u4eec\u662f\u552f\u4e00\u80fd\u591f\u7528\u4e8e\u8f93\u5165\u6570\u636e\u7684\u8fd0\u7b97\u7b26</li> <li>\u4ec5\u8003\u8651\u5185\u90e8\u6392\u5e8f(internal sorting)\uff08\u5373\u6574\u4e2a\u6392\u5e8f\u80fd\u5728\u4e3b\u5185\u5b58\u4e2d\u5b8c\u6210\uff09</li> </ul> <p>\u6ce8\uff1a\u6559\u6750\u4e2d\u672a\u63d0\u5230\u9009\u62e9\u6392\u5e8f\u548c\u5192\u6ce1\u6392\u5e8f\uff0c\u4f46\u8003\u8bd5\u4f1a\u8003\u3002\u82e5\u5fd8\u8bb0\u4e86\u5b83\u4eec\u7684\u539f\u7406\uff0c\u81ea\u5df1\u4e0a\u7f51\u641c\u3002</p>"},{"location":"7-x.html#insertion-sort","title":"Insertion Sort","text":"<p>\u63d2\u5165\u6392\u5e8f(insertion sort)\u7684\u5927\u81f4\u539f\u7406</p> <p>\u91cd\u590d N - 1 \u8d9f\u6392\u5e8f\uff0c\u4ece P = 1 \u5230 P = N - 1 \u3002\u6392\u5e8f\u524d\u5df2\u77e50~P-1\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u662f\u6709\u5e8f\u7684\u3002\u5bf9\u4e8e\u7b2c P \u8d9f\u6392\u5e8f\uff0c\u6211\u4eec\u5c06\u4f4d\u7f6e P \u4e0a\u7684\u5143\u7d20\u5411\u524d P \u4e2a\u5143\u7d20\u79fb\u52a8\uff0c\u76f4\u5230\u53d1\u73b0\u6b63\u786e\u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\u4fdd\u8bc1\u6bcf\u8d9f\u6392\u5e8f\u7ed3\u675f\u540e\u4f4d\u7f6e\u5728 0 ~ P \u4e0a\u7684\u5143\u7d20\u662f\u6709\u5e8f\u7684\u3002</p> \u4ee3\u7801\u5b9e\u73b0 <pre><code>void InsertionSort(ElementType A[], int N)\n{\n    int j, P;\n    ElementType Tmp;\n\n    for (P = 1; P &lt; N; P++)\n    {\n        Tmp = A[P] // the next coming card\n        for (j = P; j &gt; 0 &amp;&amp; A[j - 1] &gt; Tmp; j--)\n            A[j] = A[j - 1];\n        // shift sorted cards to provide a position for the new coming card\n        A[j] = Tmp; // place the new card at the proper position\n    } // end for-P-loop\n}\n</code></pre> <ul> <li>\u6700\u574f\u60c5\u51b5\uff1a\u8f93\u5165\u7684 <code>A[]</code> \u662f\u9006\u5e8f\u7684\uff0c\\(T(N) = O(N^2)\\)</li> <li>\u6700\u597d\u60c5\u51b5\uff1a\u8f93\u5165\u7684 <code>A[]</code> \u662f\u987a\u5e8f\u7684\uff0c\\(T(N) = O(N)\\)</li> <li>\u5e73\u5747\u60c5\u51b5\uff1a\\(\\Theta(N^2) = \\sum\\limits_{i = 2}^Ni = 2 + 3 + 4 + \\dots + N\\)</li> </ul>"},{"location":"7-x.html#a-lower-bound-for-simple-sorting-algorithms","title":"A Lower Bound for Simple Sorting Algorithms","text":"<p>\u5b9a\u4e49\uff1a\u4e00\u4e2a\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u9006\u5e8f\u5bf9(inversion)\u662f\u4e00\u4e2a\u6709\u5e8f\u5bf9 \\((i, j)\\)\uff0c\u6ee1\u8db3 \\(i &lt; j\\) \u4e14 \\(A[i] &gt; A[j]\\)</p> <p>\u89c2\u5bdf\u53d1\u73b0\uff1a\u6570\u7ec4\u4e2d\u9006\u5e8f\u5bf9\u7684\u4e2a\u6570 = \u5176\u63d2\u5165\u6392\u5e8f\u8fc7\u7a0b\u4e2d\u7684\u4ea4\u6362\u6b21\u6570</p> <p>\u8bc1\u660e\uff1a\u4ea4\u6362\u4e24\u4e2a\u76f8\u90bb\u7684\u5143\u7d20\uff0c\u5c31\u53ef\u4ee5\u6d88\u53bb\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u9006\u5e8f\u5bf9</p> <p>\u6240\u4ee5\uff0c\u63d2\u5165\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u53ef\u4ee5\u8868\u793a\u4e3a \\(T(N, I) = O(I + N)\\)\uff0c\u5176\u4e2d\\(I\\)\u662f\u539f\u59cb\u6570\u7ec4\u4e2d\u9006\u5e8f\u5bf9\u7684\u4e2a\u6570\u3002\u89c2\u5bdf\u53d1\u73b0\uff0c\u5f53\u5217\u8868\u5df2\u7ecf\u6392\u8fc7\u5e8f\u4e86\uff0c\u90a3\u4e48\u8fd9\u6b21\u6392\u5e8f\u7684\u901f\u5ea6\u5c31\u4f1a\u5f88\u5feb\u3002</p> <p>\u5b9a\u74061\uff1a\u5bf9\u4e8e\u5305\u542b N \u4e2a\u4e0d\u540c\u6570\u5b57\u7684\u6570\u7ec4\uff0c\u5b83\u7684\u5e73\u5747\u9006\u5e8f\u5bf9\u4e2a\u6570\u4e3a \\(\\dfrac{N(N-1)}{4}\\)</p> <p>\u5b9a\u74062\uff1a\u4efb\u4f55\u901a\u8fc7\u4ea4\u6362\u76f8\u90bb\u5143\u7d20\u5b9e\u73b0\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(\\Omega(N^2)\\)</p> <p>\u7531\u8fd9\u4e9b\u5b9a\u7406\uff0c\u6211\u4eec\u77e5\u9053\uff1a\u53ef\u4ee5\u901a\u8fc7\u5728\u6bcf\u6b21\u4ea4\u6362\u4e2d\u6d88\u9664\u591a\u4e2a\u9006\u5e8f\u5bf9\u7684\u65b9\u5f0f\u6765\u63d0\u5347\u6392\u5e8f\u6548\u7387</p>"},{"location":"7-x.html#shellsort","title":"Shellsort","text":"<p>\u5e0c\u5c14\u6392\u5e8f(shellsort)\u7684\u5927\u81f4\u539f\u7406</p> <ul> <li>\u8fd9\u79cd\u7b97\u6cd5\u6bd4\u8f83\u76f8\u9694\u4e00\u5b9a\u8ddd\u79bb\u7684\u5143\u7d20</li> <li>\u6bd4\u8f83\u7684\u95f4\u9694\u5728\u7b97\u6cd5\u8fd0\u884c\u65f6\u5c06\u4e0d\u65ad\u51cf\u5c0f\uff0c\u76f4\u5230\u6700\u540e\u6bd4\u8f83\u7684\u662f\u76f8\u90bb\u5143\u7d20</li> </ul> <p>\u56e0\u6b64\u8fd9\u79cd\u6392\u5e8f\u4e5f\u88ab\u79f0\u4e3a\u7f29\u5c0f\u589e\u91cf\u6392\u5e8f(diminishing increment sort)\uff0c\u5b83\u662f\u4e0d\u7a33\u5b9a\u7684\u6392\u5e8f</p> \u52a8\u753b\u6f14\u793a <p> </p> <p>\u5173\u952e\u6982\u5ff5</p> <ul> <li> <p>\u589e\u91cf\u5e8f\u5217(increment sequence)\uff1a\\(h_1 &lt; h_2 &lt; \\dots &lt; h_t(h_1 = 1)\\)\uff0c\u5b83\u51b3\u5b9a\u4e86\u5e0c\u5c14\u6392\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4</p> </li> <li> <p>\\(h_k\\)-sort\uff1a\u9636\u6bb5 \\(k = t, t - 1, \\dots, 1\\) \u7684\u6392\u5e8f\u3002\\(h_k\\)-sort \u540e\uff0c\u53ef\u4ee5\u786e\u4fdd\u5e8f\u5217 A \u4e2d \\(\\forall i,\\ A[i] \\le A[i + h_k]\\)</p> <ul> <li>\\(h_k\\)-sorted \u7684\u5e8f\u5217\uff0c\u7ecf\u5386\u4e86 \\(h_{k-1}\\)-sort \u540e\uff0c\u4fdd\u6301 \\(h_k\\)-sorted</li> <li>\u5177\u4f53\u505a\u6cd5\uff1a\u5bf9\u67d0\u4e2a\u4f4d\u7f6e\u4e3a i \u7684\u5143\u7d20\uff0c\u5728\u4f4d\u7f6e\u4e3a \\(i, i - h_k, i - 2h_k, \\dots\\) \u7684\u5143\u7d20\u4e2d\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\uff0c\u56e0\u6b641\u4e2a \\(h_k\\)-sort \u5305\u542b \\(h_k\\) \u6b21\u72ec\u7acb\u7684\u63d2\u5165\u6392\u5e8f</li> </ul> </li> </ul> <p>\u5e0c\u5c14\u589e\u91cf\u5e8f\u5217(Shell's increment sequence)\uff1a</p> \\[ h_t = \\lfloor \\dfrac{N}{2} \\rfloor,\\ h_k = \\lfloor \\dfrac{h_{k+1}}{2} \\rfloor \\] \u4ee3\u7801\u5b9e\u73b0 <pre><code>void Shellsort(ElementType A[], int N)\n{\n    int i, j, increment;\n    ElementType Tmp;\n    for (increment = N / 2; increment &gt; 0; increment /= 2)\n        // h sequence\n        for (i = increment; i &lt; N; i++)\n        { // insertion sort\n            Tmp = A[i];\n            for (j = i; j &gt;= increment; j -= increment)\n                if (Tmp &lt; A[j - increment])\n                    A[j] = A[j - increment];\n                else\n                    break;\n                A[j] = Tmp;\n        } // end for-l and for-increment loop\n}\n</code></pre> <p>\u5b9a\u7406\uff1a\u4f7f\u7528\u5e0c\u5c14\u589e\u91cf\u7684\u5e0c\u5c14\u6392\u5e8f\u7684\u6700\u574f\u8fd0\u884c\u65f6\u95f4\u4e3a \\(\\Theta(N^2)\\)</p> <p>\u6ce8\uff1a\u8bc1\u660e\u90e8\u5206\u89c1\u4e66\u672c \\(P_{224}\\)</p> \u7cdf\u7cd5\u7684\u60c5\u51b5 <p> </p> <p>\u56e0\u4e3a\u8fd9\u4e9b\u589e\u91cf\u4e0d\u662f\u4e24\u4e24\u4e92\u8d28\u7684\uff0c\u56e0\u6b64\u66f4\u5c0f\u7684\u589e\u91cf\u8d77\u5230\u7684\u4f5c\u7528\u4e0d\u5927</p> <p>\u6539\u8fdb\u7248\uff1a\u5e0c\u5df4\u5fb7\u589e\u91cf\u5e8f\u5217(Hibbard's increment sequence)</p> \\[ h_k = 2^k - 1 \\] <p>\u6b64\u65f6\u53ef\u4ee5\u4fdd\u8bc1\u589e\u91cf\u7684\u4e24\u4e24\u4e92\u8d28</p> <p>\u5b9a\u7406\uff1a\u4f7f\u7528\u5e0c\u5df4\u5fb7\u589e\u91cf\u7684\u5e0c\u5c14\u6392\u5e8f\u7684\u6700\u574f\u8fd0\u884c\u65f6\u95f4\u4e3a \\(\\Theta(N^{\\frac{3}{2}})\\)</p> <p>\u6ce8\uff1a\u8bc1\u660e\u90e8\u5206\u89c1\u4e66\u672c\\(P_{225}\\)</p> \u8865\u5145 <ul> <li>\\(T_{\\text{avg-Hibbard}}(N) = O(N^{\\frac{5}{4}})\\)</li> <li>\u585e\u5947\u5a01\u514b(Sedgewick)\u7684\u6700\u4f73\u5e8f\u5217\u662f{1, 5, 19, 41, 109, \u2026}\uff0c\u8fd9\u4e9b\u9879\u8981\u4e48\u6765\u81ea \\(9 \\times 4^i - 9 \\times 2^i + 1\\)\uff0c\u8981\u4e48\u6765\u81ea \\(4^i - 3 \\times 2^i + 1\\)<ul> <li>\\(T_{avg}(N) = O(N^{\\frac{7}{6}})\\)</li> <li>\\(T_{worst}(N) = O(N^{\\frac{4}{3}})\\)</li> </ul> </li> </ul> <p>\u867d\u7136\u5e0c\u5c14\u6392\u5e8f\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u662f\u5b83\u7684\u5206\u6790\u76f8\u5f53\u590d\u6742\u3002\u5b83\u9002\u7528\u4e8e\u6392\u5e8f\u4e2d\u7b49\u5927\u7684\u8f93\u5165\u5e8f\u5217(\u6210\u5343\u4e0a\u4e07\u7684\u89c4\u6a21)</p>"},{"location":"7-x.html#heapsort","title":"Heapsort","text":"<p>\u7b97\u6cd51\uff1a</p> <pre><code>Algorithm 1:\n{\n    BuildHeap(H);  // O(N)\n    for (i = 0; i &lt; N; i++)\n        TmpH[i] = DeleteMin(H);  // O(log N)\n    for (i = 0; i &lt; N; i++)\n        H[i] = TmpH[i];  // O(1)\n}\n</code></pre> <p>\u7f3a\u9677\uff1a\u4f7f\u7528\u4e86\u989d\u5916\u7684\u6570\u7ec4\uff0c\u5360\u7528\u4e86\u66f4\u591a\u7684\u7a7a\u95f4\uff08\u62f7\u8d1d\u4e0d\u5f71\u54cd\u65f6\u95f4\u590d\u6742\u5ea6\uff09</p> <p>\u5982\u4f55\u6539\u8fdb</p> <p>\u89c2\u5bdf\u53d1\u73b0\uff0c\u6bcf\u4f7f\u75281\u6b21 <code>DeleteMin</code> \u51fd\u6570\uff0c\u5806\u7684\u89c4\u6a21\u7f29\u5c0f 1\uff0c\u800c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u672c\u8be5\u5e9f\u5f03\u7684\u7a7a\u95f4\uff0c\u6765\u5b58\u653e <code>DeleteMin</code> \u5f97\u5230\u7684\u6700\u5c0f\u7684\u6570\u3002\u4f46\u6309\u7167\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u6211\u4eec\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u9012\u51cf\u5e8f\u5217\uff1b\u5982\u679c\u8981\u5f97\u5230\u9012\u589e\u5e8f\u5217\uff0c\u9700\u8981\u6784\u5efa\u6700\u5927\u5806\u5e76\u4f7f\u7528 <code>DeleteMax</code> \u51fd\u6570\u3002\u7531\u6b64\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u7b97\u6cd5 2\u3002</p> <p>\u7b97\u6cd52\uff1a</p> \u52a8\u753b\u6f14\u793a <p> </p> \u4ee3\u7801\u5b9e\u73b0 <pre><code>// \u8fd9\u91cc\u7684 PercDown \u51fd\u6570\u4e0e Chap 6 \u7ed9\u51fa\u7684\u7a0d\u6709\u4e0d\u540c\uff08\u7d22\u5f15\u7684\u6807\u6ce8\u53d1\u751f\u53d8\u5316\uff09\n#define LeftChild(i) (2 * (i) + 1)\n\nvoid PercDown(ElementType A[], int i, int N)\n{\n    int Child;\n    ElementType Tmp;\n\n    for (Tmp = A[i]; LeftChild(i) &lt; N; i = Child)\n    {\n        Child = LeftChild(i);\n        if (Child != N - 1 &amp;&amp; A[Child + 1] &gt; A[Child])\n            Child++;\n        if (Tmp &lt; A[Child])\n            A[i] = A[Child];\n        else\n            break;\n    }\n    A[i] = Tmp;\n}\n\nvoid Heapsort(ElementType A[], int N)\n{\n    int i;\n    for (i = N / 2; i &gt;= 0; i--)  // BuildHeap\n        PercDown(A, i, N);\n    for (i = N - 1; i &gt; 0; i--)   // DeleteMax\n    {\n        Swap(&amp;A[0], &amp;A[i]);\n        PercDown(A, 0, i);\n    }\n}\n</code></pre> <ul> <li>\u7d22\u5f15\u7684\u6807\u6ce8\u4ece 0 \u5f00\u59cb\uff08\u4e0d\u540c\u4e8e Chap 6\uff09</li> <li>\u5806\u6392\u5e8f\u662f\u4e00\u79cd\u7a33\u5b9a\u7684\u7b97\u6cd5</li> </ul> <p>\u5b9a\u7406\uff1a\u5bf9 N \u4e2a\u4e0d\u540c\u9879\u7684\u968f\u673a\u6392\u5217\u8fdb\u884c\u5806\u6392\u5e8f\uff0c\u5e73\u5c40\u6bd4\u8f83\u65f6\u95f4\u4e3a \\(2N \\log N - O(N \\log \\log N)\\)</p> <p>\u6ce8\uff1a\u8bc1\u660e\u89c1\u4e66\u672c \\(P_{229-230}\\)</p> <p>\u5c3d\u7ba1\u5806\u6392\u5e8f\u7ed9\u51fa\u4e86\u6700\u4f73\u5e73\u5747\u65f6\u95f4 \\(O(N \\log N)\\)\uff0c\u5b9e\u9645\u4e0a\u5b83\u6bd4\u4f7f\u7528 Sedgewick \u589e\u91cf\u5e8f\u5217\u7684\u5e0c\u5c14\u6392\u5e8f\u66f4\u6162</p>"},{"location":"7-x.html#mergesort","title":"Mergesort","text":"<p>\u5f52\u5e76\u6392\u5e8f(merge sort)\uff1a\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(N \\log N)\\)\uff0c\u5b83\u91c7\u7528\u9012\u5f52\u7b97\u6cd5\uff0c\u662f\u4e00\u79cd\u7a33\u5b9a\u7684\u7b97\u6cd5</p> <p>\uff1a\u5408\u5e76 2 \u4e2a\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u5217\u8868</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(T(N) = O(N)\\)\uff0c\\(N\\)\u4e3a 2 \u4e2a\u5217\u8868\u7684\u5143\u7d20\u4e2a\u6570\u603b\u548c</p> \u4ee3\u7801\u5b9e\u73b0 <pre><code>void MergeSort(ElementType A[], int N)\n{\n    ElementType *TmpArray;\n    TmpArray = (ElementType *)malloc(N * sizeof(ElementType));\n    if (TmpArray != NULL)\n    {\n        MSort(A, TmpArray, 0, N - 1);\n        free(TmpArray);\n    }\n    else FatalError(\"No space for tmp array!!!\");\n}\n\nvoid MSort(ElementType A[], ElementType TmpArray[], int Left, int Right)\n{\n    int Center;\n    if (Left &lt; Right)\n    {\n        Center = (Left + Right) / 2;\n        MSort(A, TmpArray, Left, Center);\n        MSort(A, TmpArray, Center + 1, Right);\n        Merge(A, TmpArray, Left, Center + 1, Right);\n    }\n}\n\n// Lpos = start of left half, Rpos = start of right half\nvoid Merge(ElementType A[], ElementType TmpArray[], int Lpos, int Rpos, int RightEnd)\n{\n    int i, LeftEnd, NumElements, TmpPos;\n    LeftEnd = Rpos - 1;\n    TmpPos = Lpos;\n    NumElements = RightEnd - Lpos + 1;\n    while (Lpos &lt;= LeftEnd &amp;&amp; Rpos &lt;= RightEnd) // main loop\n        if (A[Lpos] &lt;= A[Rpos])\n            TmpArray[TmpPos++] = A[Lpos++];\n        else\n            TmpArray[TmpPos++] = A[Rpos++];\n    while (Lpos &lt;= LeftEnd) // Copy rest of first half\n        TmpArray[TmpPos++] = A[Lpos++];\n    while (Rpos &lt;= RightEnd) // Copy rest of second half\n        TmpArray[TmpPos++] = A[Rpos++];\n    for (i = 0; i &lt; NumElements; i++, RightEnd--)\n        // Copy TmpArray back\n        A[RightEnd] = TmpArray[RightEnd];\n}\n</code></pre> <p>\u6ce8</p> <ul> <li>\u5f52\u5e76\u6392\u5e8f\u4f53\u73b0\u4e86\u5206\u6cbb(divide-and-conquer)\u601d\u60f3\uff1a<code>MSort</code> \u4e3a\u201c\u5206\u201d\uff0c<code>Merge</code> \u4e3a\u201c\u6cbb\u201d</li> <li>\u5982\u679c\u6bcf\u6b21\u8c03\u7528 <code>Merge</code>\uff0c<code>TmpArray</code> \u4f1a\u88ab\u5c40\u90e8\u58f0\u660e\uff0c\u90a3\u4e48\u7a7a\u95f4\u590d\u6742\u5ea6 \\(S(N) = O(N \\log N)\\)</li> <li>\u4e8b\u5b9e\u4e0a\uff0c\u5927\u91cf\u7684\u65f6\u95f4\u88ab\u7528\u4e8e\u4f7f\u7528 <code>malloc</code> \u51fd\u6570\u5efa\u7acb <code>TmpArray</code></li> </ul>"},{"location":"7-x.html#analysis","title":"Analysis","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff08\u5229\u7528\u9012\u63a8\u5173\u7cfb\uff09\uff1a</p> \\[ \\begin{align} T(1) &amp;= 1 \\notag \\\\ T(N) &amp;= 2T(\\dfrac{N}{2}) + O(N) \\notag \\\\ &amp; = 2^kT(\\dfrac{N}{2^k}) + k \\cdot O(N) \\notag \\\\ &amp; = N \\cdot T(1) + \\log N \\cdot O(N) \\notag \\\\ &amp; =O(N + N\\log N) \\notag \\end{align} \\] <p>\u6ce8\uff1a\u53e6\u4e00\u79cd\u8bc1\u660e\u6cd5\u89c1\u4e66\u672c\\(P_{233-234}\\)</p> <p>\u5f52\u5e76\u6392\u5e8f\u9700\u8981\u7ebf\u6027\u5927\u5c0f\u7684\u989d\u5916\u5185\u5b58\uff0c\u4e14\u62f7\u8d1d\u6570\u7ec4\u4f1a\u964d\u4f4e\u901f\u5ea6\uff0c\u56e0\u6b64\u5728\u5185\u90e8\u6392\u5e8f\u4e2d\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u592a\u597d\u7528\uff0c\u4f46\u662f\u5728\u5916\u90e8\u6392\u5e8f(external sort)\uff08ads \u4f1a\u8bb2\uff09\u4e2d\u5f88\u5408\u9002</p> \u8865\u5145\uff1a\u8fed\u4ee3\u7248\u672c <p> </p> \u4ee3\u7801\u5b9e\u73b0 <p>\u53ef\u4ee5\u7528\u6765\u6253\u5370\u6bcf\u4e00\u8d9f\u5f52\u5e76\u6392\u5e8f\u540e\u7684\u7ed3\u679c</p> <pre><code>void merge_sort( ElementType list[],  int N )\n{\n    ElementType extra[MAXN];  /* the extra space required */\n    int length = 1;  /* current length of sublist being merged */\n    while( length &lt; N ) {\n        merge_pass( list, extra, N, length ); /* merge list into extra */\n        output( extra, N );\n        length *= 2;\n        merge_pass( extra, list, N, length ); /* merge extra back to list */\n        output( list, N );\n        length *= 2;\n    }\n}\n\nvoid merge_pass( ElementType list[], ElementType sorted[], int N, int length );\n{\n    int i, j;\n    int ptr_l, ptr_r, ptr;\n\n    ptr = 0;\n    for (i = 0; i &lt; N; i += 2 * length)\n    {\n        ptr_l = i;\n        ptr_r = i + length;\n        while (ptr_l &lt; i + length &amp;&amp; ptr_r &lt; i + 2 * length &amp;&amp; ptr_r &lt; N)\n        {\n            if (list[ptr_l] &lt;= list[ptr_r])\n                sorted[ptr++] = list[ptr_l++];\n            else\n                sorted[ptr++] = list[ptr_r++];\n        }\n        while (ptr_l &lt; i + length)\n            sorted[ptr++] = list[ptr_l++];\n        while (ptr_r &lt; i + 2 * length &amp;&amp; ptr_r &lt; N)\n            sorted[ptr++] = list[ptr_r++];\n    }\n}\n\nvoid output( ElementType list[], int N )\n{\n    int i;\n    for (i=0; i&lt;N; i++) printf(\"%d \", list[i]);\n    printf(\"\\n\");\n}\n</code></pre> <p>\u4e2a\u4eba\u611f\u89c9\u8fed\u4ee3\u7248\u5f52\u5e76\u6392\u5e8f\u5c31\u50cf\u589e\u91cf\u4e0d\u65ad\u589e\u5927\u7684\u5e0c\u5c14\u6392\u5e8f</p>"},{"location":"7-x.html#quicksort","title":"Quicksort","text":""},{"location":"7-x.html#the-algorithm","title":"The Algorithm","text":"<p>\u5feb\u901f\u6392\u5e8f(quicksort)\uff08\u4ee5\u4e0b\u7b80\u79f0\u5feb\u6392\uff09\u662f\u76ee\u524d\u5df2\u77e5\u5b9e\u9645\u4e0a\u6700\u5feb\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u5b83\u4e5f\u662f\u4e00\u79cd\u5206\u6cbb\u9012\u5f52\u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(N\\log N)\\)</p> <p>\u4f2a\u4ee3\u7801\u6a21\u7248\uff1a</p> <pre><code>void Quicksort(ElementType A[], int N)\n{\n    if (N &lt; 2) return;\n    pivot = pick any element in A[]    // ?\n    Partition S = A[] - {pivot} into two dijoint sets:    // ?\n        A1 = {a in S | a &lt;= pivot} and A2 = {a in S | a &gt;= pivot}\n    A = Quicksort(A1, N1) + {pivot} + Quicksort(A2, N2);\n}\n</code></pre> <p>\u56fe\u793a\uff1a</p> <p>\u601d\u8003</p> <ul> <li>\u6211\u4eec\u5982\u4f55\u9009\u53d6 <code>pivot</code>\uff08\u652f\u70b9\uff09\uff0c\u771f\u7684\u53ef\u4ee5\u201c\u968f\u673a\u201d\u6311\u9009\u5417\uff1f</li> <li>\u5982\u4f55\u5c06\u6570\u7ec4\uff08\u53ef\u4ee5\u770b\u4f5c\u96c6\u5408\uff09\u201c\u5212\u5206(<code>partition</code>)\u201d\u4e3a 2 \u4e2a\u5b50\u6570\u7ec4\uff08\u5b50\u96c6\uff09\uff1f</li> </ul>"},{"location":"7-x.html#picking-the-pivot","title":"Picking the Pivot","text":"\u9519\u8bef\u7684\u65b9\u6cd5\u5b89\u5168\u7684\u7b56\u7565\u4e09\u6570\u4e2d\u503c\u5206\u5272\u6cd5(median-of-three partitioning) <p><code>Pivot = A[0]</code></p> <p>\u6700\u574f\u60c5\u51b5\uff1a</p> <ul> <li>\u6570\u7ec4 <code>A[]</code> \u5df2\u63d0\u524d\u6392\u597d\u5e8f</li> <li><code>A[]</code> \u662f\u9006\u5e8f\u7684</li> </ul> <p>\u5219\u6240\u6709\u7684\u5143\u7d20\u8981\u4e48\u5168\u90e8\u653e\u5165 <code>A1</code>\uff0c\u8981\u4e48\u5168\u90e8\u653e\u5165 <code>A2</code>\uff0c\u56e0\u6b64\u6d6a\u8d39\u4e86 \\(O(N^2)\\) \u7684\u65f6\u95f4\u505a\u65e0\u610f\u4e49\u7684\u4e8b</p> <p><code>Pivot = random select from A[]</code></p> <p>\u7136\u800c\u968f\u673a\u6570\u751f\u6210\u7684\u201c\u6210\u672c\u201d\u8f83\u9ad8</p> <p><code>Pivot = median(left, center, right)</code></p> <p>\u6311\u9009\u6570\u7ec4\u4e2d\u6700\u5de6\u8fb9\u3001\u4e2d\u95f4\u3001\u6700\u53f3\u8fb9\u4e09\u4e2a\u5143\u7d20\u7684\u4e2d\u6570\uff0c\u8fd9\u4e0d\u4ec5\u6d88\u9664\u4e86\u6700\u574f\u60c5\u51b5(\u8f93\u5165\u524d\u5df2\u6392\u597d\u5e8f)\uff0c\u8fd8\u8282\u7701\u4e86 5% \u7684\u8fd0\u884c\u65f6\u95f4</p>"},{"location":"7-x.html#partitioning-strategy","title":"Partitioning Strategy","text":"<ul> <li>\u521d\u59cb\u72b6\u6001\uff1a\u6211\u4eec\u5c06 <code>Pivot</code> \u4e0e\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\uff0c\u5373\u628a <code>Pivot</code> \u653e\u5165\u6700\u540e\uff1b<code>i</code> \u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c<code>j</code> \u4ece\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb</li> <li> <p>\u5f53 <code>i &lt; j</code> \u65f6\uff0c</p> <ul> <li>\u82e5 <code>i</code> \u6240\u6307\u5143\u7d20\u6bd4 <code>Pivot</code> \u5c0f\uff0c<code>i++</code>\uff0c\u5426\u5219\u505c\u6b62\uff0c\u7b49\u5f85\u4ea4\u6362</li> <li>\u82e5 <code>j</code> \u6240\u6307\u5143\u7d20\u6bd4<code>Pivot</code>\u5927\uff0c<code>j--</code>\uff0c\u5426\u5219\u505c\u6b62\uff0c\u7b49\u5f85\u4ea4\u6362</li> <li>\u5f53 <code>i</code> \u548c <code>j</code> \u90fd\u505c\u4e0b\u6765\u4e86\uff0c\u4ea4\u6362 <code>i, j</code> \u6240\u6307\u5143\u7d20</li> </ul> <p>\u8fd9\u6837\uff0c\u6570\u7ec4\u4e2d\u6bd4 <code>Pivot</code> \u5c0f\u7684\u5143\u7d20\u5728\u5de6\u8fb9\uff0c\u6bd4 <code>Pivot</code> \u5927\u7684\u5143\u7d20\u5728\u53f3\u8fb9</p> </li> </ul> \u52a8\u753b\u6f14\u793a <p>\u4ee5<code>Pivot = 6</code>\u4e3a\u4f8b</p> <p> </p> <p>\u6700\u540e\u5f53 i &gt;= j \u65f6\uff0ci\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\uff08\u8fd9\u91cc\u662f 9\uff09\u548c pivot\uff08\u8fd9\u91cc\u662f 6\uff09\u4e92\u6362\uff0c\u8ba9 pivot \u91cd\u65b0\u56de\u5230\u4e2d\u95f4\uff0c\u518d\u5bf9\u5de6\u53f3\u4e24\u8fb9\u8fdb\u884c\u5feb\u6392\uff0c\u8fd9\u6837\u987a\u5e8f\u5c31\u5bf9\u4e86</p> <p>\u5f53 <code>key == Pivot</code> \u65f6\uff08<code>key</code> \u4e3a\u6570\u7ec4\u4e2d\u7684\u67d0\u4e2a\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\u6570\u7ec4\u4e2d\u6709\u4e0d\u6b62\u4e00\u4e2a\u4e0e <code>Pivot</code> \u76f8\u7b49\u7684\u5143\u7d20\uff09</p> <ul> <li>\u2b50\u540c\u65f6\u505c\u6b62 <code>i</code> \u548c <code>j</code>\uff1a<ul> <li>\u8f83\u574f\u7684\u60c5\u51b5\uff1a1, 1, 1, \u2026\u2026, \u8fd9\u65f6\u5feb\u6392\u5c31\u4f1a\u8fdb\u884c\u8bb8\u591a\u65e0\u610f\u4e49\u7684\u4ea4\u6362</li> <li>\u7136\u800c\uff0c\u8fd9\u786e\u4fdd\u6574\u4e2a\u5e8f\u5217\u80fd\u591f\u88ab\u5212\u5206\u5747\u5300</li> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(T(N) = O(N \\log N)\\)</li> </ul> </li> <li>\u274c<code>i</code> \u548c <code>j</code> \u5747\u4e0d\u505c\u6b62\uff1a<ul> <li>\u51fa\u73b0\u5b50\u5e8f\u5217\u5212\u5206\u4e0d\u5747\u7684\u95ee\u9898</li> <li>\u5982\u679c\u6240\u6709\u5143\u7d20\u90fd\u76f8\u7b49\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(T(N) = O(N^2)\\)</li> </ul> </li> </ul> <p>\u6240\u4ee5\uff0c\u6211\u4eec\u9009\u62e9\u524d\u4e00\u79cd\u65b9\u6848</p>"},{"location":"7-x.html#small-arrays","title":"Small Arrays","text":"<ul> <li>\u95ee\u9898\uff1a\u5f53\u6570\u7ec4\u89c4\u6a21\u8f83\u5c0f(\\(N \\le 20\\))\u65f6\uff0c\u5feb\u6392\u6bd4\u63d2\u6392\u6162</li> <li>\u89e3\u51b3\u65b9\u6848\uff1a\u5f53N\u8f83\u5c0f\u65f6\uff0c\u91c7\u7528\u53e6\u4e00\u79cd\u66f4\u6709\u6548\u7684\u7b97\u6cd5\uff08\u6bd4\u5982\u63d2\u6392\uff09</li> </ul>"},{"location":"7-x.html#implementation","title":"Implementation","text":"\u4ee3\u7801\u5b9e\u73b0 <pre><code>void Quicksort(ElementType A[], int N)\n{\n    Qsort(A, 0, N - 1);\n    // A: the array\n    // 0: Left index\n    // N - 1: Right index\n    // Return median of Left, Center, and Right\n    // Order these and hide the pivot\n}\n\nvoid Qsort(ElementType A[], int Left, int Right)\n{\n    int i, j;\n    ElementType Pivot;\n\n    if (Left + Cutoff &lt;= Right) // if the sequence is not too short\n    {\n        Pivot = Median3(A, Left, Right);  // select pivot\n        i = Left;                         // (1)\n        j = Right - 1;                    // (2)\n        for (;;)\n        {\n            while (A[++i] &lt; Pivot) {}     // scan from left\n            while (A[--j] &gt; Pivot) {}     // scan from right\n            if (i &lt; j)\n                Swap(&amp;A[i], &amp;A[j]);       // adjust partition\n            else break;                   // partition done\n        }\n        Swap(&amp;A[i], &amp;A[Right - 1]);       // restore pivot\n        Qsort(A, Left, i - 1);            // recursively sort left part\n        Qsort(A, i + 1, Right);           // recursively sort right part\n    }  // end if - the sequence subarray\n    else\n        InsertionSort(A + Left, Right - Left + 1);\n}\n\nElementType Median3(ElementType A[], int Left, int Right)\n{\n    int Center = (Left + Right) / 2;\n    if (A[Left] &gt; A[Center])\n        Swap(&amp;A[Left], &amp;A[Center]);\n    if (A[Left] &gt; A[Right])\n        Swap(&amp;A[Left], &amp;A[Right]);\n    if (A[Center] &gt; A[Right])\n        Swap(&amp;A[Center], &amp;A[Right]);\n    // Invariant: A[Left] &lt;= A[Center] &lt;= A[Right]\n    Swap(&amp;A[Center], &amp;A[Right - 1]);\n    // only need to sort A[Left + 1] .. A[Right - 2]\n    // \u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 A[Left] \u6bd4 pivot \u5c0f\uff0cA[Right] \u6bd4 pivot \u5927\n    // \u6240\u4ee5\u56de\u5230 Qsort \u51fd\u6570\u540e\uff0c\u6211\u4eec\u65e0\u9700\u6539\u53d8 A[Left] \u548c A[Right] \u7684\u987a\u5e8f\n    return A[Right - 1]; // Return pivot\n}\n</code></pre> <p>\u95ee\u9898</p> <p>\u4e3a\u4ec0\u4e48 (1) \u548c (2) \u4e0d\u80fd\u5206\u522b\u66ff\u6362\u4e3a\uff1a<code>i = Left + 1; j = Right - 2;</code> \u5462\uff1f</p> <p>\u8fd9\u6837\u4f1a\u6f0f\u6389 A[Left + 1] \u548c A[Right - 2] \u4e24\u4e2a\u5143\u7d20\u7684\u5224\u65ad\uff0c\u8fd9\u663e\u7136\u662f\u9519\u8bef\u7684</p>"},{"location":"7-x.html#analysis_1","title":"Analysis","text":"<p>\u5feb\u6392\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u9012\u63a8\u5173\u7cfb\u5f0f\uff1a</p> \\[ T(N) = T(i) + T(N - i - 1) + cN \\] <ul> <li>\u6700\u574f\u60c5\u51b5\uff1a\u6bcf\u6b21\u5feb\u6392\u6311\u9009\u7684\u652f\u70b9\u90fd\u662f\u6700\u5c0f\u7684\u5143\u7d20</li> </ul> \\[T(N) = T(N - 1) + cN \\quad \\Rightarrow \\quad T(N) = O(N^2)\\] <ul> <li>\u6700\u597d\u60c5\u51b5\uff1a\u652f\u70b9\u4e3a\u4e2d\u95f4\u5143\u7d20</li> </ul> \\[T(N) = 2T(\\dfrac{N}{2}) + cN \\quad \\Rightarrow \\quad T(N) = O(N \\log N)\\] <ul> <li>\u5e73\u5747\u60c5\u51b5\uff1a\u5047\u8bbe\\(\\forall i,\\ T(i)\\)\u7684\u5e73\u5747\u65f6\u95f4\u4e3a\\(\\dfrac{1}{N}[\\sum\\limits_{j = 0}^{N - 1}T(j)]\\)</li> </ul> \\[T(N) = \\dfrac{2}{N}[\\sum\\limits_{j = 0}^{N - 1}T(j)] + cN \\quad \\Rightarrow \\quad T(N) = O(N \\log N)\\]"},{"location":"7-x.html#an-example","title":"An Example","text":"<p>\u95ee\u9898</p> <p>\u627eN\u4e2a\u5143\u7d20\u7684\u5e8f\u5217\u4e2d\u7b2c k \u5927\u7684\u5143\u7d20</p> <p>\u524d\u666f\u56de\u987e</p> \u4ee3\u7801\u5b9e\u73b0 <pre><code>// Places the kth smallest element in the kth position\n// Because arrays start at 0. this will be index k-1\nvoid Qselect(ElementType A[], int k, int Left, int Right)\n{\n    int i, j;\n    ElementType Pivot;\n\n    if (Left + Cutoff &lt;= Right)\n    {\n        Pivot = Median3(A, Left, Right);\n        i = Left; j = Right - 1;\n        for (;;)\n        {\n            while (A[++i] &lt; Pivot) {}\n            while (A[--j] &gt; Pivot) {}\n            if (i &lt; j)\n                Swap(&amp;A[i],  &amp;A[j]);\n            else\n                break;\n        }\n        Swap(&amp;A[i], &amp;A[Right - 1]);\n\n        if (k &lt;= i)\n            Qselect(A, k, Left, i - 1);\n        else if (k &gt; i + 1)\n            Qselect(A, k, i + 1, Right);\n    }\n    else\n        InsertionSort(A + Left, Right - Left + 1);\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a</p> <ul> <li>\u6700\u574f\u60c5\u51b5\uff1a\\(O(N^2)\\)</li> <li>\u5e73\u5747\u60c5\u51b5\uff1a\\(O(N)\\)</li> </ul> <p>\u603b\u7ed3\uff1a\u5404\u79cd\u6392\u5e8f\u4e2d\u7684 \"run\" \u5230\u5e95\u662f\u4ec0\u4e48</p> <p>\u5386\u5e74\u5377\u4e2d\u51fa\u73b0\u8fc7\u5f88\u591a\u5173\u4e8e\u6392\u5e8f\u7684 \"run\" \u95ee\u9898\uff1a\u95ee\u7b2c k \u6b21 run \u540e\u5217\u8868\u91cc\u7684\u5143\u7d20\u6392\u5e8f\u662f\u4ec0\u4e48\uff1f\u9898\u76ee\u4e2d\u7684 run \u53ef\u80fd\u548c\u6211\u4eec\u7684\u76f4\u89c9\u8ba4\u8bc6\u76f8\u51b2\u7a81\uff0c\u4e3a\u6b64\u6211\u6574\u7406\u4e86\u4e00\u4e0b\u5e38\u89c1\u6392\u5e8f\u7684\u4e00\u6b21 run\uff08\u8868\u8ff0\u4e0d\u592a\u6e05\u695a\uff0c\u6b22\u8fce\u5927\u5bb6\u7684\u63d0\u8bae\u548c\u6539\u8fdb\uff01\uff09\uff1a</p> <ul> <li>\u9009\u62e9\u3001\u5192\u6ce1\u3001\u63d2\u5165\uff1a\u4e00\u904d\u5916\u5c42\u5faa\u73af</li> <li>\u5e0c\u5c14\u6392\u5e8f\uff1a\u4e00\u6b21 \\(h_k\\)-sort</li> <li>\u5f52\u5e76\u6392\u5e8f\uff08\u4ee5\u8fed\u4ee3\u7248\u4e3a\u4f8b\uff09\uff1a\u5bf9\u4e8e\u6574\u5f20\u5217\u8868\uff0c\u6bcf \\(2^k\\) \u4e2a\u5143\u7d20\u8fdb\u884c\u5f52\u5e76\u6392\u5e8f\uff0c\u76f4\u5230\u6392\u5b8c\u6240\u6709\u5143\u7d20\u540e\u7684\u7ed3\u679c</li> <li>\u5feb\u6392\uff1a\u5bf9\u4e8e\u6574\u5f20\u5217\u8868\uff0c\u627e\u5230\u5f53\u524d\u80fd\u627e\u7684\u6240\u6709\u652f\u70b9(pivot)\u540e\u7684\u7ed3\u679c\uff08\u5982\u679c\u4e0d\u7406\u89e3\uff0c\u53ef\u4ee5\u56de\u987e\u4e00\u4e0b\u524d\u9762\u4ecb\u7ecd\u7684\u539f\u7406\uff0c\u4ee5\u53ca\u5bf9\u5e94\u7684\u9898\u76ee\uff09</li> </ul>"},{"location":"7-x.html#sorting-large-structures","title":"Sorting Large Structures","text":"<ul> <li>\u95ee\u9898\uff1a\u4ea4\u6362\u5927\u578b\u7ed3\u6784\u7684\u6210\u672c\u8f83\u9ad8</li> <li>\u89e3\u51b3\u65b9\u6848\uff1a\u6dfb\u52a0\u6307\u5411\u7ed3\u6784\u7684\u6307\u9488\uff0c\u7136\u540e\u4ea4\u6362\u6307\u9488\uff0c\u8fd9\u79cd\u65b9\u6cd5\u88ab\u79f0\u4e3a\u95f4\u63a5\u6392\u5e8f(indirect sorting)\u3002\u4e4b\u540e\u82e5\u6709\u9700\u8981\uff0c\u4e5f\u53ef\u4ee5\u5229\u7528\u6307\u9488\u8fdb\u884c\u76f4\u63a5\u7684\u4ea4\u6362\u3002</li> </ul> <p>\u8868\u6392\u5e8f(table sort)</p> <p>\u8981\u70b9</p> <ul> <li>\u6211\u4eec\u7528 <code>table[]</code> \u6570\u7ec4\u5b58\u50a8\u6307\u9488\u3002\u6ce8\u610f\u8fd9\u91cc\u7684\u6307\u9488\u4e0d\u662f C \u8bed\u8a00\u7684\u6307\u9488\u7c7b\u578b\uff0c\u800c\u662f\u6570\u7ec4 <code>list[]</code> \u7684\u7d22\u5f15\u3002\u521d\u59cb\u5316\u4e3a <code>table[i] = i</code></li> <li>\u5bf9<code>list[]</code> \u7684\u5185\u5bb9\u8fdb\u884c\u95f4\u63a5\u6392\u5e8f\uff1a\u6211\u4eec\u53ea\u9700\u79fb\u52a8\u6307\u9488\u5373\u53ef\uff08\u81ea\u5df1\u9009\u62e9\u4e00\u79cd\u6392\u5e8f\u65b9\u6cd5\u6392\u5e8f\uff09</li> <li>\u5982\u4f55\u8f93\u51fa\u6392\u597d\u5e8f\u7684\u5217\u8868\uff1a<code>list[table[0]], list[table[1]], ..., list[table[n-1]]</code></li> </ul> <p>\u4e0a\u56fe\u4e3a\u521d\u59cb\u72b6\u6001\uff0c\u4e0b\u56fe\u4e3a\u95f4\u63a5\u6392\u5e8f\u540e\u7684\u5217\u8868</p> <p>\u7269\u7406\u6392\u5e8f</p> <p>\u89c2\u5bdf <code>Table</code> \u7684\u503c\uff0c\u53d1\u73b0\u8fd9n\u4e2a\u503c\u7684\u6392\u5217\u662f\u7531\u4e00\u4e9b\u4e0d\u76f8\u4ea4\u7684\u201c\u73af\u201d\u6784\u6210\uff08\u7c7b\u4f3c\u5e76\u67e5\u96c6\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u6027\u8d28\u5bf9 <code>list</code> \u8fdb\u884c\u7269\u7406\u6392\u5e8f\uff08\u771f\u6b63\u5730\u4ea4\u6362\u5143\u7d20\uff09</p> <p>\u4e0b\u56fe\u6253\u9634\u5f71\u7684\u90e8\u5206\u8868\u793a 2 \u4e2a\u73af\u7684\u201c\u6839\u8282\u70b9\u201d</p> <p> </p> \u52a8\u753b\u6f14\u793a <p> </p> <p>\u6700\u574f\u60c5\u51b5\uff1a\u6709 \\(\\lfloor \\dfrac{N}{2} \\rfloor\\) \u4e2a\u73af\uff0c\u9700\u8981 \\(\\lfloor \\dfrac{3N}{2} \\rfloor\\) \u6b21\u79fb\u52a8</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(T = O(mN)\\)\uff0c\u5176\u4e2d m \u4e3a\u7ed3\u6784\u4f53\u7684\u5927\u5c0f</p>"},{"location":"7-x.html#general-lower-bound-for-sorting","title":"General Lower Bound for Sorting","text":"<p>\u5b9a\u7406\uff1a\u4efb\u4f55\u57fa\u4e8e\u6bd4\u8f83\u8fdb\u884c\u6392\u5e8f\u7684\u7b97\u6cd5\uff0c\u5176\u6700\u574f\u60c5\u51b5\u7684\u8ba1\u7b97\u65f6\u95f4\u4e3a\\(\\Omega(N \\log N)\\)</p> \u8bc1\u660e <p>\u5229\u7528\u51b3\u7b56\u6811(decision tree)</p> <p> </p> <p>\u6392\u5e8f N \u4e2a\u5143\u7d20\u4f1a\u4ea7\u751f N! \u4e2d\u4e0d\u540c\u7684\u53ef\u80fd\u60c5\u51b5\uff0c\u56e0\u6b64\u51b3\u7b56\u6811\u81f3\u5c11\u6709 N! \u4e2a\u53f6\u5b50\u8282\u70b9\u3002\u82e5\u6811\u7684\u9ad8\u4e3a k\uff0c\u90a3\u4e48 \\(N! \\le 2^{k-1}\\)\uff0c\u6240\u4ee5\\(k \\ge \\log(N!) + 1\\)</p> <p>\\(\\because N! \\ge (\\dfrac{N}{2})^{\\frac{N}{2}}\\)\uff0c\u5373 \\(\\log_2 N! \\ge \\dfrac{N}{2}\\log_2(\\dfrac{N}{2}) = \\Theta(N \\log_2 N)\\)</p> <p>\\(\\therefore T(N) = k \\ge c \\cdot N \\log_2 N\\)</p> <p>\u4e0b\u9762\u6211\u4eec\u4ecb\u7ecd\u7684\u6392\u5e8f\u7b97\u6cd5\u5e76\u4e0d\u662f\u57fa\u4e8e\u6bd4\u8f83\u7684</p>"},{"location":"7-x.html#bucket-sort","title":"Bucket Sort","text":"<p>\u95ee\u9898</p> <p>\u5047\u8bbe\u6709 N \u4e2a\u5b66\u751f\uff0c\u6bcf\u4e2a\u5b66\u751f\u6709\u4e00\u4e2a\u5728 0-100\uff08\u56e0\u6b64\u6709 M = 101 \u53ef\u80fd\u7684\u4e0d\u540c\u5206\u6570\uff09\u4e4b\u95f4\u7684\u6210\u7ee9\uff0c\u90a3\u4e48\u5982\u4f55\u5728\u7ebf\u6027\u65f6\u95f4\u5185\u6839\u636e\u4ed6\u4eec\u7684\u4e58\u79ef\u8fdb\u884c\u6392\u5e8f\uff1f</p> <p>\u56fe\u793a\uff1a</p> <p>\u4f2a\u4ee3\u7801\uff1a</p> <pre><code>Algorithm\n{\n    initialize count[];\n    while (read in a student's record)\n        insert to list count[stdnt.grade];\n    for (i = 0; i &lt; M; i++)\n    {\n        if (count[i])\n            output list count[i];\n    }\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(T(N, M) = O(M + N)\\)</p> <p>\u5f53 \\(M \\gg N\\) \u65f6\uff0c\u6bd4\u5982 N = 10, M = 1000\uff0c\u5982\u679c\u8fd8\u60f3\u5728\u7ebf\u6027\u65f6\u95f4\u5185\u5b8c\u6210\u6392\u5e8f\uff0c\u6876\u6392\u5e8f\u5c31\u4e0d\u592a\u9760\u8c31\u4e86\u2014\u2014\u800c\u4e0b\u9762\u4ecb\u7ecd\u7684\u57fa\u6570\u6392\u5e8f\u5c06\u80dc\u4efb\u8fd9\u4e00\u95ee\u9898</p>"},{"location":"7-x.html#radix-sort","title":"Radix Sort","text":"<p>\u4f8b\u5b50</p> <p>\u5bf9\u5b8c\u5168\u7acb\u65b9\u6570\u8fdb\u884c\u6392\u5e8f\uff0c\u91c7\u7528\u6700\u4f4e\u4f4d\u4f18\u5148(least significant digit first)\u7684\u7b56\u7565</p> <p> </p> <p>\u6bcf\u4e00\u8d9f\u540e\u7684\u987a\u5e8f\u6309\u4ece\u5de6\u5f80\u53f3\u3001\u4ece\u4e0a\u5f80\u4e0b\u7684\u65b9\u5411\u8bfb\u53d6\uff0c\u6bd4\u5982Pass 2\u540e\u7684\u987a\u5e8f\u4e3a\uff1a0, 1, 8, 512, 216, 125, 27, 729, 343, 64</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(T = O(P(N + B))\\)\uff0c\u5176\u4e2d \\(P\\) \u4e3a\u6392\u5e8f\u7684\u8d9f\u6570(pass)\uff0cN \u4e3a\u5143\u7d20\u4e2a\u6570\uff0cB \u4e3a\u6876\u6570</p> <p>\u5206\u6790</p> <p>\u5047\u8bbe\u8bb0\u5f55 \\(R_i\\) \u6709 r \u4e2a\u952e\uff1a</p> <ul> <li>\\(K_i^j\\)\uff1a\\(R_i\\) \u7684\u7b2c j \u4f4d</li> <li>\\(K_i^0\\)\uff1a\\(R_i\\) \u7684\u6700\u9ad8\u4f4d</li> <li>\\(K_i^{r-1}\\)\uff1a\\(R_i\\) \u7684\u6700\u4f4e\u4f4d</li> </ul> <p>\u5bf9\u4e8e\u5305\u542b\u8bb0\u5f55 \\(R_0, \\dots, R_{n-1}\\) \u7684\u5217\u8868\uff0c\u5982\u679c\u6ee1\u8db3\uff1a</p> \\[ (K_i^0, K_i^1, \\dots, K_i^{r-1}) \\le (K_{i + 1}^0, K_{i + 1}^r, \\dots, K_{i+1}^{r - 1}) \\] <p>\u4e5f\u5c31\u662f\u8bf4\uff1a\\(K_i^0 = K_{i+1}^0, \\dots, K_i^l, = K_{i+1}^l, K_i^{l+1} &lt; K_{i+1}^{l+1},\\ l &lt; r - 1\\) \uff0c\u5219\u79f0\u8be5\u5217\u8868\u5177\u6709\u8bcd\u5178\u5e8f</p> <p>s</p> <p>\u4f8b\u5b50</p> <p>\u5bf9\u4e8e\u4e00\u526f\u6251\u514b\u724c\uff0852 \u5f20\uff09\uff0c\u8981\u6c42\u5982\u4e0b\uff1a</p> <p> </p> \u6cd5\u4e00\uff1a\u6700\u9ad8\u4f4d\u6392\u5e8f\u6cd5\u4e8c\uff1a\u6700\u4f4e\u4f4d\u6392\u5e8f <ul> <li>\u6309 \\(K^0\\) \u6392\u5e8f\uff1a\u6839\u636e\u82b1\u8272\uff0c\u521b\u5efa 4 \u4e2a\u7bee\u5b50</li> </ul> <p> </p> <ul> <li>\u5bf9\u6bcf\u4e2a\u7bee\u5b50\u5355\u72ec\u6392\u5e8f\uff08\u91c7\u53d6\u5408\u7406\u7684\u6392\u5e8f\u65b9\u6cd5\uff09</li> </ul> <p> </p> <ul> <li>\u6309 \\(K^1\\) \u6392\u5e8f\uff0c\u6839\u636e\u9762\u503c\uff0c\u521b\u5efa13\u4e2a\u7bee\u5b50</li> </ul> <p> </p> <ul> <li>\u518d\u5c06\u5b83\u4eec\u6309\u4e0a\u4e00\u6b65\u5206\u51fa\u6765\u7684\u987a\u5e8f\u5408\u5e76\u6210\u4e00\u5806</li> </ul> <p> </p> <ul> <li>\u518d\u521b\u5efa 4 \u4e2a\u6876\uff0c\u91cd\u65b0\u6392\u5e8f</li> </ul>"},{"location":"8-x.html","title":"Chap 8 The Disjoint Set ADT","text":"<p> \u7ea6 1539 \u4e2a\u5b57  100 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 9 \u5206\u949f</p> \u6838\u5fc3\u77e5\u8bc6 <ul> <li>\u7b49\u4ef7\u5173\u7cfb\u3001\u7b49\u4ef7\u7c7b</li> <li>\u6838\u5fc3\u64cd\u4f5c<ul> <li><code>Union</code><ul> <li>Union by Size</li> <li>Union by Height</li> </ul> </li> <li><code>Find</code><ul> <li>\u8def\u5f84\u538b\u7f29</li> </ul> </li> </ul> </li> </ul>"},{"location":"8-x.html#equivalence-relations","title":"Equivalence Relations","text":"<p>\u5b9a\u4e49\uff1a</p> <ul> <li>\u96c6\u5408 \\(S\\) \u7684\u5173\u7cfb(relation)\\(R\\)\uff0c\u5bf9\u4e8e\u6bcf\u5bf9\u5143\u7d20 \\((a ,b), a, b \\in S\\)\uff0c\u5b83\u4eec\u7684\u5173\u7cfb \\(a \\ R\\ b\\)\uff0c\u5982\u679c\u5176\u503c\u4e3a\u771f\uff0c\u90a3\u4e48\u79f0 \\(a\\) \u4e0e \\(b\\) \u76f8\u5173(\\(a\\) is related to \\(b\\))</li> <li> <p>\u5bf9\u4e8e\u96c6\u5408 \\(S\\) \u7684\u4e00\u79cd\u5173\u7cfb \\(\\sim\\)\uff0c\u5982\u679c\u5b83\u6ee1\u8db3\u81ea\u53cd\u6027(reflexive)\u3001\u5bf9\u79f0\u6027(symmetric)\u548c\u4f20\u9012\u6027(transitive)\uff0c\u90a3\u4e48\u79f0\u8fd9\u79cd\u5173\u7cfb\u4e3a\u7b49\u4ef7\u5173\u7cfb(equivalence relation)</p> <ul> <li>\u81ea\u53cd\u6027\uff1a\\(\\forall a \\in S, a\\ R\\ a\\)</li> <li>\u5bf9\u79f0\u6027\uff1a\\(a\\ R\\ b \\leftrightarrow b\\ R\\ a\\)</li> <li>\u4f20\u9012\u6027\uff1a\\((a\\ R\\ b) \\wedge (b\\ R\\ c) \\rightarrow a\\ R\\ c\\)</li> </ul> </li> <li> <p>\u5bf9\u4e8e\u5143\u7d20 \\(a \\in S\\) \u7684\u7b49\u4ef7\u7c7b(equivalence class)\uff0c\u662f\u5305\u542b\u6240\u6709\u4e0e \\(a\\) \u76f8\u5173\u7684\u5143\u7d20\u7684 \\(S\\) \u7684\u5b50\u96c6</p> <p>\u7b49\u4ef7\u7c7b\u76f8\u5f53\u4e8e \\(S\\) \u5185\u7684\u5206\u533a(partition)\uff0c\\(S\\)\u5185\u7684\u6bcf\u4e2a\u5143\u7d20\u4ec5\u51fa\u73b0\u5728\u4e00\u4e2a\u7b49\u4ef7\u7c7b\u4e2d</p> </li> </ul> <p>\u6ce8\uff1a\u7b49\u4ef7\u5173\u7cfb\u7684\u8be6\u7ec6\u77e5\u8bc6\u53c2\u89c1\u79bb\u6563\u6570\u5b66Chap 9</p>"},{"location":"8-x.html#the-dynamic-equivalence-problem","title":"The Dynamic Equivalence Problem","text":"<p>\u95ee\u9898</p> <p>\u7ed9\u5b9a\u7b49\u4ef7\u5173\u7cfb \\(\\sim\\)\uff0c\u5bf9\u4e8e\u4efb\u4f55\u7684 \\(a, b\\)\uff0c\u5224\u65ad \\(a \\sim b\\) \u662f\u5426\u6210\u7acb</p> <p>\ud83c\udf30</p> <p>\u7b97\u6cd5\u2014\u2014\u5e76\u67e5\u96c6(Union/Find, the disjoint set)\uff0c\u8fd9\u662f\u4e00\u79cd\u52a8\u6001\u7684(dynamic)\uff0c\u5728\u7ebf(on-line)\u7b97\u6cd5</p> <p>\u52a8\u6001\uff1a\u5728\u7b97\u6cd5\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c<code>Union()</code> \u4f1a\u968f\u65f6\u66f4\u65b0\u96c6\u5408</p> <p>\u4f2a\u4ee3\u7801\u6a21\u7248\uff1a</p> <p><pre><code>Algorithm: (Union / Find)\n{\n    // step 1: read the relations in\n    initialize N disjoint sets;\n    while (read in a~b)\n    {\n        if (!(Find(a) == Find(b)))\n            Union the two sets;\n    } // end-while\n    // step 2: decide if a~b\n    while (read in a and b)\n        if (Find(a) == Find(b))\n            output(true) ;\n        else\n            output(false);\n}\n</code></pre> \u5e76\u67e5\u96c6\u7684\u5c5e\u6027\uff1a</p> <ul> <li> <p>\u96c6\u5408\u7684\u5143\u7d20(elements)\uff1a\\(1, 2, 3, \\dots, N\\)</p> <p>\u521d\u59cb\u72b6\u6001\uff1a\u6709\\(N\\)\u4e2a\u96c6\u5408\uff0c\u6bcf\u4e2a\u96c6\u5408\u4ec5\u67091\u4e2a\u5143\u7d20</p> </li> <li> <p>\u5bf9\u4e8e\u4e00\u7ec4\u96c6\u5408 \\(S_1, S_2, \\dots \\dots\\)\uff0c\u5982\u679c\u6ee1\u8db3 \\(S_i \\cap S_j = \\emptyset(i \\ne j)\\)\uff0c\u79f0\u8fd9\u4e9b\u96c6\u5408\u4e3a\u4e0d\u76f8\u4ea4(disjoint)</p> <p>\u5982\u4f55\u5728\u7a0b\u5e8f\u4e2d\u8868\u793a\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\uff1f\u2014\u2014\u6811\uff0c\u5e76\u6ce8\u610f\u201c\u6307\u9488\u201d\u5e94\u4ece\u5b69\u5b50\u8282\u70b9\u6307\u5411\u7236\u8282\u70b9</p> </li> <li> <p>\u8fd0\u7b97(operations)</p> <ul> <li><code>Union(i, j)</code>\uff1a \u7528 \\(S = S_i \\cup S_j\\) \u53d6\u4ee3 \\(S_i\\) \u548c \\(S_j\\)</li> <li><code>Find(i)</code>\uff1a\u627e\u5230\u5305\u542b\u5143\u7d20 \\(i\\) \u7684\u96c6\u5408 \\(S_k\\)</li> </ul> </li> </ul>"},{"location":"8-x.html#basic-data-structure","title":"Basic Data Structure","text":"<pre><code>// Declaration\n#ifndef _DisjSet_H\n\ntypedef int DisjSet[NumSet + 1];\ntypedef int SetType;\ntypedef int ElementType;\n\nvoid Initialize(DisjSet S);\nvoid SetUnion(DisjSet S, SetType Root1, SetType Root2);\nSetType Find(ElementType X, DisjSet S);\n\n#endif // _DisjSet_H\n</code></pre>"},{"location":"8-x.html#unioni-j","title":"Union(i, j)","text":"<p>\u601d\u8def</p> <p>\u4ee4 \\(S_i\\) \u4e3a \\(S_j\\) \u7684\u5b50\u6811\uff08\u53cd\u8fc7\u6765\u4e5f\u884c\uff09\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5c06\u5176\u4e2d\u4e00\u68f5\u6811\u7684\u6839\u8282\u70b9\u6307\u5411\u53e6\u4e00\u68f5\u6811\u7684\u6839\u8282\u70b9</p> <p>\u5b9e\u73b0\u65b9\u6cd5</p> \u65b9\u6cd51\u2014\u2014\u6570\u7ec4+\u6307\u9488\u65b9\u6cd52\u2014\u2014\u5229\u7528\u6570\u7ec4\u7684\u7d22\u5f15 <p> </p> \\[ S[i] = \\begin{cases}\\text{the element's parent} &amp;,\\ \\text{if the element isn't a root} \\\\ 0 &amp;,\\ \\text{if the element is a root}\\end{cases} \\] <p>\u6ce8\uff1a\u7d22\u5f15\u4ece 1 \u5f00\u59cb</p> \u4f8b\u5b50 \u53d8\u5316\u524d\u53d8\u5316\u540e <p> </p> <p> </p> <p>\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <pre><code>void Initialize(DisjSet S)\n{\n    int i;\n\n    for (i = NumSets; i &gt; 0; i--)\n        S[i] = 0;\n}\n</code></pre> <p><pre><code>void SetUnion(DisSet S, SetType Rt1, SetType Rt2)\n{\n    S[Rt2] = Rt1;\n}\n</code></pre> \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(1)\\)</p>"},{"location":"8-x.html#findi","title":"Find(i)","text":"<p>\u5b9e\u73b0\u65b9\u6cd5</p> \u65b9\u6cd51\u65b9\u6cd52 <p>\u6811\u7684\u8282\u70b9\u6709\u4e00\u4e2a <code>parent</code> \u5b57\u6bb5\uff0c\u5229\u7528\u5b83\u5f97\u5230\u6574\u68f5\u6811\u7684\u6839\u8282\u70b9\uff08\u8fd8\u662f\u4e0d\u63a8\u8350\u274c\uff09</p> <p> </p> <p>\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <pre><code>SetType Find(ElementType X, DisSet S)\n{\n    for (; S[X] &gt; 0; X = S[X]);\n    return X;\n}\n</code></pre> <p>\uff08\u6700\u574f\u60c5\u51b5\uff09\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(N)\\)\uff08\u4e0e\\(X\\)\u7684\u6df1\u5ea6\u6709\u5173\uff0c\\(N\\)\u4e3a\u6574\u4e2a\u5e76\u67e5\u96c6\u7684\u8282\u70b9\u4e2a\u6570\uff09</p>"},{"location":"8-x.html#analysis","title":"Analysis","text":"<p>\u56e0\u4e3a <code>union()</code> \u548c <code>find()</code> \u64cd\u4f5c\u5f80\u5f80\u662f\u6210\u5bf9\u51fa\u73b0\u7684\uff0c\u56e0\u6b64\u8981\u5206\u6790\u8be5\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\uff0c\u9700\u8981\u8003\u8651\u6267\u884c\u4e00\u7cfb\u5217\u7684 <code>union()</code> + <code>find()</code> \u8fd0\u7b97</p> <p>\u4ee3\u7801\u5b9e\u73b0\u5b8c\u6574\u7684\u5e76\u67e5\u96c6\u64cd\u4f5c\uff1a</p> <pre><code>// \u4f7f\u7528\u4e0a\u8ff0\u7b97\u6cd5\u5b9e\u73b0\u7684\u5e76\u67e5\u8fd0\u7b97\n{\n    Initialize S[i] = {i} for i = 1,..., 12;\n    for (k = 1; k &lt;= Size; k++) // \u5bf9\u4e8e\u6bcf\u4e00\u5bf9i~j\n        if (Find(i) != Find(j))\n            SetUnion(Find(i), Find(j));\n}\n</code></pre> <p>\u6ce8\uff1a\u8bb0\u5f97\u5728\u8c03\u7528 <code>Union()</code> \u51fd\u6570\u524d\uff0c\u4e00\u5b9a\u8981\u5148\u8c03\u7528 <code>Find()</code> \u627e\u5230\u5143\u7d20\u6240\u5728\u96c6\u5408\uff08\u6811\uff09\u7684\u6839\u8282\u70b9\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u5408\u5e76 2 \u4e2a\u5b8c\u6574\u7684\u5e76\u67e5\u96c6\uff0c\u800c\u4e0d\u662f 2 \u4e2a\u8282\u70b9\u3002</p> <p>\u8003\u8651\u6700\u574f\u60c5\u51b5\uff1a<code>union(2, 1), find(1); union(3, 2), find(2); ...... union(N, N - 1), find(1);</code>\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u6700\u7ec8\u4f7f\u4e00\u68f5\u6811\u9000\u5316\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u6b64\u65f6\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(\\Theta(N^2)\\)</p>"},{"location":"8-x.html#smart-union-algorithms","title":"Smart Union Algorithms","text":""},{"location":"8-x.html#union-by-size","title":"Union-by-Size","text":"<p>\u6839\u636e\u89c4\u6a21(size)\u5408\u5e76\u6811\uff1a\u603b\u662f\u5c06\u89c4\u6a21\u5c0f\u7684\u6811\u5408\u5e76\u5230\u89c4\u6a21\u5927\u7684\u6811\u4e0a\uff0c\u4ee4 <code>S[Root] = -size</code>\uff0c\u521d\u59cb\u5316\u4e3a -1</p> <p>\u5f15\u7406\uff1a\u4ee4\u6811 \\(T\\) \u4e3a\u901a\u8fc7 union-by-size \u65b9\u6cd5\u6784\u9020\u51fa\u7684\uff0c\u4e14\u6709 \\(N\\) \u4e2a\u8282\u70b9\uff0c\u5219\uff1a</p> \\[ \\mathrm{height}(T) \\le \\lfloor \\log_2N \\rfloor + 1 \\] <p>\u8bc1\u660e\uff1a\u5229\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5</p> <p>\u56e0\u6b64 <code>Find()</code> \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53d8\u4e3a \\(O(\\log N)\\)</p> <p>\u6574\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(N + M \\log N)\\)\uff08\u8fdb\u884c \\(N\\) \u6b21\u5408\u5e76\u64cd\u4f5c\u548c \\(M\\) \u6b21\u67e5\u627e\u64cd\u4f5c\u540e\uff09</p> <p>\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <pre><code>void SetUnion(DisjSet S, SetType Root1, SetType Root2)\n{\n    if (Root1 == Root2)         // \u5982\u679c\u662f\u540c\u4e00\u68f5\u6811\uff0c\u5565\u90fd\u4e0d\u7528\u505a\n        return;\n    if (S[Root2] &lt; S[Root1])    // \u5982\u679c Root2 \u5bf9\u5e94\u6811\u7684\u89c4\u6a21\u66f4\u5927\n    {\n        S[Root2] += S[Root1];\n        S[Root1] = Root2;\n    }\n    else                        // \u5982\u679c Root1 \u5bf9\u5e94\u6811\u7684\u89c4\u6a21\u66f4\u5927\n    {\n        S[Root1] += S[Root2];\n        S[Root2] = Root1;\n    }\n}\n</code></pre>"},{"location":"8-x.html#union-by-heightrank","title":"Union-by-Height(rank)","text":"<p>\u6839\u636e\u9ad8\u5ea6(height)\u5408\u5e76\u6811\uff1a\u603b\u662f\u5c06\u77ee\u7684\u90a3\u68f5\u6811\u5408\u5e76\u5230\u9ad8\u7684\u90a3\u68f5\u6811\u4e0a\uff0c\u56e0\u6b64\u6bcf\u6b21 <code>Union()</code> \u540e\u6811\u7684\u9ad8\u5ea6\u6700\u591a\u589e\u52a01\uff08\u5f532\u68f5\u6811\u9ad8\u5ea6\u76f8\u540c\u65f6\uff09\u3002\u4ee4 <code>S[Root] = -height</code>\uff0c\u521d\u59cb\u5316\u4e3a -1</p> <p>\u4ee3\u7801\u5b9e\u73b0\uff1a <pre><code>void SetUnion(DisjSet S, SetType Root1, SetType Root2)\n{\n    if (S[Root2] &lt; S[Root1])\n        S[Root1] = Root2;\n    else\n    {\n        if (S[Root1] == S[Root2])\n            S[Root1]--;\n        S[Root2] = Root1;\n    }\n}\n</code></pre></p>"},{"location":"8-x.html#path-compression","title":"Path Compression","text":"<p>\u7ecf\u8fc7\u4e0a\u8ff0\u6539\u8fdb\uff0c<code>Union</code> \u7b97\u6cd5\u7684\u6027\u80fd\u5df2\u7ecf\u4e0d\u80fd\u518d\u63d0\u5347\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u8003\u8651\u6539\u8fdb <code>Find</code> \u7b97\u6cd5\u3002\u4e8e\u662f\u6211\u4eec\u4fbf\u7528\u5230\u4e86\u8def\u5f84\u538b\u7f29(path compression)\u7684\u65b9\u6cd5\u2014\u2014\u5bf9\u4e8e\u4ece\u6839\u8282\u70b9\u5230 \\(X\\) \u8def\u5f84\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u5c06\u5b83\u7684\u7236\u8282\u70b9\u8bbe\u4e3a\u6839\u8282\u70b9</p> <p>\u793a\u610f\u56fe\uff1a</p> \u4ee3\u7801\u5b9e\u73b0 \u9012\u5f52\u7248\u8fed\u4ee3\u7248 <pre><code>// algorithm1--recursion\nSetType Find(ElementType X, DisSet S)\n{\n    if (S[X] &lt;= 0)\n        return X;\n    else\n        // \u8ba9 X \u7684\u7236\u8282\u70b9\u4e3a X \u539f\u6765\u7236\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u8fd9\u6837\u7684\u6700\u7ec8\u6548\u679c\u662f\uff1a\n        // \u4ece\u6839\u8282\u70b9\u5230 X \u7684\u8def\u5f84\u4e0a\uff0c\u9664\u6839\u8282\u70b9\u5916\u7684\u6240\u6709\u8282\u70b9\u7684\u7236\u8282\u70b9\u5747\u4e3a\u6839\u8282\u70b9\uff0c\u5b9e\u73b0\u8def\u5f84\u538b\u7f29\n        return S[X] = Find(S[X], S);\n}\n</code></pre> <pre><code>// algorithm2--iteration\nSetType Find(ElementType X, DisSet S)\n{\n    ElementType root, trail, lead;  // trail \u8868\u793a\u5f53\u524d\u5904\u7406\u7684\u8282\u70b9\uff0clead \u8868\u793a\u4e0b\u4e00\u4e2a\u8981\u5904\u7406\u7684\u8282\u70b9\n    for (root = X; S[root] &gt; 0; root = S[root]); // find the root\n    for (trail = X; trail != root; trail = lead)\n    // \u5c06\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\u7684\u7236\u8282\u70b9\u90fd\u8bbe\u4e3a\u6839\u8282\u70b9\n    {\n        lead = S[trail];\n        S[trail] = root;\n    } // collapsing\n    return root\n}\n</code></pre> <ul> <li>\u867d\u7136\u8fd9\u79cd\u7b97\u6cd5\u76f8\u8f83\u4e8e\u4e0a\u4e00\u79cd\uff0c\u67e5\u627e\u5355\u4e2a\u5143\u7d20\u7684\u901f\u5ea6\u53d8\u6162\uff08\u56e0\u4e3a\u591a\u4e86\u4e00\u6b21\u8d4b\u503c\uff09\uff1b\u4f46\u662f\u5bf9\u4e8e\u67e5\u627e\u6574\u4e2a\u5e8f\u5217\u7684\u5143\u7d20\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u7684\u901f\u5ea6\u66f4\u5feb\uff08\u56e0\u4e3a\u591a\u51fa\u6765\u7684\u8d4b\u503c\u538b\u7f29\u4e86\u6574\u68f5\u6811\uff0c\u5bf9\u4e8e\u9891\u7e41\u7684\u5408\u5e76\u64cd\u4f5c\u663e\u7136\u662f\u6709\u5229\u7684\uff09</li> <li>\u8be5\u65b9\u6cd5\u4e0e union-by-height \u7684\u65b9\u6cd5\u4e0d\u517c\u5bb9\uff0c\u56e0\u4e3a\u6811\u7684\u9ad8\u5ea6\u53d1\u751f\u6539\u53d8\u3002\u6240\u4ee5\u63a8\u8350\u4f7f\u7528 union-by-size</li> </ul>"},{"location":"8-x.html#worst-case-for-union-by-rank-and-path-compression","title":"Worst Case for Union-by-Rank and Path Compression","text":"<p>\u5e76\u67e5\u96c6\u7684\u5b9e\u73b0\u8f83\u4e3a\u7b80\u5355\uff0c\u4f46\u8981\u5206\u6790\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u76f8\u5f53\u56f0\u96be\u3002\u4e0b\u9762\u7684\u5185\u5bb9\u4ec5\u4f9b\u53c2\u8003\uff0c\u8003\u8bd5\u4e0d\u505a\u8981\u6c42\u3002</p> <p>\u5f15\u7406\uff1a\u4ee4 \\(T(M, N)\\) \u4e3a\u5904\u7406\u6df7\u5408\u8fd0\u7b97 \\(M \\ge N\\) \u67e5\u627e\u8fd0\u7b97\u548c \\(N - 1\\) \u6b21\u5408\u5e76\u8fd0\u7b97\u7684\u6240\u9700\u6700\u5927\u65f6\u95f4\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6b63\u5e38\u6570 \\(k_1, k_2\\)\uff1a $$ k_1M \\alpha(M, N) \\le T(M, N) \\le k_2M \\alpha(M, N) $$ \u5373\u5e76\u67e5\u96c6\u6700\u574f\u60c5\u51b5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a\\(\\Theta(M\\alpha (M, N))\\)</p> <p>\u963f\u514b\u66fc\u51fd\u6570(Ackermann's Function)\uff1a\\(\\alpha (M, N)\\)</p> \\[ A(i, j) = \\begin{cases} 2^j &amp; i = 1 \\text{ and } j \\ge 1 \\\\ A(i - 1, 2) &amp; i \\ge 2 \\text{ and } j = 1 \\\\ A(i - 1, A(i, j - 1)) &amp; i \\ge 2 \\text{ and } j \\ge 2 \\end{cases} \\] <p>\u6ce8\uff1a\u5373\u4f7f\\(i, j\\)\u6570\u5b57\u5f88\u5c0f\uff0c\\(A(i, j)\\)\u7ed3\u679c\u53ef\u80fd\u4e5f\u975e\u5e38\u5927\uff0c\u6bd4\u5982\\(A(2, 4) = 2^{65536}\\)</p> <p>\\(\\alpha (M, N) = \\min\\{ i\\ge 1 | A(i, \\lfloor M / N \\rfloor )&gt; \\log N\\} \\le O(\\log^* N) \\le 4\\)</p> <p>\u5176\u4e2d \\(\\log^*N\\) \u662f\u963f\u514b\u66fc\u51fd\u6570\u7684\u53cd\u51fd\u6570\uff0c\u4ee3\u8868\u7528\u4e8e \\(N\\) \u7684\u5bf9\u6570\u7684\u6b21\u6570\uff0c\u4f7f\u5176\u6700\u7ec8\u7ed3\u679c \\(\\le 1\\)\u3002\u6bd4\u5982\u4e0a\u4f8b\u4e2d\\(\\log^* 2^{65536} = 5\\)\uff0c\u56e0\u4e3a \\(\\log\\log\\log\\log\\log(2^{65536}) = 1\\)</p> <p>\u53c2\u8003\u8d44\u6599\uff1a\u963f\u514b\u66fc\u51fd\u6570\u7684\u8be6\u7ec6\u4ecb\u7ecd</p>"},{"location":"8-x.html#an-application","title":"An Application","text":"<p>\u5e94\u7528\uff1a\u8ba1\u7b97\u673a\u7f51\u7edc\u4e2d\u7684\u6587\u4ef6\u4f20\u8f93\uff08\u5177\u4f53\u5185\u5bb9\u89c1\u8bfe\u672c \\(P_{279}\\)\uff0c\u4e5f\u53ef\u4ee5\u770b\u770b\u4e0b\u9762\u7684\u7f16\u7a0b\u9898\uff09</p> <p>\u540e\u7eed\u7ae0\u8282\u4e2d\u4f1a\u6709\u66f4\u597d\u7684\u5e94\u7528</p>"},{"location":"9-x.html","title":"Chap 9 Graph Algorithm","text":"<p> \u7ea6 6991 \u4e2a\u5b57  493 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 41 \u5206\u949f</p> \u6838\u5fc3\u77e5\u8bc6 <ul> <li>\u56fe\u7684\u5b9a\u4e49\u3001\u6027\u8d28\u3001\u8868\u793a\u6cd5</li> <li>\u62d3\u6251\u6392\u5e8f\uff08AOV\u7f51\uff09</li> <li>\u6700\u77ed\u8def\u95ee\u9898<ul> <li>\u65e0\u6743</li> <li>\u5e26\u6b63\u8fb9\u6743\uff1aDijkstra \u7b97\u6cd5</li> <li>\u6709\u8d1f\u8fb9\u6743</li> <li>AOE\u7f51</li> </ul> </li> <li>\u7f51\u7edc\u6d41<ul> <li>\u89e3\u9898\uff1a\u6d41\u91cf\u56fe\u3001\u6b8b\u91cf\u56fe</li> </ul> </li> <li>\u6700\u5c0f\u751f\u6210\u6811(MST)<ul> <li>Prim\u7b97\u6cd5</li> <li>Kruskal\u7b97\u6cd5</li> </ul> </li> <li>\u6df1\u5ea6\u4f18\u5148\u641c\u7d22(DFS)<ul> <li>\u57fa\u672c\u7b97\u6cd5</li> <li>\u5173\u8282\u70b9\uff08\u5272\u70b9\uff09\u3001\u53cc\u8fde\u901a\u5206\u91cf</li> <li>\u6b27\u62c9\u8def\u3001\u6b27\u62c9\u73af</li> </ul> </li> </ul> <p>\u8be6\u7ec6\u7684\u56fe\u8bba\u77e5\u8bc6\u89c1\u79bb\u6563\u6570\u5b66\u540c\u540d\u7ae0\u8282</p>"},{"location":"9-x.html#definitions","title":"Definitions","text":"<ul> <li>G(V, E)\uff1a\\(G\\) \u8868\u793a\u56fe(graph)\uff0c\\(V = V(G)\\) \u8868\u793a\u5173\u4e8e\u9876\u70b9(vertices)\u7684\u6709\u9650\u975e\u7a7a\u96c6\u5408\uff0c\\(E = E(G)\\) \u8868\u793a\u5173\u4e8e\u8fb9(edges/arcs)\u7684\u6709\u9650\u96c6\u5408</li> <li>\u65e0\u5411\u56fe(undirected graph)\uff1a\\((v_i, v_j) = (v_j, v_i)\\) \u8868\u793a\u76f8\u540c\u7684\u8fb9</li> <li>\u6709\u5411\u56fe(directed graph, digraph)\uff1a\\(&lt;v_i, v_j&gt; \\ne &lt;v_j, v_i&gt;\\)</li> </ul> \\(&lt;v_i, v_j&gt;\\) \u9650\u5236 <ul> <li> <p>\u81ea\u73af(self loop)\u662f\u975e\u6cd5\u7684</p> <p> </p> </li> <li> <p>\u4e0d\u8003\u8651\u591a\u91cd\u56fe(multigraph)\uff08\u4e24\u4e2a\u8282\u70b9\u95f4\u6709\u591a\u6761\u8fb9\uff09\u7684\u60c5\u51b5</p> <p> </p> </li> </ul> <ul> <li> <p>\u5b8c\u5168\u56fe(complete graph)\uff1a\u56fe\u4e0a\u4efb\u610f\u4e24\u70b9\u95f4\u90fd\u6709\u4e00\u6761\u8fb9</p> <ul> <li> <p>\u65e0\u5411\u56fe\uff1a\\(V = n \\quad E = C^2_n = \\frac{n(n - 1)}{2}\\)</p> <p> </p> </li> <li> <p>\u6709\u5411\u56fe\uff1a\\(V = n \\quad E = P^2_n = n(n - 1)\\)</p> <p> </p> </li> </ul> </li> <li> <p>\u90bb\u63a5(adjacent)</p> <ul> <li> <p>\u65e0\u5411\u56fe\uff1a\u5982\u679c\\((v_i, v_j)\\)\u5b58\u5728\uff0c\u5219\u79f0\\(v_i, v_j\\)\u662f\u90bb\u63a5\u7684</p> <p> </p> </li> <li> <p>\u6709\u5411\u56fe\uff1a\u5982\u679c\\(&lt;v_i, v_j&gt;\\)\u5b58\u5728\uff0c\u5219\u79f0\\(v_i\\) to \\(v_j\\)\u662f\u90bb\u63a5\u7684\uff0c\u6216\u8005\u8bf4\\(v_j\\) from \\(v_i\\)\u662f\u90bb\u63a5\u7684</p> <p> </p> </li> </ul> </li> <li> <p>\u5b50\u56fe(subgraph) \\(G' \\subset G\\)\uff0c\\(V(G') \\subseteq V(G)\\) \u4e14 \\(E(G') \\subseteq E(G)\\)</p> </li> <li>\u4ece\\(v_p\\)\u5230\\(v_q\\)\u7684\u8def\u5f84(path)(\\(\\subset G\\))\uff1a\\(\\{v_p, v_{i1}, v_{i2}, \\dots, v_{in}, v_q\\}\\)\uff0c\u6ee1\u8db3 \\((v_p, v_{i1}), (v_{i1}, v_{i2}), \\dots, (v_{in}, v_q)\\) \u6216\u8005 \\(&lt;v_p, v_{i1}&gt;, &lt;v_{i1}, v_{i2}&gt;, \\dots, &lt;v_{in}, v_q&gt; \\subset E(G)\\)</li> <li>\u8def\u5f84\u7684\u957f\u5ea6(length)\uff1a\u8def\u5f84\u4e0a\u8fb9\u7684\u6761\u6570</li> <li>\u7b80\u5355\u8def\u5f84(simple path)\uff1a\u5bf9\u4e8e\u4e0a\u8ff0\u8def\u5f84\uff0c\\(v_{i1}, v_{i2}, \\dots, v_{in}\\) \u662f\u4e0d\u540c\u7684(\u4e0d\u4f1a\u591a\u6b21\u7ecf\u8fc7\u540c\u4e00\u9876\u70b9)</li> <li>\u73af(cycle)\uff1a\u5bf9\u4e8e\u4e00\u6761\u7b80\u5355\u8def\u5f84\uff0c\u8d77\u70b9\u4e0e\u7ec8\u70b9\u76f8\u540c\uff0c\u5373 \\(v_p = v_q\\)</li> <li> <p>\u8fde\u901a(connected)</p> <ul> <li> <p>\u65e0\u5411\u56fe\uff1a</p> <ul> <li>\u5bf9\u4e8e\u4e24\u4e2a\u9876\u70b9 \\(v_i, v_j\\) \u800c\u8a00\uff0c\u5982\u679c\u5b83\u4eec\u4e4b\u95f4\u5b58\u5728\u4e00\u6761\u8def\u5f84\uff0c\u5219\u79f0\u5b83\u4eec\u662f\u8fde\u901a\u7684</li> <li>\u5bf9\u4e8e\u6574\u5f20\u65e0\u5411\u56fe \\(G\\) \u800c\u8a00\uff0c\u5982\u679c\u56fe\u5185\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u76f8\u4e92\u8fde\u901a\uff0c\u5219\u79f0\u6574\u5f20\u56fe\u662f\u8fde\u901a\u7684 <p>\u5bf9\u4e8e \\(n\\) \u4e2a\u9876\u70b9\u7684\u65e0\u5411\u56fe\uff0c\u6700\u5c11\u9700\u8981 \\(n - 1\\) \u6761\u8fb9\u6765\u5b9e\u73b0\u6574\u5f20\u56fe\u7684\u8fde\u901a</p> </li> <li>\u65e0\u5411\u56fe \\(G\\) \u7684\uff08\u8fde\u901a\uff09\u5206\u91cf(component)\uff1a\u6781\u5927\u8fde\u901a\u5b50\u56fe\uff08\u4e00\u5f20\u56fe\u4e2d\u53ef\u80fd\u6709\u591a\u4e2a\u8fde\u901a\u5206\u91cf\uff09</li> <li>\u6811\u662f\u8fde\u901a\u4e14\u65e0\u73af(acyclic)\u7684\u56fe</li> </ul> </li> <li> <p>\u6709\u5411\u56fe\uff1a</p> <ul> <li>\u6709\u5411\u65e0\u73af\u56fe(directed acyclic graph, DAG)</li> <li>\u5f3a\u8fde\u901a(strongly connected)\u6709\u5411\u56fe \\(G\\)\uff1a\u5bf9\u4e8e \\(V(G)\\) \u4e2d\u7684\u6bcf\u5bf9\u9876\u70b9 \\(v_i, v_j\\)\uff0c\u5b58\u5728\u4ece \\(v_i\\) \u5230 \\(v_j\\) \u4ee5\u53ca\u4ece \\(v_j\\) \u5230 \\(v_i\\) \u7684\u6709\u5411\u8def\u5f84</li> <li> <p>\u5f31\u8fde\u901a(weakly connected)\u6709\u5411\u56fe\uff1a\u5728\u4e0d\u8003\u8651\u65b9\u5411\u7684\u60c5\u51b5\u4e0b\uff08\u5373\u65e0\u5411\u56fe\uff09\uff0c\u6574\u5f20\u56fe\u662f\u8fde\u901a\u7684\uff08\u5373\u5bf9\u4e8e \\(V(G)\\) \u4e2d\u7684\u6bcf\u5bf9\u9876\u70b9 \\(v_i, v_j\\)\uff0c\u5b58\u5728\u4ece \\(v_i\\) \u5230 \\(v_j\\) \u6216 \u4ece \\(v_j\\) \u5230 \\(v_i\\) \u7684\u6709\u5411\u8def\u5f84\uff09</p> <p>\u5bf9\u4e8e \\(n\\) \u4e2a\u9876\u70b9\u7684\u5f31\u8fde\u901a\u6709\u5411\u56fe\uff0c\u6700\u5c11\u9700\u8981 \\(n - 1\\) \u6761\u8fb9\u6765\u5b9e\u73b0\u6574\u5f20\u56fe\u7684\u8fde\u901a</p> </li> <li> <p>\u5f3a\u8fde\u901a\u5206\u91cf(strongly connected component)\uff1a\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe</p> </li> <li>\u5f31\u8fde\u901a\u5206\u91cf(weakly connected component)\uff1a\u6781\u5927\u5f31\u8fde\u901a\u5b50\u56fe</li> </ul> </li> </ul> </li> <li> <p>\u5ea6(degree)\uff1a\\(\\mathrm{degree}(v)\\)\uff0c\u4e0e\u9876\u70b9v\u76f8\u8fde\u7684\u8fb9\u6570</p> <p>\u5bf9\u4e8e\u4e00\u4e2a\u6709\u5411\u56fe \\(G\\) \u800c\u8a00\uff0c\u5ea6\u5206\u4e3a\u5165\u5ea6(in-degree)\u548c\u51fa\u5ea6(out-degree)\uff0c\u4f8b\u5982\uff1a</p> <p> </p> <p>\u5047\u5982 \\(G\\) \u6709 \\(v\\) \u4e2a\u9876\u70b9\u548c \\(e\\) \u6761\u8fb9\uff0c\u90a3\u4e48 \\(e = \\dfrac{\\sum\\limits_{i = 0}^{n - 1}d_i}{2}\\)\uff0c\u5176\u4e2d \\(d_i = \\text{degree}(v_i)\\)\uff08\u63e1\u624b\u5b9a\u7406\uff09</p> <p>\u5bf9\u4e8e\u6709\u5411\u56fe\u800c\u8a00\uff0c\u6240\u6709\u9876\u70b9\u5165\u5ea6\u4e4b\u548c = \u6240\u6709\u9876\u70b9\u51fa\u5ea6\u4e4b\u548c</p> </li> </ul>"},{"location":"9-x.html#representation-of-graph","title":"Representation of Graph","text":"<p>\u6cd5\u4e00\uff1a\u90bb\u63a5\u77e9\u9635(adjacency matrix)</p> <p>\u5bf9\u4e8e\u4e00\u5f20\u5177\u6709 \\(n(n \\ge 1)\\) \u4e2a\u8282\u70b9\u7684\u56fe \\(G(V, E)\\)\uff0c\u5b9a\u4e49\u90bb\u63a5\u77e9\u9635 \\(adj\\_mat [i] [j]\\)\u4e3a</p> \\[ adj\\_mat[i][j] = \\begin{cases}1 &amp; \\text{if } (v_i, v_j) \\text{ or } &lt;v_i, v_j&gt; \\in E(G) \\\\ 0 &amp; \\text{otherwise}\\end{cases} \\] <p>\u6240\u4ee5\u4e5f\u5c31\u6709\uff1a</p> \\[ \\text{degree}(i) = \\begin{cases}\\sum\\limits_{j = 0}^{n - 1} adj\\_mat[i][j] &amp; \\text{if G is undirected} \\\\ \\sum\\limits_{j = 0}^{n - 1} adj\\_mat[i][j] + \\sum\\limits_{j = 0}^{n - 1}adj\\_mat[j][i] &amp; \\text{if G is directed} \\end{cases} \\] <p>\u4e0d\u96be\u770b\u51fa\uff0c\u5982\u679c\\(G\\)\u662f\u65e0\u5411\u7684\uff0c\u5219\u8be5\u90bb\u63a5\u77e9\u9635\u662f\u5bf9\u79f0\u7684\uff0c\u56e0\u6b64\u6d6a\u8d39\u4e86\u4e00\u534a\u7684\u7a7a\u95f4\u548c\u65f6\u95f4\uff08\u590d\u6742\u5ea6\uff1a\\(\\Theta(|V|^2)\\)\uff09\uff0c\u4f46\u662f\u7528\u5728\u7a20\u5bc6(dense)\u56fe\uff08\\(|E| = \\Theta(|V|^2)\\)\uff09\u4e2d\u662f\u6bd4\u8f83\u5408\u9002\u7684\u3002</p> <p>\u6539\u8fdb\u63aa\u65bd\uff1a\u901a\u8fc7\u5c06\u4e0b\u4e09\u89d2\u77e9\u9635\u5b58\u5165\u4e00\u7ef4\u6570\u7ec4\u4e2d\uff0c\u8282\u7701\u4e86\u4e00\u534a\u7684\u7a7a\u95f4</p> <p>\\(adj\\_mat[n(n+1)/2] = \\{a_{11}, a_{21}, \\dots, a_{n1}, \\dots, a_{nn}\\}\\)\uff0c\u5176\u4e2d \\(a_{ij}\\) \u7684\u7d22\u5f15\u4e3a \\(\\dfrac{i(i-1)}{2} + j\\)</p> <p>\u6cd5\u4e8c\uff1a\u90bb\u63a5\u8868(adjacency lists)</p> \u4f8b\u5b50 <p>\u5982\u4f55\u5b58\u50a8\u8fd9\u5f20\u56fe\uff1f</p> <p> </p> \u90bb\u63a5\u77e9\u9635\u90bb\u63a5\u8868 \\[adj\\_mat = \\begin{bmatrix}0 &amp; 1 &amp; 0 \\\\ 1 &amp; 0 &amp; 1 \\\\ 0 &amp; 0 &amp; 0\\end{bmatrix}\\] <p> </p> <p>\u6ce8\uff1a\u8282\u70b9\u7684\u987a\u5e8f\u5e76\u4e0d\u91cd\u8981</p> <p>\u5bf9\u4e8e\u65e0\u5411\u56fe \\(G\\)\uff0c\u90bb\u63a5\u8868\u7684\u7a7a\u95f4 \\(S = n\\) \u4e2a\u5934 + \\(2e\\)\u4e2a\u8282\u70b9 = \\((n + 2e)\\)\u4e2a\u6307\u9488 + \\(2e\\)\u4e2a\u6574\u578b</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6 \\(T = E(G) = O(|V| + |E|)\\)\uff0c\u9002\u7528\u4e8e\u7a00\u758f(sparse)\u56fe(\\(|E| &lt; \\Theta(|V|^2)\\))\u4e2d</p> <p>\u6ce8\uff1a\u4e8b\u5b9e\u4e0a\uff0c\u90bb\u63a5\u8868\u53ef\u4ee5\u80dc\u4efb\u5404\u79cd\u56fe\u7684\u5b58\u50a8</p> <p>\u5982\u4f55\u8ba1\u7b97\u67d0\u4e2a\u9876\u70b9\u7684\u5ea6</p> \u65e0\u5411\u56fe\u6709\u5411\u56fe <p>Degree(i) = graph[i]\u4e2d\u8282\u70b9\u7684\u4e2a\u6570</p> <p>\u6211\u4eec\u9700\u8981\u627e\u5230in-degree(i)</p> <ul> <li> <p>\u6cd5 1\uff1a\u201c\u9006\u8f6c\u201d\u90bb\u63a5\u94fe\u8868</p> <p> </p> </li> <li> <p>\u6cd5 2\uff1a\u7528\u591a\u94fe\u8868(multilist)\u8868\u793a\u90bb\u63a5\u77e9\u9635\\(adj\\_mat[i][j]\\)</p> <p> </p> </li> </ul> <p>\u4f17\u6240\u5468\u77e5\uff0c\u591a\u94fe\u8868\u5b9e\u73b0\u76f8\u5f53\u590d\u6742\uff0c\u56e0\u6b64\u66f4\u63a8\u8350\u6cd5 1</p> \u8865\u5145 <p>\u6709\u65f6\u9876\u70b9\u7684\u503c\u4e0d\u4e00\u5b9a\u662f\u6574\u6570\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u5b57\u7b26\u4e32\uff0c\u8fd9\u65f6\u9700\u8981\u7ef4\u62a4\u4e00\u5f20\u4ece\u5b57\u7b26\u4e32\u6620\u5c04\u5230\u6574\u6570\u7d22\u5f15\u7684\u8868\u683c\uff0c\u5728\u56fe\u4e2d\u7528\u7d22\u5f15\u4ee3\u66ff\u5b57\u7b26\u4e32</p> <p>\u6cd5\u4e09\uff1a\u90bb\u63a5\u591a\u91cd\u8868(adjacency multilist)</p> <p>\u6ce8\uff1a\u8fd9\u4e2a\u4e0d\u4f5c\u8981\u6c42\uff0c\u4e86\u89e3\u5373\u53ef</p> <p>\u5728\u4e4b\u524d\u7684\u90bb\u63a5\u8868\u91cc\uff0c\u5bf9\u4e8e\u6bcf\u6761\u8fb9 \\((v_i, v_j)\\)\uff0c\u6211\u4eec\u4f1a\u6709\u4e24\u4e2a\u8282\u70b9\uff1a</p> <p>\u901a\u8fc7\u6539\u8fdb\uff0c\u5c06\u8fd9\u4e24\u4e2a\u8282\u70b9\u7ed3\u5408\u5230\u4e00\u8d77\uff1a</p> <p>\u4e8e\u662f\u5c31\u6709\u5982\u4e0b\u8868\u793a\u65b9\u6cd5\uff08mark \u8868\u793a\u67d0\u4e00\u6761\u8fb9\uff09\uff1a</p> <p>\u6700\u7ec8\u6548\u679c\uff1a</p> <p>\u89c2\u5bdf\u53d1\u73b0\uff0c\u5728\u6ca1\u6709\u8003\u8651 mark \u5b58\u50a8\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u8868\u793a\u6cd5\u7684\u5360\u7528\u7a7a\u95f4\u4e0e\u90bb\u63a5\u8868\u5b8c\u5168\u4e00\u6837\u3002\u867d\u7136\u5b83\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u7565\u5fae\u9ad8\u4e86\u70b9\uff0c\u4f46\u662f\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff08\u6bd4\u5982\u68c0\u9a8c\u67d0\u6761\u8fb9\u540e\u8fd8\u8981\u68c0\u9a8c\u4e0b\u4e00\u6761\u8fb9\uff09\u6bd4\u8f83\u6709\u5229\u3002</p> <p>\u6709\u65f6\uff0c\u6211\u4eec\u4f1a\u9047\u5230\u5e26\u6743\u8fb9(weighted edges)\u7684\u60c5\u51b5\uff0c\u5904\u7406\u65b9\u5f0f\u5982\u4e0b\uff1a</p> <ul> <li>\u90bb\u63a5\u77e9\u9635\uff1a\\(adj\\_mat[i][j] = \\text{weight}\\)</li> <li>\u90bb\u63a5\u8868/\u90bb\u63a5\u591a\u91cd\u8868\uff1a\u4e3a\u6bcf\u4e2a\u8282\u70b9\u6dfb\u52a0\u6743\u91cd\u7684\u5b57\u6bb5</li> </ul>"},{"location":"9-x.html#topological-sort","title":"Topological Sort","text":"<p>AOV\u7f51(activity on vertex network)\uff1a\u5bf9\u4e8e\u6709\u5411\u56fe \\(G\\)\uff0c\\(V(G)\\) \u8868\u793a\u6d3b\u52a8\uff0c\\(E(G)\\) \u8868\u793a\u4f4d\u6b21\u5173\u7cfb</p> <p>\uff08C1 \u662f C3 \u7684\u524d\u7f6e\u6d3b\u52a8\uff09</p> <ul> <li>\u5982\u679c\u4ece \\(i\\) \u5230 \\(j\\) \u6709\u4e00\u6761\u8def\u5f84\uff0c\u5219\u79f0 \\(i\\) \u662f \\(j\\) \u7684\u524d\u4efb(predecessor)</li> <li>\u5982\u679c \\(&lt;i, j&gt; \\in E(G)\\)\uff0c\u5219\u79f0 \\(i\\) \u662f \\(j\\) \u7684\u76f4\u63a5\u524d\u4efb(immediate predecessor)\u3002\u79f0 \\(j\\) \u662f \\(i\\) \u7684 \uff08\u76f4\u63a5\uff09\u540e\u4efb((immediate) successor)</li> </ul> <p>\u53ef\u884c\u7684AOV\u7f51\u5fc5\u987b\u662f\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe(DAG)</p> <p>\u8865\u5145\u9605\u8bfb\uff1aAOE\u7f51</p> <p>\u504f\u5e8f(partial order)\u662f\u4e00\u79cd\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\u7684\u5173\u7cfb</p> <ul> <li>\u53cd\u81ea\u53cd\u6027(irreflexive)\uff08\u4e0d\u5b58\u5728 \\(i \\rightarrow i\\)\uff09</li> <li>\u53cd\u5bf9\u79f0\u6027(anti-symmetric)\uff08\\((i \\rightarrow j) \\wedge (j \\rightarrow i) \\Rightarrow i = j\\)\uff09</li> <li>\u4f20\u9012\u6027\uff08\\(i \\rightarrow j, j \\rightarrow k \\Rightarrow i \\rightarrow k\\)\uff09</li> </ul> <p>\u8bf4\u660e</p> <ul> <li>\u8fd9\u91cc\u7684\u504f\u5e8f\u6307\u7684\u662f\u4e25\u683c\u504f\u5e8f\uff0c\u56e0\u6b64\u548c\u79bb\u6563\u6570\u5b66\u5b9a\u4e49\u7684\u504f\u5e8f\u7565\u6709\u533a\u522b</li> <li>\u5982\u679c\u5177\u6709\u81ea\u53cd\u6027\uff0c\u5c31\u4f1a\u51fa\u73b0\u8981\u505a\u4e00\u4ef6\u4e8b \\(i\\) \u4e4b\u524d\u8981\u5b8c\u6210 \\(i\\) \u7684\u602a\u5708\uff0c\u56e0\u6b64\u274c</li> </ul> <p>\u62d3\u6251\u5e8f(topological order)\u662f\u4e00\u5f20\u56fe\u7684\u9876\u70b9\u7684\u7ebf\u6027\u987a\u5e8f\uff0c\u6ee1\u8db3\uff1a\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u9876\u70b9 \\(i, j\\)\uff0c\u5982\u679c \\(i\\) \u662f \\(j\\) \u7684\u524d\u4efb\uff0c\u5219\u5728\u7ebf\u6027\u987a\u5e8f\u4e2d \\(i\\) \u8981\u51fa\u73b0\u5728 \\(j\\) \u4e4b\u524d</p> <p>\u6ce8\uff1a</p> <ul> <li>\u62d3\u6251\u5e8f\u4e0d\u4e00\u5b9a\u662f\u552f\u4e00\u7684</li> <li>\u5982\u679c\u62d3\u6251\u5e8f\u4e2d\u4e00\u4e2a\u9876\u70b9\u51fa\u73b0\u5728\u53e6\u4e00\u4e2a\u9876\u70b9\u7684\u524d\u9762\uff0c\u5b83\u4eec\u4e4b\u95f4\u4e0d\u4e00\u5b9a\u5b58\u5728\u8def\u5f84</li> <li>\u53ef\u4ee5\u7528\u62d3\u6251\u5e8f\u68c0\u9a8c\u6709\u5411\u56fe\u662f\u5426\u5b58\u5728\u73af</li> </ul> \u4ee3\u7801\u5b9e\u73b0 <pre><code>// version 1\nvoid Topsort(Graph G)\n{\n    int Counter;\n    Vertex V, W;\n    for (Counter = 0; Counter &lt; NumVertex; Counter++)\n    {\n        V = FindNewVertexOfDegreeZero(); // O(|V|)\n        if (V == NotAVertex)\n        {\n            Error(\"Graph has a cycle\");\n            break;\n        }\n        TopNum[V] = Counter; // or output V\n        for (each W adjacent from V)\n            indegreep[W]--;\n    }\n}\n</code></pre> <ul> <li><code>FindNewVertexOfDegreeZero()</code>\uff1a\u626b\u63cf <code>Indegree[]</code> \u6570\u7ec4\uff0c\u627e\u5230\u5165\u5ea6\u4e3a 0 \u4e14\u672a\u8d4b\u4e88\u62d3\u6251\u5e8f\u7684\u9876\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\u9876\u70b9\uff0c\u90a3\u4e48\u8868\u660e\u56fe\u4e2d\u51fa\u73b0\u4e86\u73af</li> <li>\u6bcf\u5904\u7406\u5b8c\u4e00\u4e2a\u9876\u70b9 V \u540e\uff0c\u5c31\u9700\u8981\u8ba9\u4ece V \u51fa\u53d1\u4e0e V \u90bb\u63a5\u7684\u9876\u70b9\u7684\u5165\u5ea6 -1\uff0c\u76f8\u5f53\u4e8e\u5728\u56fe\u4e0a\u79fb\u9664\u4e86\u9876\u70b9 V \u4ee5\u53ca\u5b83\u7684\u6240\u6709\u51fa\u8fb9</li> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(T = O(|V|^2)\\) \ud83d\udc4e</li> </ul> <p>\u6539\u8fdb\u65b9\u6cd5\uff1a\u5c06\u6240\u6709\u672a\u8d4b\u4e88\u62d3\u6251\u5e8f\u7684\u3001\u5ea6\u4e3a 0 \u7684\u9876\u70b9\u653e\u5165\u7279\u6b8a\u7684\u76d2\u5b50\uff08\u6bd4\u5982\u961f\u5217\u6216*\u6808\uff09\u91cc</p> \u52a8\u753b\u6f14\u793a <p> </p> \u4ee3\u7801\u5b9e\u73b0 <pre><code>// version 2, using queue ADT\nvoid Topsort(Graph G)\n{\n    Queue Q;\n    int Counter = 0;\n    Vertex V, W;\n\n    Q = CreateQueue(NumVertex);\n    for (each vertex V)\n        if (indegree[V] == 0)\n            Enqueue(V, Q);\n    while (!isEmpty(Q))\n    {\n        V = Dequeue(Q);\n        TopNum[V] = ++Counter;  // assign next\n        for (each W adjacent from V)\n            if (--indegree[W] == 0)\n                Enqueue(W, Q);\n    } // end-while\n    if (Counter != NumVertex)\n        Error(\"Graph has a cycle\")\n    DisposeQueue(Q); // free memery\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(|E| + |V|)\\)</p> \u4f8b\u9898 \u95ee\u9898\u7b54\u6848 <p> </p> <p> </p>"},{"location":"9-x.html#shortest-path-algorithms","title":"Shortest Path Algorithms","text":"<p>\u7ed9\u5b9a\u4e00\u5f20\u6709\u5411\u56fe \\(G(V, E)\\)\uff0c\u4ee5\u53ca\u6210\u672c\u51fd\u6570 \\(c(e)\\)\uff0c\\(e \\in E(G)\\)\uff0c\u4ece\u6e90(source)\u5230\u76ee\u7684\u5730(destination)\u7684\u8def\u5f84 \\(P\\) \u7684\u957f\u5ea6(length)\u4e3a \\(\\sum\\limits_{e_i \\subset P}c(e_i)\\)\uff08\u4e5f\u79f0\u4e3a\u5e26\u6743\u8def\u5f84\u957f\u5ea6(weighted path length)\uff09</p>"},{"location":"9-x.html#single-source-shortest-path-problem","title":"Single-Source Shortest-Path Problem","text":"<p>\u95ee\u9898</p> <p>\u7ed9\u5b9a\u4e00\u5f20\u6743\u91cd\u56fe \\(G(V, E)\\)\uff0c\u4ee5\u53ca\u4e00\u4e2a\u53ef\u533a\u5206\u7684\u9876\u70b9 \\(s\\)\uff0c\u5bfb\u627e\u4ece \\(s\\) \u5230 \\(G\\) \u4e2d\u6240\u6709\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u6743\u91cd\u8def\u5f84</p> <p>\uff1a</p> <ul> <li>\u53f3\u56fe\u5b58\u5728\u8d1f\u7684\u8fb9\uff0c\u8fd9\u6837\u6700\u77ed\u8def\u7684\u957f\u5ea6\u53ef\u4ee5\u662f\u65e0\u7a77\u5c0f\u3002\u56e0\u6b64\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6700\u77ed\u8def\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u56e0\u4e3a\u9677\u5165\u4e86\u6b7b\u5faa\u73af\u3002\u8fd9\u79cd\u5faa\u73af\u88ab\u79f0\u4e3a\u8d1f\u503c\u73af(negative-cost cycle)</li> <li>\u4ece \\(s\\) \u5230 \\(s\\) \u7684\u6700\u77ed\u8def\u5f84\u88ab\u5b9a\u4e49\u4e3a 0</li> <li>\u73b0\u5728\uff0c\u8fd8\u6ca1\u6709\u4e00\u79cd\u6700\u77ed\u8def\u7b97\u6cd5\u7684\u901f\u5ea6\u5feb\u4e8e\u627e\u5230\u4ece \\(s\\) \u5230\u6240\u6709\u9876\u70b9\u7684\u8def\u5f84\u7684\u7b97\u6cd5</li> </ul>"},{"location":"9-x.html#unweighted-shortest-paths","title":"Unweighted Shortest Paths","text":"<p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u8fb9\u7684\u6743\u91cd = 1</p> <p>\u5982\u56fe\u6240\u793a\uff0c\u4e3a\u4e86\u627e\u5230\u4ece \\(v_3\\) \u51fa\u53d1\u5230\u5176\u4ed6\u9876\u70b9\u7684\u6240\u6709\u6700\u77ed\u8def\u5f84\uff1a</p> <ul> <li>\u5148\u627e\u5230\u4e0e \\(v_3\\) \u90bb\u63a5\u7684\u9876\u70b9\uff0c\u8bb0\u4ece \\(v_3\\) \u5230\u8fd9\u4e9b\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e3a 1</li> <li>\u7136\u540e\u518d\u4ece\u8fd9\u4e9b\u9876\u70b9\u51fa\u53d1\uff0c\u627e\u5230\u4e0e\u5b83\u4eec\u90bb\u63a5\u7684\u9876\u70b9\u3002\u5982\u679c\u65b0\u627e\u5230\u7684\u9876\u70b9\u8fd8\u6ca1\u6709\u76f8\u5e94\u7684\u6700\u77ed\u8def\u5f84\uff0c\u90a3\u5c31\u8bb0\u8fd9\u4e9b\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e3a 2</li> <li>\u91cd\u590d\u6b65\u9aa4 2\uff0c\u76f4\u81f3\u6240\u6709\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u90fd\u5df2\u627e\u5230</li> </ul> <p>\u8fd9\u79cd\u65b9\u6cd5\u88ab\u79f0\u4e3a\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22(breadth-first search, BFS)\uff1a\u8be5\u65b9\u6cd5\u4e00\u5c42\u5c42\u5730\u5904\u7406\u9876\u70b9\uff1a\u6700\u8fd1\u7684\u9876\u70b9\u6700\u5148\u5904\u7406\uff0c\u6700\u8fdc\u7684\u9876\u70b9\u6700\u540e\u5904\u7406\u3002\u8fd9\u548c\u6811\u4e2d\u7684\u5c42\u5e8f\u904d\u5386\u7c7b\u4f3c</p> <p>\u5b9e\u73b0</p> <ul> <li> <p><code>Table[i].Dist</code> ::= \u4ece\\(s\\)\u5230\\(v_i\\)\u7684\u8ddd\u79bb \\(= \\begin{cases}\\infty &amp; \\text{if } v_i \\ne s \\\\ 0 &amp; \\text{if } v_i = s\\end{cases}\\)</p> </li> <li> <p><code>Table[i].Known</code> ::= \\(\\begin{cases}1 \\quad \\text{if } v_i \\text{ is checked} \\\\ 0 \\quad \\text{if not}\\end{cases}\\)</p> </li> </ul> <ul> <li>\u5176\u5b9e\u6ca1\u6709\u5fc5\u8981\u8bbe\u8fd9\u4e2a\u5b57\u6bb5(\u56e0\u4e3a <code>Table[i].Dist</code> \u540c\u65f6\u5177\u5907\u6807\u8bb0\u529f\u80fd)\uff0c\u5199\u5728\u8fd9\u91cc\u53ea\u662f\u63d0\u9192\u4e00\u4e0b\u8981\u505a\u4e00\u4e0b\u6807\u8bb0</li> <li>\u5728\u521d\u59cb\u5316\u4e2d\uff0c\u6240\u6709\u9876\u70b9\u7684 <code>Table[i].Known = 0</code>\uff0c\u5305\u62ec\u8d77\u59cb\u9876\u70b9\uff0c\u56e0\u4e3a\u6ca1\u6709\u4efb\u4f55\u9876\u70b9\u88ab\u5904\u7406\u8fc7</li> </ul> <ul> <li><code>Table[i].Path</code> ::= \u8bb0\u5f55\u8def\u5f84\u4e0a \\(v_i\\) \u7684\u524d\u4e00\u4e2a\u9876\u70b9\uff0c\u4ee5\u4fbf\u6253\u5370\u6574\u6761\u8def\u5f84</li> </ul> \u4ee3\u7801\u5b9e\u73b0 <pre><code>// version 1\nvoid Unweighted(Table T)\n{\n    int CurrDist;\n    Vertex V, W;\n    for(CurrDist = 0; CurrDist &lt; NumVertex; CurrDist++)\n    {\n        for (each vertex V)\n            if (!T[V].Known &amp;&amp; T[V].Dist == CurrDist)\n            {\n                T[V].Known = true;\n                for (each W adjacent to V)\n                    if (T[W].Dist == infinity)\n                    {\n                        T[W].Dist = CurrDist + 1;\n                        T[W].Path = V;  // (*)\n                    }// end-if Dist == Infinity\n            } // end-if !Known &amp;&amp;Dist == CurrDist\n    } // end-for CurrDist\n}\n</code></pre> <p>\u8fd9\u4e2a\u7b97\u6cd5\u663e\u7136\u6ca1\u4ec0\u4e48\u6548\u7387\uff0c\u56e0\u4e3a\u5916\u5c42\u5faa\u73af\u8981\u5faa\u73af <code>NumVertex - 1</code> \u6b21\u624d\u7ed3\u675f\uff0c\u5373\u4f7f\u6240\u6709\u7684\u9876\u70b9\u65e9\u5c31\u5904\u7406\u8fc7\u4e86\u3002\u867d\u7136\u53ef\u4ee5\u589e\u52a0\u4e00\u4e2a\u989d\u5916\u7684\u5224\u65ad\u63d0\u524d\u7ed3\u675f\u5faa\u73af\uff0c\u4f46\u8fd9\u5e76\u6ca1\u6709\u5f71\u54cd\u6700\u574f\u60c5\u51b5\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u6bd4\u5982\uff1a</p> <p>\u8d77\u59cb\u70b9\u4e3a \\(v_9\\)\uff0c\u7b2c\u4e00\u6b21\u5faa\u73af\u8981\u627e <code>CurrDist == 0</code> \u7684\u9876\u70b9\uff08\u5373 \\(v_9\\)\uff09\u3002\u6211\u4eec\u4e00\u822c\u4f1a\u6309\u7167\u8282\u70b9\u4e0b\u6807\u7684\u9012\u589e\u987a\u5e8f\u67e5\u627e\uff0c\u5219\u8981\u627e\u5230 \\(v_9\\) \u9700\u8981\u4ece\u5934\u904d\u5386\u5230\u5c3e\uff1b\u800c\u4e14\u4e0d\u96be\u770b\u51fa\uff0c\u6bcf\u6b21\u5faa\u73af\u5747\u4f1a\u4ece\u5934\u904d\u5386\u5230\u5c3e\uff08\u8d8a\u6765\u8d8a\u9760\u524d\uff09</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6 \\(T = O(|V|^2)\\)\ud83d\udc4e</p> <p>\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u9876\u70b9 \\(V\\) \u672a\u88ab\u6807\u8bb0\uff0c\u4f46 \\(d_v \\ne \\infty\\)\uff0c\u90a3\u4e48 \\(d_v = CurrDist\\) \u6216 \\(d_v = CurrDist + 1\\)\uff0c\u56e0\u6b64\u6ca1\u6709\u5fc5\u8981\u50cf\u4e0a\u9762\u90a3\u4e2a\u7b97\u6cd5\u4e00\u6837\u626b\u63cf\u6574\u4e2a\u8868\u6765\u627e\u5230\u5408\u9002\u7684\u9876\u70b9\u3002</p> \u6539\u8fdb\u601d\u8def <p>\u7528\u4e24\u4e2a\u7bb1\u5b50\uff0c\u4e00\u4e2a\u7bb1\u5b50\u653e\u672a\u6807\u8bb0\u7684 \\(d_v = CurrDist\\) \u7684\u9876\u70b9\uff0c\u53e6\u4e00\u4e2a\u7bb1\u5b50\u653e\u672a\u6807\u8bb0\u7684\u4e14 \\(d_v = CurrDist + 1\\) \u7684\u9876\u70b9\u3002\u90a3\u4e48\uff0c\u539f\u6765\u626b\u63cf\u6574\u5f20\u8868\u7684\u64cd\u4f5c\u53ef\u4ee5\u53d8\u6210\uff1a\u4ece\u7b2c 1 \u4e2a\u7bb1\u5b50\u627e\u4efb\u4e00\u9876\u70b9 \\(V\\)\uff0c\u7b49\u5230 (*) \u90a3\u884c\u4ee3\u7801\u6267\u884c\u5b8c\u540e\uff0c\u5c06 \\(W\\) \u653e\u5165\u7b2c 2 \u4e2a\u7bb1\u5b50\u3002\u7b49\u5230\u5916\u5c42 <code>for</code> \u5faa\u73af\u4e00\u8f6e\u7ed3\u675f\u540e\uff0c\u7b2c 1 \u4e2a\u7bb1\u5b50\u4e3a\u7a7a\uff0c\u5c06\u7b2c 2 \u4e2a\u7bb1\u5b50\u7684\u9876\u70b9\u8f6c\u79fb\u5230\u7b2c 1 \u4e2a\u7bb1\u5b50\uff0c\u8fdb\u884c\u4e0b\u4e00\u8f6e\u5faa\u73af\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u961f\u5217\u5c31\u80fd\u5b8c\u6210\u4e0a\u8ff0\u6539\u8fdb\u601d\u8def\uff1a</p> <p>\u8fd9\u91cc\u4e0d\u7528 <code>Known</code> \u5b57\u6bb5\u662f\u56e0\u4e3a <code>Dequeue</code> \u5c31\u4ee3\u8868\u9876\u70b9\u5df2\u7ecf\u88ab\u5904\u7406\u8fc7\u4e86\uff0c\u4e0d\u4f1a\u518d\u56de\u5230\u961f\u5217\u91cc</p> \u4ee3\u7801\u5b9e\u73b0 <pre><code>// version 2\nvoid Unweighted(Table T)\n{\n    // T is initialized with the source vertex S given\n    Queue Q;\n    Vertex V, W;\n    Q = CreateQueue(NumVertex);\n    MakeEmpty(Q);\n    Enqueue(S, Q); // Enqueue the source vertex\n    while (!IsEmpty(Q))\n    {\n        V = Dequeue(Q);\n        T[V].Known = true;  // not really necessary\n        for (each W adjacent to V)\n            if (T[W].Dist == Infinity)\n            {\n                T[W].Dist = T[V].Dist + 1;\n                T[W].Path = V;\n                Enqueue(W, Q);\n            } // end-if Dist == Infinity\n    } // end-while\n    DisposeQueue(Q); // free memory\n}\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u548c\u62d3\u6251\u6392\u5e8f\u7684\u7b97\u6cd5\u5f88\u50cf</p> \u52a8\u753b\u6f14\u793a <p> </p>"},{"location":"9-x.html#dijkstras-algorithmfor-weighted-shortest-paths","title":"Dijkstra's Algorithm(for weighted shortest paths)","text":"<p>Dijkstra\u7b97\u6cd5\u7684\u601d\u8def</p> <p>\u4ee4 \\(S =\\) {\\(s\\) \u548c\u5df2\u627e\u5230\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9 \\(v_i\\) \u7684\u96c6\u5408}\u3002\u5bf9\u4e8e \\(\\forall u \\notin S\\)\uff0c\u5b9a\u4e49<code>distance[u]</code> = \u8def\u5f84 \\(\\{s \\rightarrow (v_i \\in S) \\rightarrow u\\}\\) \u7684\u6700\u5c0f\u957f\u5ea6</p> <ul> <li>Dijkstra \u7b97\u6cd5\u6309\u9636\u6bb5\u6267\u884c\uff0c\u5728\u6bcf\u4e2a\u9636\u6bb5\u4e2d\uff0c\u6311\u9009\u4e00\u4e2a\u9876\u70b9\\(v\\)\uff0c\u4fdd\u8bc1\u5b83\u662f\u6240\u6709\u672a\u88ab\u6807\u8bb0\u7684\u9876\u70b9\u4e2d\u8def\u5f84\u957f\u5ea6\\(d_v\\)\u6700\u77ed\u7684\u90a3\u4e2a\u9876\u70b9\uff08\u5982\u679c\u6709\u591a\u4e2a\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c\u5219\u4efb\u610f\u6311\u9009\u9876\u70b9\uff09</li> <li>\u5bf9\u4e8e\u4ece\u9876\u70b9 \\(v\\) \u51fa\u53d1\u7684\u90bb\u63a5\u9876\u70b9 \\(w\\)\uff0c\\(d_w = \\min(d_w, d_v + c_{v, w})\\)</li> <li>\u6807\u8bb0\u9876\u70b9 \\(v\\)\uff0c\u5373\u4ee4 \\(v \\in S\\)</li> <li>\u7136\u540e\u5bf9\u4e8e\u5269\u4f59\u672a\u88ab\u6807\u8bb0\u7684\u9876\u70b9\uff0c\u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u76f4\u81f3\u6240\u6709\u9876\u70b9\u5747\u88ab\u6807\u8bb0</li> </ul> <p>\u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u662f\u4e00\u79cd\u8d2a\u5fc3\u7b97\u6cd5</p> \u9884\u5907\u5de5\u4f5c <pre><code>// Declarations for Dijkstra's algorithm\ntypedef int Vertex\n\nstruct TableEntry\n{\n    List Header; // Adjacency list\n    int Known;\n    DistType Dist;\n    Vertex Path;\n};\n\n// Vertices are numbered from 0\n#define NotAVerTex (-1)\ntypedef struct TableEntry Table[NumVertex];\n\n// Initialization\nvoid InitTable(Vertex Start, Graph G, Table T)\n{\n    int i;\n\n    ReadGraph(G, T);\n    for (i = 0; i &lt; NumVertex; i++)\n    {\n        T[i].Known = False;\n        T[i].Dist = Infinity;\n        T[i].Path = NotAVerTex;\n    }\n    T[Start].dist = 0;\n}\n\n// Print shortest path to V after Dijkstra has run\n// Assume that the path exists\nvoid PrintPath(Vertex V, Table T)\n{\n    if(T[V].Path != NotAVertex)\n    {\n        PrintPath(T[V].Path, T);\n        printf(\" to\");\n    }\n    printf(\"%v\", V) // %v is pseudocode\n}\n</code></pre> \u4ee3\u7801\u5b9e\u73b0 <pre><code>void Dijkstra(Table T)\n{\n    Vertex V, W;\n    for(;;)  // O(|V|)\n    {\n        V = smallest unknown distance vertex;\n        if (V == NotAVertex)\n            break;\n        T[V].Known = true;\n        for (each W adjacent to V)\n            if (!T[W].Known)\n                if(T[V].Dist + Cvw &lt; T[W].Dist) // \u8fd9\u6b65\u64cd\u4f5c\u79f0\u4e3a\u201c\u677e\u5f1b\u201d\n                {\n                    Decrease(T[W].Dist to T[V].Dist + Cvw);\n                    T[W].Path = V;\n                } // end-if update W\n    } // end-for(;;)\n} // now work for edge with negative cost\n</code></pre> \u52a8\u753b\u6f14\u793a <p> </p> <p>Dijkstra \u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u53d6\u51b3\u4e8e\u6211\u4eec\u5982\u4f55\u5bfb\u627e\u8ddd\u79bb\u6700\u77ed\u4e14\u672a\u88ab\u6807\u8bb0\u7684\u9876\u70b9</p> <p>\u65b9\u6cd5</p> \u65b9\u6cd51\u65b9\u6cd52 <ul> <li>\u4ec5\u4ec5\u7b80\u5355\u626b\u63cf\u4e00\u904d\u6574\u5f20\u8868\u6765\u627e\u5230 \\(d_v\\) \u6700\u5c0f\u7684\u9876\u70b9 \\(v \\rightarrow O(|V|)\\)\uff1b\u800c\u4e14\u5916\u5c42\u5faa\u73af\u904d\u5386\u6240\u6709\u9876\u70b9\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(|V|^2)\\)</li> <li>\u6bcf\u6761\u8fb9\u6700\u591a\u4f1a\u66f4\u65b0\u4e00\u6b21\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(|E|)\\)\uff0c\u800c\u4e14\u4e0e\u9876\u70b9\u7684\u904d\u5386\u662f\u72ec\u7acb\u7684</li> <li>\u56e0\u6b64 \\(T = O(|V|^2 + |E|)\\)\uff0c\u9002\u7528\u4e8e\u7a20\u5bc6\u56fe\uff08\u6b64\u65f6\u590d\u6742\u5ea6\u76f8\u5f53\u4e8e\u7ebf\u6027\u590d\u6742\u5ea6\uff09</li> </ul> <p>\u5c06\u8ddd\u79bb\u4fdd\u5b58\u5728\u5806\u91cc\uff0c\u8c03\u7528 <code>DeleteMin</code> \u6765\u627e\u5230\u672a\u6807\u8bb0\u7684\u6700\u5c0f\u9876\u70b9\uff0c\u5e76\u4e14\u4e4b\u540e\u4e0d\u53bb\u7ba1\u5b83\u3002</p> <p>\u90a3\u4e48\u5982\u4f55\u5b9e\u73b0\u7b97\u6cd5\u4e2d\u7684 <code>Decrease(T[W].Dist to T[V].Dist + Cvw);</code> \u5462\uff1f</p> \u6cd51\u6cd52 <p><code>DecreaseKey()</code> \\(\\rightarrow O(\\log |V|)\\)\uff0c\u56e0\u6b64\\(T = O(|V|\\log |V| + |E| \\log |V|) = O(|E|\\log |V|)\\)\uff0c\u9002\u7528\u4e8e\u7a00\u758f\u56fe</p> <p>\u4f46\u662f\uff0c\u56e0\u4e3a\u5806\u4e0d\u80fd\u6709\u6548\u652f\u6301 <code>Find</code> \u64cd\u4f5c\uff0c\u5f53 \\(d_i\\) \u7684\u503c\u53d1\u751f\u6539\u53d8\u65f6\uff0c\u5b83\u7684\u4f4d\u7f6e\u9700\u8981\u7ef4\u62a4\u548c\u66f4\u65b0\uff0c\u7528\u4e8c\u53c9\u5806\u5b9e\u73b0\u8d77\u6765\u6709\u4e9b\u9ebb\u70e6\u3002</p> <p>\u5982\u679c\u7528\u5230\u914d\u5bf9\u5806(pairing heap)\uff0c\u60c5\u51b5\u5c31\u4f1a\u6539\u5584\uff0c\u8fd9\u79cd\u6539\u8fdb\u4e0d\u505a\u8981\u6c42</p> <p>\u5c06\u66f4\u65b0\u540e\u7684 \\(d_w\\) \u63d2\u5165\u5806\u4e2d\uff0c\u8fd9\u6837\u7684\u8bdd\u5806\u5185\u5c31\u4f1a\u51fa\u73b0\u591a\u4e2a\u8868\u793a\u540c\u4e00\u9876\u70b9\u7684\u8ddd\u79bb\u3002\u56e0\u6b64\u5728 <code>V = smallest unknown distance vertex;</code> \u8fd9\u4e00\u53e5\u4e2d\uff0c\u8981\u91cd\u590d\u4f7f\u7528 <code>DeleteMin</code>\uff0c\u76f4\u5230\u672a\u6807\u8bb0\u7684\u70b9\u51fa\u73b0\uff08\u6807\u8bb0\u8fc7\u7684\u70b9\u5c31\u6254\u6389\u4e0d\u7528\uff09\u3002\u867d\u7136\u8fd9\u79cd\u65b9\u6cd5\u4f1a\u6269\u5927\u5806\u7684\u89c4\u6a21\uff08\\(O(|E|)\\)\uff09\uff0c\u4f46\u662f\u56e0\u4e3a \\(|E| \\le |V|^2\\)\u3002\u6240\u4ee5 \\(\\log |E| \\le 2\\log |V|\\)\uff0c\u56e0\u6b64 \\(T = O(|E| \\log |V|)\\)\u3002\u4f46\u5b83\u5360\u7528\u7a7a\u95f4\u5927\u4e8e\u6cd5 1 \u9700\u8981 \\(|E|\\) \u6b21 <code>DeleteMin</code> \u64cd\u4f5c\uff0c\u56e0\u6b64\u5728\u5b9e\u9645\u8fd0\u884c\u4e2d\u53ef\u80fd\u4f1a\u53d8\u6162\u3002</p> <p>\u5176\u4ed6\u6539\u8fdb\u65b9\u6cd5\uff1a\u6590\u6ce2\u90a3\u5951\u5806(Fibonacci heap)</p> \u5177\u4f53\u5b9e\u73b0 <pre><code>void Dijkstra(VType s, Table T, int n)   // Finding all the shortest paths\n{\n    VType V, W;           // V: the current vertex; W: the vertex adjacent to V\n    Heap H;               // A heap maintaining the shortest unknown vertex\n    Vertex cur, tmp;      // cur: obtaining the information of all adjacent vertice regarding V; tmp: containing new previous vertex adjacent to W\n    int len, cnt = n;     // len: the distance of T[V].dist + the distance between V and W; cnt: used to terminate the loop\n\n    H = InitHeap(n, s);   // Initialization of the heap\n\n    while (cnt &gt; 0)\n    {\n        V = DeleteMin(H); // Obtaining the shortest unknown vertex\n        T[V].Known = 1;   // Marking it\n        cnt--;\n        cur = G[V];       // Getting all adjacent successors\n        while (cur != NULL)  // Traversing all successors\n        {\n            W = cur-&gt;vertex;  // The current successor\n            if (!T[W].Known)  // If W isn't marked, then try to update it\n            {\n                len = T[V].Dist + cur-&gt;length;   // New distance\n                if (len &lt; T[W].Dist)  // If the new distance is shorter than the previous one, then update it\n                {\n                    T[W].Dist = len;\n                    if (pos[W] == 0)  // If W hasn't been in the heap, then insert it into the heap\n                        Insert(W, len, H);\n                    else  // If W is in the heap, then update the distance of W and update the whole heap\n                        DecreaseKey(pos[W], len, H);\n\n                    T[W].Path = NULL;    // Clearing out all previous vertice, because we find the new optimal one\n                    tmp = (Vertex)malloc(sizeof(struct node));    // Insert the new one into the T[W].Path\n                    tmp-&gt;vertex = V;\n                    tmp-&gt;next = T[W].Path;\n                    T[W].Path = tmp;\n                }\n                else if (len == T[W].Dist)  // If the new distance is equal to the old one, then just involve the new solution\n                {\n                    tmp = (Vertex)malloc(sizeof(struct node));    // The same operations\n                    tmp-&gt;vertex = V;\n                    tmp-&gt;next = T[W].Path;\n                    T[W].Path = tmp;\n                }\n            }\n            cur = cur-&gt;next;     // Finding the next one\n        }\n    }\n}\n</code></pre>"},{"location":"9-x.html#graphs-with-negative-edge-costs","title":"Graphs with Negative Edge Costs","text":"<p>\u5982\u679c\u51fa\u73b0\u8d1f\u7684\u8fb9\u6210\u672c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4e0d\u80fd\u5728\u4f7f\u7528<code>Known</code>\u5b57\u6bb5\u6807\u8bb0\u662f\u5426\u5df2\u7ecf\u5904\u7406\u8fc7\u67d0\u4e2a\u9876\u70b9\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u5728\u7b2c\u4e00\u6b21\u5904\u7406\u8be5\u9876\u70b9\u4e4b\u540e\uff0c\u53c8\u53d1\u73b0\u66f4\u5c0f\u7684\u8def\u5f84\u957f\u5ea6\uff08\u56e0\u4e3a\u8d1f\u7684\u8fb9\uff09\uff0c\u9700\u8981\u91cd\u590d\u5904\u7406\u67d0\u4e2a\u9876\u70b9</p> \u4e00\u79cd\u5c1d\u8bd5\u274c <p>\u7ed9\u6240\u6709\u8fb9\u52a0\u4e0a\u4e00\u4e2a\u76f8\u540c\u7684\u6b63\u5e38\u6570\uff0c\u4f7f\u5f97\u6240\u6709\u8fb9\u7684\u6210\u672c\u4e3a\u6b63\u6570</p> <p>\u5206\u6790\uff1a\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u539f\u672c\u5305\u542b\u8fb9\u6570\u8f83\u591a\u7684\u8def\u5f84\uff0c\u5b83\u7684\u6210\u672c\u589e\u957f\u5c31\u660e\u663e\u591a\u4e8e\u8fb9\u6570\u8f83\u5c11\u7684\u8def\u5f84\uff0c\u8fd9\u5c31\u6709\u53ef\u80fd\u6539\u53d8\u6700\u77ed\u8def\u5f84\u7684\u53d6\u6cd5\u3002</p> <p>\u7136\u800c\uff0c\u82e5\u6240\u6709\u8fb9\u7684\u6743\u91cd\u90fd\u4e58\u4e0a\u4e00\u4e2a\u76f8\u540c\u7684\u6b63\u5e38\u6570\uff0c\u8fd9\u4e0d\u5f71\u54cd\u6700\u77ed\u8def\u7684\u7ed3\u679c</p> <p>\u6211\u4eec\u7528\u201c\u65e0\u6743\u91cd\u6700\u77ed\u8def\u7b97\u6cd5 + Dijkstra\u7b97\u6cd5\u201d\u6765\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\uff1a</p> \u4ee3\u7801\u5b9e\u73b0 <pre><code>void WeightedNegative(Table T)\n{\n    Queue Q;\n    Vertex V, W;\n    Q = CreateQueue(NumVertex);\n    MakeEmpty(Q);\n    Enqueue(S, Q); // Enqueue the source vertex\n    while (!IsEmpty(Q)) // each vertex can dequeue at most |V| times\n    {\n        V = Dequeue(Q);\n        for (each W adjacent to V)\n            if (T[V].Dist + Cvw &lt; T[W].Dist) // no longer once per edge\n            {\n                T[W].Dist = T[V].Dist + Cvw;\n                T[W].Path = V;\n                if (W is not already in Q)\n                    Enqueue(W, Q);\n            } // end-if update\n    } // end-while\n    DisposeQueue(Q); // free memory\n} // negative-cost cycle will cause indefinite loop\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(|E| \\cdot |V|)\\)</li> <li>\u5982\u679c\u51fa\u73b0\u8d1f\u503c\u73af\uff0c\u8be5\u7b97\u6cd5\u5c06\u4f1a\u9677\u5165\u65e0\u9650\u5faa\u73af\u3002\u56e0\u6b64\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u9876\u70b9\u7684\u51fa\u961f\u6b21\u6570\uff0c\u53d1\u73b0\u6709\u9876\u70b9\u51fa\u961f\u6b21\u6570\u591a\u4e8e \\(|V|\\) \u6b21\u65f6\uff0c\u5c31\u7ec8\u6b62\u7a0b\u5e8f\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u8fd9\u4e00\u95ee\u9898</li> </ul>"},{"location":"9-x.html#acyclic-graphs","title":"Acyclic Graphs","text":"<p>\u5982\u679c\u56fe\u662f\u65e0\u73af(acyclic)\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u62d3\u6251\u5e8f\u9009\u62e9\u9876\u70b9\uff0c\u56e0\u4e3a\u5f53\u9009\u62e9\u67d0\u4e2a\u9876\u70b9\u540e\uff0c\u5b83\u7684\u8ddd\u79bb\u4e0d\u53ef\u80fd\u56e0\u4e3a\u5b83\u524d\u9762\u9876\u70b9\u7684\u5165\u8fb9\u800c\u51cf\u5c11\uff0c\u8fd9\u6837\u53ea\u9700\u6267\u884c\u4e00\u8d9f\u7b97\u6cd5\u5373\u53ef\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\\(T = O(|E| + |V|)\\)\uff0c\u4e0d\u9700\u8981\u4f18\u5148\u961f\u5217</p> <p>\u5e94\u7528\uff1a\u5173\u952e\u8def\u5f84\u5206\u6790(critical path analysis)</p> <ul> <li>AOV\u7f51\uff1a\u6bcf\u4e2a\u9876\u70b9\u8868\u793a\u4e00\u4e2a\u6d3b\u52a8\uff0c\u4e14\u5305\u62ec\u9700\u8981\u5b8c\u6210\u8be5\u6d3b\u52a8\u7684\u65f6\u95f4\u3002\u8fb9(v, w) \u8868\u793a w \u5b8c\u6210\u4e4b\u524d\uff0cv\u5fc5\u987b\u5b8c\u6210</li> </ul> <ul> <li> <p>AOE\u7f51(activity on edges networks)</p> <p> </p> <p>\u8868\u793a\u65b9\u6cd5\uff1a</p> <p> </p> <p>\u6ce8\uff1a\u5fc5\u8981\u65f6\u9700\u8981\u6dfb\u52a0dummy edges\u548cdummy nodes\uff0c\u907f\u514d\u9519\u8bef\u6216\u7f3a\u5c11\u7684\u4f9d\u8d56\u5173\u7cfb\u4ea7\u751f</p> </li> </ul> <ul> <li>\\(EC[j]\\)\uff1a\u8282\u70b9\\(v_j\\) \u6700\u65e9\u7684\u5b8c\u6210\u65f6\u95f4</li> <li>\\(LC[j]\\)\uff1a\u8282\u70b9\\(v_j\\) \u6700\u665a\u7684\u5b8c\u6210\u65f6\u95f4</li> </ul> <p>\ud83c\udf30</p> <p>\u6ce8\uff1a\u84dd\u5b57\u8868\u793aEC\uff0c\u7ea2\u5b57\u8868\u793aLC\uff0c\u7eff\u5b57\u8868\u793a\u7a7a\u95f2\u65f6\u95f4\uff08\u540e\u9762\u4f1a\u8bb2\u5230\uff09</p> <ul> <li> <p>\u8ba1\u7b97EC\uff1a\u627e\u5230\u7b2c\u4e00\u4e2a\u4e8b\u4ef6\u5230\u6700\u540e\u4e00\u4e2a\u4e8b\u4ef6\u4e4b\u95f4\u6700\u957f\u7684\u8def</p> <p>\u6ce8\uff1a \u56fe\u5982\u679c\u662f\u6709\u73af\u7684\uff0c\u56e0\u4e3a\u6b63\u6210\u672c\u73af(positive-cost cycles)\u7684\u5b58\u5728\uff0c\u8fd9\u79cd\u7b97\u6cd5\u65e0\u6cd5\u5b9e\u73b0\u3002\u7136\u800c\u8fd9\u91cc\u5df2\u7ecf\u89c4\u5b9a\u662f\u65e0\u73af\u56fe\uff0c\u6240\u4ee5\u65e0\u9700\u62c5\u5fc3</p> <p>\u4ece\u8d77\u70b9 \\(v_0\\) \u5f00\u59cb\uff0c\u5bf9\u4e8e\u4efb\u610f\u7684 \\(a_i = &lt;v, w&gt;\\)\uff0c\u6211\u4eec\u6709</p> \\[ EC[0] = 0 \\quad EC[w] = \\max\\limits_{(v,w) \\in E} \\{EC[v] + C_{v, w}\\} \\] <p>\u6309\u62d3\u6251\u5e8f\u8ba1\u7b97</p> </li> <li> <p>\u8ba1\u7b97 LC\uff1a\u4ece\u7ec8\u70b9 \\(v_8\\) \u5f00\u59cb\uff0c\u5bf9\u4e8e\u4efb\u610f\u7684 \\(a_i = &lt;v, w&gt;\\)\uff0c\u6211\u4eec\u6709</p> \\[ LC[8] = EC[8] \\quad LC[v] = \\min\\limits_{(v,w) \\in E} \\{LC[v] - C_{v, w}\\} \\] <p>\u6309\u9006\u5411\u62d3\u6251\u5e8f\u8ba1\u7b97</p> </li> <li> <p>\\(&lt;v, w&gt;\\) \u7684\u7a7a\u95f2\u65f6\u95f4(slack time) = \\(LC[w] - EC[v] - C_{v, w}\\)</p> </li> <li>\u5173\u952e\u6d3b\u52a8(critical activity)\uff1a\u7a7a\u95f2\u65f6\u95f4\u4e3a0\u7684\u6d3b\u52a8</li> <li>\u5173\u952e\u8def\u5f84(critical path)\uff1a\u6240\u6709\u8fb9\u7684\u7a7a\u95f2\u65f6\u95f4\u5747\u4e3a0\u7684\u8def\u5f84</li> </ul>"},{"location":"9-x.html#all-pairs-shortest-path-problem","title":"All-pairs Shortest Path Problem","text":"<p>\u5bf9\u56fe\u4e2d\u4efb\u610f\u4e00\u5bf9\u9876\u70b9 \\(v_i, v_j(i \\ne j)\\)\uff0c\u8981\u6c42\u5b83\u4eec\u7684\u6700\u77ed\u8def\u5f84\uff0c\u6709\u4ee5\u4e0b\u65b9\u6cd5\uff1a</p> <ul> <li>\u4f7f\u7528 \\(|V|\\) \u6b21\u5355\u6e90\u7b97\u6cd5\uff08\u6bd4\u5982 Dijkstra\uff09\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(T = O(|V|^3)\\)\uff0c\u5728\u7a00\u758f\u56fe\u4e2d\u8fd0\u884c\u8f83\u5feb</li> <li>\u7528 Chap 10 \u7ed9\u51fa\u7684\u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(T = O(|V|^3)\\)\uff0c\u5728\u7a20\u5bc6\u56fe\u4e2d\u8fd0\u884c\u8f83\u5feb\uff0c\u8fd9\u91cc\u5c31\u7565\u8fc7\u4e86\u6211\u4e5f\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u7b97\u6cd5(doge)</li> </ul>"},{"location":"9-x.html#network-flow-problems","title":"Network Flow Problems","text":"<p>\u8003\u8651\u4e0b\u9762\u7684\u7ba1\u9053\u7f51\u7edc\uff1a</p> <ul> <li>\u8fd9\u662f\u4e00\u4e2a\u6709\u5411\u56fe \\(G(V, E)\\)\uff0c\u6bcf\u6761\u8fb9\u7684\u5bb9\u91cf(capacity)\u4e3a \\(c_{v, w}\\)\uff0c\u7ecf\u8fc7\u8be5\u8fb9\u7684\u6d41\u91cf(flow)\u4e0d\u5f97\u8d85\u8fc7\u5b83\u7684\u5bb9\u91cf</li> <li>\u6211\u4eec\u79f0\u8d77\u70b9 s \u4e3a\u6e90\u70b9(source)\uff0c\u7ec8\u70b9 t \u4e3a\u6c47\u70b9(sink)</li> <li>\u5bf9\u4e8e\u6240\u6709\u9876\u70b9 \\(v \\notin \\{s, t\\}\\)\uff0c\u603b\u6d41\u5165 = \u603b\u6d41\u51fa\uff0c\u5373 \\(\\text{Total coming in}(v) \\equiv \\text{Total going out}(v)\\)\uff0c\u4e5f\u5c31\u662f\u8bf4\u9876\u70b9\u4e0d\u5177\u5907\u5b58\u50a8\u7684\u80fd\u529b</li> </ul> <p>\ud83c\udfaf\uff1a\u786e\u5b9a\u4ece s \u5230 t \u7684\u6700\u5927\u6d41(maximum-flow)</p>"},{"location":"9-x.html#simple-algorithm","title":"Simple Algorithm","text":"<p>\u6ce8\uff1a\u4f7f\u7528\u8fd9\u4e2a\u7b97\u6cd5\u65f6\uff0c\u6211\u4eec\u9700\u89813\u5f20\u56fe\uff1a</p> <ul> <li>\u539f\u56fe \\(G\\)</li> <li>\u6d41\u91cf(flow)\u56fe \\(G_f\\)\uff1a\u8868\u793a\u7b97\u6cd5\u8fd0\u884c\u7684\u6bcf\u4e2a\u9636\u6bb5\u4e2d\u5df2\u7ecf\u5f97\u5230\u7684\u6d41\u91cf\uff0c\u521d\u59cb\u60c5\u51b5\u4e0b\u6bcf\u6761\u8fb9\u7684\u6d41\u91cf\u5747\u4e3a 0</li> <li>\u6b8b\u91cf(residual)\u56fe \\(G_r\\)\uff1a\u8868\u793a\u5bf9\u4e8e\u56fe\u4e2d\u7684\u6bcf\u6761\u8fb9\uff0c\u8fd8\u5269\u4e0b\u591a\u5c11\u6d41\u91cf\u53ef\u4ee5\u88ab\u6dfb\u52a0</li> </ul> <p>\u6b65\u9aa4</p> <ol> <li>\u5728\u6b8b\u91cf\u56fe(residual graph) \\(G_r\\) \u4e2d\u627e\u4e00\u6761 \\(s \\rightarrow t\\) \u7684\u7b80\u5355\u8def\u5f84\uff0c\u8be5\u8def\u5f84\u79f0\u4e3a\u589e\u5e7f\u8def\u5f84(augmenting path)</li> <li>\u589e\u5e7f\u8def\u5f84\u7684\u6d41\u91cf\u4e3a\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\u4e2d\u6700\u5c0f\u7684\u6d41\u91cf\uff0c\u7528\u8be5\u6d41\u91cf\u66f4\u65b0\u6d41\u91cf\u56fe(flow graph) \\(G_f\\)</li> <li>\u66f4\u65b0 \\(G_r\\)\uff0c\u5e76\u79fb\u9664\u6d41\u91cf\u4e3a0\u7684\u8fb9</li> <li>\u5982\u679c \\(G_r\\)\u4e2d\u8fd8\u5b58\u5728 \\(s \\rightarrow t\\) \u7684\u8def\u5f84\uff0c\u56de\u5230\u6b65\u9aa4 1\uff0c\u5426\u5219\u7ec8\u6b62\u7a0b\u5e8f</li> </ol> \u52a8\u753b\u6f14\u793a <p> </p> <p>\u95ee\u9898</p> <p>\u5982\u679c\u6211\u4eec\u91c7\u7528\u8d2a\u5fc3\u7684\u7b56\u7565\uff0c\u5bf9\u4e8e\u4e0a\u56fe\uff0c\u6211\u4eec\u4f1a\u5148\u9009\u62e9\\(s \\rightarrow a \\rightarrow d \\rightarrow t\\)\uff0c\u8fd9\u6837\u5f97\u5230\u7684\u6d41\u91cf\u4e3a 3\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\u7136\u800c\uff0c\u8fd9\u6837\u505a\u7684\u8bdd\u6211\u4eec\u5c31\u65e0\u6cd5\u518d\u627e\u5230\u7b2c 2 \u6761\u8def\u5f84\uff0c\u56e0\u6b64\u603b\u6d41\u91cf\u4e3a3\uff0c\u4e0d\u6ee1\u8db3\u8981\u6c42\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u6539\u8fdb\u4e0a\u8ff0\u7b97\u6cd5\u3002</p> <p> </p>"},{"location":"9-x.html#solution","title":"Solution","text":"<p>\u6539\u8fdb</p> <p>\u8ba9\u7b97\u6cd5\u5177\u5907\u64a4\u9500(undo)\u51b3\u7b56\u7684\u80fd\u529b\uff1a\u5bf9\u4e8e\u6d41\u91cf\u56fe \\(G_f\\) \u4e2d\u7684\u6bcf\u6761\u8fb9 (v, w)\uff0c\u5b83\u7684\u6d41\u91cf\u4e3a \\(f_{v, w}\\)\uff0c\u5728\u6b8b\u91cf\u56fe\u4e2d\u6dfb\u52a0\u4e00\u6761\u53cd\u5411\u7684\u8fb9 (w, v)\uff0c\u5b83\u7684\u6d41\u91cf\u4e5f\u4e3a \\(f_{v, w}\\)</p> <p>\u4ee4 \\(f\\) \u8868\u793a\u56fe \\(G = (V, E)\\) \u7684\u6d41\u91cf\uff0c\u5219\u6b8b\u5dee\u56fe\u7684\u8fb9\u7684\u6743\u91cd\u4e3a\uff1a</p> \\[ r(u, v) = \\begin{cases}r(u, v) - f(u, v) &amp; \\text{if }(u, v) \\in E \\\\ f(v, u) &amp; \\text{if }(v, u) \\in E \\\\ 0 &amp; \\text{otherwise}\\end{cases} \\] \u52a8\u753b\u6f14\u793a <p> </p> <p>\u6700\u7ec8\u6548\u679c\uff1a</p> <p>\u6ce8\uff1a\u5982\u679c\u8fb9\u7684\u5bb9\u91cf\u662f\u6709\u7406\u6570\uff0c\u90a3\u4e48\u8be5\u7b97\u6cd5\u5728\u7ec8\u6b62\u65f6\u603b\u80fd\u5f97\u5230\u4e00\u4e2a\u6700\u5927\u6d41\uff08\u56fe\u6709\u73af\u7684\u8bdd\u4e5f\u53ef\u4ee5\uff09</p>"},{"location":"9-x.html#analysis","title":"Analysis","text":"<p>\u524d\u63d0\uff1a\u6240\u6709\u8fb9\u7684\u5bb9\u91cf\u4e3a\u6574\u6570</p> <p>\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u65e0\u6743\u6700\u77ed\u8def\u5f84\u7b97\u6cd5\u6765\u627e\u5230\u589e\u5e7f\u8def\u5f84</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6 \\(T = O(f \\cdot |E|)\\)\uff0c\\(f\\)\u8868\u793a\u6700\u5927\u6d41\u91cf</p> <p>\u4f46\u5bf9\u4e8e\u4ee5\u4e0b\u7279\u6b8a\u60c5\u51b5\uff1a</p> <p>\u5982\u679c\u6211\u4eec\u968f\u673a\u6311\u9009\u589e\u5e7f\u8def\u5f84\uff0c\u6311\u5230\u4e00\u6761\u5305\u62ec \\(a \\rightarrow b\\) \u7684\u8def\u5f84\uff0c\u5c31\u4f1a\u4ea7\u751f\u95ee\u9898\uff1a</p> <p>Random augmentations could continually augment along a path that includes the edge connected by a and b. If this were to occur repeatedly, 2,000,000 augmentations would be required, when we could get by with only 2.</p> <p>\u89e3\u51b3\u65b9\u6cd5</p> \u6cd51\u6cd52 <p>\u5728\u9009\u62e9\u589e\u5e7f\u8def\u5f84\u65f6\uff0c\u603b\u662f\u6311\u9009\u5bf9\u6d41\u91cf\u63d0\u5347\u6700\u5927\u7684\u8def\u5f84</p> <p>\u5982\u4f55\u5b9e\u73b0\uff1a\u7a0d\u5fae\u6539\u53d8\u4e00\u4e0b Dijkstra \u7b97\u6cd5</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a</p> \\[ \\begin{align} T = &amp; T_{augmentation} \\cdot T_{find\\ a\\ path} \\notag \\\\ = &amp; O(|E| \\log cap_{max}) \\cdot O(|E|\\log |V|) \\notag \\\\ = &amp; O(|E|^2 \\log |V|) (\\text{if } cap_{max} \\text{ is a small integer}) \\notag \\end{align} \\] <p>\u5728\u9009\u62e9\u589e\u5e7f\u8def\u5f84\u65f6\uff0c\u6311\u9009\u8fb9\u6700\u5c11\u7684\u589e\u5e7f\u8def\u5f84</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a</p> \\[ \\begin{align} T = &amp; T_{augmentation} \\cdot T_{find\\ a\\ path} \\notag \\\\ = &amp; O(|E|) \\cdot O(|E| \\cdot |V|)\\quad (\\text{unweighted shortest path algorithm}) \\notag \\\\ = &amp; O(|E|^2 |V|) \\notag \\end{align} \\]"},{"location":"9-x.html#supplements","title":"Supplements","text":"<ul> <li>\u66f4\u4f18\u7684\u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u5c06\u81f3 \\(O(|E||V|\\log(|V|^2/|E|))\\)\u548c\\(O(|E||V| + |V|^{2 + \\epsilon})\\)</li> <li>\u5bf9\u4e8e\u67d0\u4e9b\u7279\u6b8a\u60c5\u51b5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u53ef\u4ee5\u964d\u4f4e\uff1a\u5982\u679c\u9664\u4e86\u6e90\u70b9\u548c\u6c47\u70b9\u5916\u7684\u6240\u6709\u9876\u70b9\u7684\u5165\u8fb9\u5bb9\u91cf\u4e3a1\uff0c\u6216\u8005\u51fa\u8fb9\u5bb9\u91cf\u4e3a 1\uff0c\u90a3\u4e48\u6700\u4f18\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(|E||V|^{\\frac{1}{2}})\\)</li> <li>\u66f4\u590d\u6742\u7684\u95ee\u9898\uff1a\u6700\u5c0f\u8d39\u7528\u6d41\u95ee\u9898(min-cost flow problem)\u2014\u2014\u6bcf\u6761\u8fb9\u4e0d\u4ec5\u6709\u5bb9\u91cf\uff0c\u8fd8\u8981\u8003\u8651\u5355\u4f4d\u6d41\u91cf\u7684\u8d39\u7528\u3002\ud83c\udfaf\uff1a\u8981\u627e\u5230\u6240\u6709\u6700\u5927\u6d41\u91cf\u4e2d\u7684\u6700\u5c0f\u6210\u672c</li> </ul>"},{"location":"9-x.html#minimum-spanning-tree","title":"Minimum Spanning Tree","text":"<p>\u5b9a\u4e49\uff1a\u56fe \\(G\\) \u7684\u751f\u6210\u6811(spanning tree)\u662f\u4e00\u68f5\u5305\u542b\u6240\u6709\u9876\u70b9 \\(V(G)\\)\uff08\u4f46\u4e0d\u4e00\u5b9a\u5305\u542b\u6240\u6709\u8fb9\uff09\u7684\u6811</p> <p>\ud83c\udf30\uff1a</p> <p>\u5982\u4f55\u7406\u89e3\u6700\u5c0f\u751f\u6210\u6811(minimum spanning tree)\uff1f</p> <ul> <li> <p>\u201c\u6811\u201d\uff1a\u65e0\u73af\u4e14\u8fb9\u7684\u6570\u91cf\u4e3a |V| - 1</p> <p>\u56e0\u6b64\u5f53\u56fe\u7684\u8fb9\u6570 &lt; |V| - 1\u65f6\uff0c\u8be5\u56fe\u4e0d\u5b58\u5728\u6700\u5c0f\u751f\u6210\u6811</p> </li> <li> <p>\u201c\u6700\u5c0f\u201d\uff1a\u4fdd\u8bc1\u751f\u6210\u6811\u7684\u6240\u6709\u8fb9\u7684\u6743\u91cd\u548c\u6700\u5c0f</p> </li> <li>\u201c\u751f\u6210\u201d\uff1a\u8986\u76d6\u6240\u6709\u7684\u9876\u70b9</li> <li>\u6700\u5c0f\u751f\u6210\u6811\u5b58\u5728\u7684\u5145\u8981\u6761\u4ef6\u662f\u56fe\\(G\\)\u662f\u8fde\u901a\u7684</li> <li>\u5982\u679c\u5728\u751f\u6210\u6811\u4e2d\u6dfb\u52a0\u4e00\u6761\u8fb9\uff0c\u5c31\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af</li> <li>\u6700\u5c0f\u751f\u6210\u6811\u662f\u5e76\u4e0d\u4e00\u5b9a\u662f\u552f\u4e00\u7684\uff0c\u4f46\u6700\u5c0f\u751f\u6210\u6811\u7684\u603b\u6743\u91cd\u662f\u552f\u4e00\u7684</li> </ul> <p>\u5982\u4f55\u6c42\u89e3\uff1f\u2014\u2014\u8d2a\u5fc3\u7b97\u6cd5(greedy algorithm)\uff0c\u6bcf\u4e00\u6b65\u90fd\u91c7\u53d6\u6700\u4f18\u7b56\u7565\uff0c\u4f46\u6709\u4ee5\u4e0b\u9650\u5236\uff1a</p> <ul> <li>\u5fc5\u987b\u4f7f\u7528\u56fe\u91cc\u9762\u7684\u8fb9</li> <li>\u5fc5\u987b\u7528\u5230 \\(|V| - 1\\) \u6761\u8fb9</li> <li>\u4e0d\u80fd\u51fa\u73b0\u73af</li> </ul>"},{"location":"9-x.html#prims-algorithm","title":"Prim's Algorithm","text":"<p>\u65b9\u6cd5\uff1a\u751f\u6210\u4e00\u68f5\u6811\uff0c\u4e0e Dijkstra \u7b97\u6cd5\u975e\u5e38\u76f8\u4f3c\uff0c\u9002\u7528\u4e8e\u7a20\u5bc6\u56fe\u4e2d</p> <ul> <li>\u521d\u59cb\u60c5\u51b5\u4e0b\uff0c\u5148\u5c06\u4e00\u4e2a\u9876\u70b9\u4f5c\u4e3a\u6811\u7684\u6839\u653e\u5165\u6811\u5185</li> <li>\u5728\u6bcf\u4e2a\u9636\u6bb5\uff0c\u6dfb\u52a0\u8fb9(u, v)\uff0c\u6ee1\u8db3 (u, v) \u7684\u6743\u91cd\u662f\u6765\u81ea\u5df2\u6709\u751f\u6210\u6811\u7684\u9876\u70b9 u \u548c\u6765\u81ea\u751f\u6210\u6811\u5916\u7684 v \u4e4b\u95f4\u7684\u6240\u6709\u8fb9\u4e2d\u6743\u91cd\u6700\u5c0f\u7684\u90a3\u6761\uff0c\u4e14\u4e0d\u4ea7\u751f\u73af\uff0c\u7136\u540e\u5c06\u65b0\u7684\u9876\u70b9 v\u6dfb\u52a0\u81f3\u6811\u91cc</li> <li>\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u76f4\u81f3\u6240\u6709\u9876\u70b9\u5747\u5728\u751f\u6210\u6811\u5185</li> </ul> \u52a8\u753b\u6f14\u793a <p> </p> <p>\u4e0eDijkstra\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff1a</p> <ul> <li> <p>\u8981\u4fdd\u5b58\u4e24\u7c7b\u503c \\(d_v\\) \u548c \\(p_v\\)\uff1a</p> <ul> <li>\\(d_v\\)\uff1a\u8fde\u63a5 \\(v\\) \u548c\u5df2\u77e5\u9876\u70b9\u7684\u6700\u77ed\u8def\u7684\u6743\u91cd</li> <li>\\(p_v\\)\uff1a\u6700\u540e\u4e00\u4e2a\u5bfc\u81f4 \\(d_v\\) \u6539\u53d8\u7684\u9876\u70b9</li> </ul> </li> <li> <p>\u66f4\u65b0\u89c4\u5219\u66f4\u52a0\u7b80\u5355\uff1a\u5bf9\u4e8e\u5df2\u7ecf\u9009\u5165\u6811\u5185\u7684\u9876\u70b9 \\(v\\)\uff0c\u5b83\u7684\u90bb\u63a5\u9876\u70b9 \\(w\\) \u6ee1\u8db3 \\(d_w = \\min(d_w, c_{w, v})\\)</p> </li> </ul> <p>\u6ce8\uff1a\u7531\u4e8e\u8fd9\u662f\u65e0\u5411\u56fe\uff0c\u56e0\u6b64\u9700\u8981\u7528\u5230\u4e24\u5f20\u90bb\u63a5\u8868\u5b58\u50a8\u56fe</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a</p> <ul> <li>\u4e0d\u7528\u5806\uff08\u9002\u7528\u4e8e\u7a20\u5bc6\u56fe\uff09\uff1a\\(O(|V|^2)\\)</li> <li>\u4e8c\u53c9\u5806\uff08\u9002\u7528\u4e8e\u7a00\u758f\u56fe\uff09\uff1a\\(O(E\\log|V|)\\)</li> </ul> \u4ee3\u7801\u5b9e\u73b0 <pre><code>/*\n* Function: prim\n* --------------\n*   Find a minimum spanning tree for the given undirected\n*   graph by using Prim's algorithm\n*\n*   w_adj_mat: the weighted adjacency matrix\n*   n: the number of vertices\n*\n*   returns: the total edge weights of the MST\n*/\nint prim(int w_adj_mat[MAX][MAX], int n)\n{\nint dist[MAX]; // distance from vertex i to the known part\nint prev[MAX]; // for tracing the edges of MST\nint known[MAX]; // 1 if the vertex i is checked, 0 if not\n\n// initialization\nfor (int i = 0; i &lt; n; i++)\n{\n    dist[i] = INFINITY;\n    prev[i] = -1;\n    known[i] = 0;\n}\n\ndist[0] = 0; // start from vertex 0\nfor (int k = 0; k &lt; n; ++k)\n{\n    // choose the vertex closest to the known part\n    int min_d = INFINITY;\n    int min_v = -1;\n    for (int i = 0; i &lt; n; i++)\n    {\n    if (!known[i] &amp;&amp; dist[i] &lt; min_d)\n    {\n        min_d = dist[i];\n        min_v = i;\n    }\n    }\n\n    // relaxation of vertices adjacent to the chosen one\n    known[min_v] = 1;\n    for (int i = 0; i &lt; n; i++)\n    {\n    if (!known[i])\n    {\n        if (w_adj_mat[min_v][i] &amp;&amp; dist[i] &gt; w_adj_mat[min_v][i])\n        {\n        dist[i] = w_adj_mat[min_v][i];\n        prev[i] = min_v;\n        }\n    }\n    }\n}\n\n// total edge weights\nint total_w = 0;\nfor (int i = 1; i &lt; n; ++i)\n    total_w += dist[i];\nreturn total_w;\n}\n</code></pre>"},{"location":"9-x.html#kruskals-algorithm","title":"Kruskal's Algorithm","text":"<p>\u65b9\u6cd5\uff1a\u7ef4\u6301\u4e00\u7247\u68ee\u6797\uff08\u4e00\u7ec4\u6811\uff09\uff0c\u9002\u7528\u4e8e\u7a00\u758f\u56fe\u4e2d</p> <ul> <li>\u521d\u59cb\u60c5\u51b5\u4e0b\uff0c\u6709 \\(|V|\\) \u68f5\u5355\u4e2a\u8282\u70b9\u6784\u6210\u7684\u6811</li> <li>\u6dfb\u52a0\u4e00\u6761\u8fb9\uff0c\u53ef\u4ee5\u5408\u5e76\u4e24\u68f5\u6811\u3002\u5f53\u7b97\u6cd5\u7ed3\u675f\u65f6\uff0c\u5e94\u5f53\u53ea\u5269\u4e0b\u4e00\u68f5\u6811\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5f88\u81ea\u7136\u5730\u60f3\u5230\u4f7f\u7528\u5e76\u67e5\u96c6\u7684\u7b97\u6cd5</li> <li> <p>\u6311\u9009\u8fb9\uff08\u8fd9\u91cc\u5047\u8bbe\u6311\u9009\u8fb9 \\((u, v)\\) \uff09\u65f6\u8981\u6ce8\u610f\u7684\u7ec6\u8282\uff1a</p> <ul> <li>\u5982\u679c u, v \u5728\u540c\u4e00\u4e2a\u96c6\u5408\u5185\uff0c\u5219\u4e0d\u80fd\u6dfb\u52a0\u8fd9\u6761\u8fb9\uff08\u5426\u5219\u4f1a\u51fa\u73b0\u73af\uff09</li> <li>\u5426\u5219\u52a0\u5165\u8fd9\u6761\u8fb9\uff0c\u4f7f\u7528 <code>Union</code> \u7b97\u6cd5\u5c06\u4e24\u4e2a\u96c6\u5408\u5408\u5e76\u8d77\u6765</li> <li>\u7528\u5806\u7ef4\u62a4\u672a\u88ab\u68c0\u9a8c\u8fc7\u7684\u6700\u5c0f\u7684\u8fb9\uff0c\u6bcf\u5f53\u68c0\u9a8c\u4e00\u6761\u8fb9\u65f6\uff0c\u4f7f\u7528 <code>DeleteMin</code> \u7b97\u6cd5</li> </ul> </li> </ul> <p>\u56fe\u793a\uff1a</p> <p>\u4f2a\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <pre><code>void Kruskal(Graph G)\n{\n    T = { };\n    while (T contains less than [V] - 1 edges &amp;&amp; E is not empty)\n    {\n        choose a least cost edge(v, w) from E; // DeleteMin\n        delete(v, w) from E;\n        if ((v, w) does not create a cycle in T)\n            add(v, w) to T; // Union/Find\n        else\n            discard(v, w);\n    }\n    if (T contains fewer than [V] - 1 edges)\n        Error(\"No spanning tree\");\n}\n</code></pre> \u6b63\u5f0f\u4ee3\u7801\u5b9e\u73b0 <pre><code>void Kruskal(Graph G)\n{\n    int EdgesAccepted;\n    DisjSet S;\n    PriorityQueue H;\n    Vertex U, V;\n    SetType Uset, Vset;\n    Edge E;\n\n    Initialize(S);\n    ReadGraphIntoHeapArray(G, H);\n    BuildHeap(H);\n\n    EdgeAccepted = 0;\n    while (EdgesAccepted &lt; NumVertex - 1)\n    {\n        E = DeleteMin(H);  // E = (U, V)\n        Uset = Find(U, S);\n        Vset = Find(V, S);\n        if (Uset != Vset)\n        {\n            // Accept the edge\n            EdgesAccepted++;\n            SetUnion(S, Uset, Vset);\n        }\n    }\n}\n</code></pre> <p>\u7531\u4e8e\u6bcf\u6761\u8fb9\u8981\u5b58 3 \u4e2a\u5b57\u6bb5\uff0c\u56e0\u6b64\u7528\u6307\u9488\u6570\u7ec4\u5b58\u50a8\u8fb9\u53ef\u80fd\u66f4\u52a0\u9ad8\u6548\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(T = O(|E|\\log |E|) = O(|E| \\log |V|) \\quad (|E| = O(|V|^2))\\)</p>"},{"location":"9-x.html#applications-of-depth-first-search","title":"Applications of Depth-First Search","text":"<p>\u6df1\u5ea6\u4f18\u5148\u641c\u7d22(depth-first search, DFS)\u662f\u4e00\u79cd\u524d\u5e8f\u904d\u5386\u7684\u6cdb\u5316</p> <ul> <li>\u6811\uff1a\u65f6\u95f4\u590d\u6742\u5ea6 \\(T = O(|E|)\\ (|E| = \\Theta(|V|))\\)</li> <li>\u56fe\uff1a\u6ce8\u610f\u8981\u907f\u514d\u73af(cycles)\uff0c\u6240\u4ee5\u8bbf\u95ee\u8fc7\u7684\u9876\u70b9\u5c31\u8981\u5bf9\u5176\u6807\u8bb0\uff0c\u7136\u540e\u63a5\u7740\u8bbf\u95ee\u672a\u8bbf\u95ee\u8fc7\u7684\u9876\u70b9\u3002</li> <li>\u5982\u679c\u65e0\u5411\u56fe\u4e0d\u8fde\u901a\uff0c\u6216\u8005\u6709\u5411\u56fe\u4e0d\u662f\u5f3a\u8fde\u901a\u7684\uff0c\u90a3\u4e48\u7528\u4e00\u6b21 DFS \u65e0\u6cd5\u8bbf\u95ee\u6240\u6709\u9876\u70b9\uff0c\u9700\u8981\u5bf9\u672a\u6807\u8bb0\u7684\u9876\u70b9\u518d\u7528\u4e00\u6b21 DFS\uff0c\u76f4\u81f3\u6240\u6709\u9876\u70b9\u90fd\u88ab\u6807\u8bb0\u3002\u56e0\u6b64\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(|E| + |V|)\\)</li> </ul> <p>\u6a21\u7248\uff1a <pre><code>void DFS(Vertex V)\n{\n    visited[V] = true; // mark this vertex to void cycles\n    for (each W adjacent to V)\n        if (!visited[W])\n            DFS(W);\n}\n</code></pre></p>"},{"location":"9-x.html#undirected-graphs","title":"Undirected Graphs","text":"<p>\u5f53\u4e14\u4ec5\u5f53 1 \u6b21 DFS \u80fd\u591f\u904d\u5386\u6240\u6709\u9876\u70b9\u65f6\uff0c\u65e0\u5411\u56fe\u662f\u8fde\u901a\u7684</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u751f\u6210\u6811(depth-first spanning tree)\u6765\u5f62\u8c61\u5c55\u793a DFS \u7684\u8fc7\u7a0b\u3002\u5f53\u6211\u4eec\u53d1\u73b0\u67d0\u6761\u8fb9(v, w) \u4e2d\u7684 w \u5df2\u88ab\u6807\u8bb0\u8fc7\uff0c\u7528\u865a\u7ebf\u753b\u51fa\u8fd9\u6761\u8fb9\uff0c\u79f0\u4f5c\u201c\u56de\u8fb9(back edge)\u201d\uff0c\u8868\u793a\u8fd9\u6761\u8fb9\u4e0d\u5305\u542b\u4e8e\u751f\u6210\u6811\u91cc\uff0c\u5982\u56fe\u6240\u793a\uff1a</p> <p>\u5982\u679c\u65e0\u5411\u56fe\u4e0d\u8fde\u901a\uff0c\u5219\u53ef\u4ee5\u751f\u6210\u6df1\u5ea6\u4f18\u5148\u751f\u6210\u68ee\u6797(depth-first spanning forest)</p> <p>\u4ee3\u7801\u5b9e\u73b0\uff1a <pre><code>void ListComponents(Graph G)\n{\n    for (each V in G)\n    {\n        if (!visited[V])\n            DFS(V);\n            printf(\"\\n\");\n    }\n}\n</code></pre></p>"},{"location":"9-x.html#biconnectivity","title":"Biconnectivity","text":"<ul> <li> <p>\u5f53<code>G' = DeleteVertex(G, v)</code>\u81f3\u5c11\u6709 2 \u4e2a\u8fde\u901a\u5206\u91cf\u65f6\uff0c\u79f0<code>v</code>\u4e3a\u5173\u8282\u70b9(articulation point)\u6216\u8005\u5272\u70b9(cut vertex)</p> <p>\u6362\u53e5\u8bdd\u8bf4\uff0c\u5173\u8282\u70b9\u7684\u79fb\u9664\u80fd\u591f\u7834\u574f\u56fe\u7684\u8fde\u901a\u6027</p> </li> <li> <p>\u6ca1\u6709\u5173\u8282\u70b9\u7684\u8fde\u901a\u56fe <code>G</code> \u79f0\u4e3a\u53cc\u8fde\u901a\u56fe(biconnected graph)</p> <p>\u6ce8\uff1a\u4e4b\u6240\u4ee5\u79f0\u4e3a\u53cc\u8fde\u901a\u56fe\uff0c\u662f\u56e0\u4e3a\u81f3\u5c11\u9700\u8981\u79fb\u9664\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684\u9876\u70b9\uff0c\u624d\u80fd\u5f62\u6210\u6709\u591a\u4e2a\u8fde\u901a\u5206\u91cf\u7684\u5b50\u56fe</p> </li> <li> <p>\u53cc\u8fde\u901a\u5206\u91cf(biconnected component)\uff1a\u6781\u5927\u53cc\u8fde\u901a\u5b50\u56fe</p> </li> </ul> <p>\u6ce8\uff1a\u6ca1\u6709\u4e00\u6761\u8fb9\u4f1a\u540c\u65f6\u51fa\u73b0\u5728\u591a\u4e2a\u53cc\u8fde\u901a\u5206\u91cf\u4e2d\u3002\u56e0\u6b64 E(G) \u88ab\u53cc\u8fde\u901a\u5206\u91cf\u5212\u5206\uff0c\u800c\u53cc\u8fde\u901a\u5206\u91cf\u53c8\u88ab\u5173\u8282\u70b9\u5212\u5206</p> <p>\u95ee\u9898</p> <p>\u5bfb\u627e\u65e0\u5411\u8fde\u901a\u56fe G \u4e2d\u7684\u53cc\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570 = \u5173\u8282\u70b9\u7684\u4e2a\u6570 + 1</p> <p>\u89e3\u51b3\u65b9\u6cd5</p> <p>\u5982\u679c\u9898\u76ee\u7ed9\u51fa\u4e00\u5f20\u56fe\uff0c\u53eb\u6211\u4eec\u627e\u51fa\u6240\u6709\u5173\u8282\u70b9\uff0c\u8fd9\u53ea\u8981\u5bf9\u6bcf\u4e2a\u9876\u70b9\u8fdb\u884c\u5224\u65ad\uff08\u5047\u8bbe\u79fb\u9664\u67d0\u4e2a\u9876\u70b9\u540e\uff0c\u4f1a\u4e0d\u4f1a\u591a\u4e00\u4e9b\u8fde\u901a\u5206\u91cf\uff09\uff0c\u5f88\u5bb9\u6613\u5730\u627e\u5230\u6240\u6709\u5173\u8282\u70b9\u3002\u4f46\u4e0b\u9762\u6211\u4eec\u8981\u7528\u7a0b\u5e8f\u6765\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898</p> <p>\u7528\u5230\u7684\u53d8\u91cf\uff1a</p> <ul> <li><code>Num(v)</code>\uff1a\u9876\u70b9 v \u7684 DFS \u5e8f\u53f7</li> <li><code>Low(v)</code>\uff1a\u751f\u6210\u6811\u4e2d\u9876\u70b9 v \u7684\u6240\u6709\u5b69\u5b50\u8282\u70b9\u4ee5\u53ca v \u56de\u8fb9\u4e0a\u7684\u9876\u70b9\u4e2d <code>Num</code> \u7684\u6700\u5c0f\u503c(\\(\\min(Num(w_i))\\))\uff08\u7528\u5230\u540e\u5e8f\u904d\u5386\uff09</li> </ul> <ul> <li> <p>\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22(depth first search)\u5f97\u5230G\u7684\u751f\u6210\u6811</p> \u52a8\u753b\u6f14\u793a <p> </p> <p>\u6211\u4eec\u5f97\u5230\uff1a</p> <p> </p> <p>\u56de\u8fb9(back edges)(u, v)\uff1a\u5728\u56fe\u4e2d\u800c\u4e0d\u5728\u751f\u6210\u6811\u5185\u7684\u8fb9(u, v)\uff0c\u5b83\u53cd\u6620\u4e86 u \u548c v \u4e4b\u95f4\u6709\u7956\u8f88\u548c\u540e\u8f88\u7684\u5173\u7cfb\u3002\u5982\u679c u \u662f v \u7684\u7956\u5148\uff0c\u5219 <code>Num(u) &lt; Num(v)</code>\uff1b\u53cd\u4e4b <code>Num(u) &gt; Num(v)</code></p> <p><code>Low(u)</code> \u7684\u8ba1\u7b97\u516c\u5f0f\uff1a</p> \\[ \\begin{align} Low(u) = &amp; \\min\\{Num(u), \\min\\{Low(w)\\ |\\ w \\text{ is a child of }u\\} \\notag \\\\ &amp; , \\min\\{Num(w)\\ |\\ (u, w) \\text{ is a back edge}\\}\\} \\notag \\end{align} \\] <p>\u8868\u683c\uff08\u8bb0\u5f55\u4e86<code>Num(v)</code>\u548c<code>Low(v)</code>\uff09\uff1a</p> <p> </p> </li> <li> <p>\u627e\u5230G\u5185\u7684\u5173\u8282\u70b9</p> <ul> <li>\u5f53\u4e14\u4ec5\u5f53\u6839\u8282\u70b9\u81f3\u5c11\u6709 2 \u4e2a\u5b69\u5b50\u65f6\uff0c\u6839\u8282\u70b9\u4e3a\u5173\u8282\u70b9</li> <li>\u5f53\u4e14\u4ec5\u5f53\u9664\u6839\u8282\u70b9\u5916\u7684\u9876\u70b9u\u81f3\u5c11\u6709 1 \u4e2a\u5b69\u5b50\uff0c\u4e14\u8be5\u5b69\u5b50\u4e0e\u5b83\u7684\u7956\u5148\u4e4b\u95f4\u6ca1\u6709\u56de\u8fb9\uff08\u5373<code>Low(child) &gt;= Num(u)</code>\uff09\u65f6\uff0cu \u4e3a\u5173\u8282\u70b9</li> </ul> </li> </ul> \u4ee3\u7801\u5b9e\u73b0 <pre><code>// Assign Num and compute Parents\nvoid AssignNum(Vertex V)\n{\n    Vertex W;\n\n    Num[V] = Counter++;\n    Visited[V] = ture;\n    for each W adjacent to V\n        if (!Visited[W])\n        {\n            Parent[W] = V;\n            AssignNum(W);\n        }\n}\n\n// Assign Low; also check for articulation points\nvoid AssignLow(Vertex V)\n{\n    Vertex W;\n\n    Low[V] = Num[V]; // Rule 1\n    for each W adjacent to V\n    {\n        if (Num[W] &gt; Num[V])\n        {\n            AssignLow(W);\n            if (Low[W] &gt;= Num[V])\n                printf(\"%v is an articulation point\\n\", v);\n            Low[V] = Min(Low[V], Low[W]);  // Rule 3\n        }\n        else if (Parent[V] != W)\n            Low[V] = Min(Low[V], Num[W]);  // Rule 2\n    }\n}\n\n// Testing for articulation points in one depth-first search\nvoid FindArt(Vertex V)\n{\n    Vertex W;\n\n    Visited[V] = True\n    Low[V] = Num[V] = Counter; // Rule 1\n    for each W adjacent to V\n    {\n        if (!Visited[W])\n        {\n            Parent[W] = V;\n            FindArt(W);\n            if (Low[W] &gt;= Num[V])\n                printf(\"%v is an articulation point\\n\", v);\n            Low[V] = Min(Low[V], Low[W]);  // Rule 3\n        }\n        else if (Parent[V] != W)\n            Low[V] = Min(Low[V], Num[W]);  // Rule 2\n    }\n}\n</code></pre>"},{"location":"9-x.html#euler-circuits","title":"Euler Circuits","text":"<ul> <li>\u6b27\u62c9\u8def(Euler tour)\uff1a\u5728\u7b14\u4e0d\u79bb\u7eb8\u7684\u60c5\u51b5\u4e0b\uff0c\u56fe\u4e0a\u7684\u6bcf\u6761\u8fb9\u5747\u88ab\u904d\u5386\u4e00\u904d\uff08\u4e00\u7b14\u753b\uff09</li> <li>\u6b27\u62c9\u73af(Euler circuit)\uff1a\u5728\u7b14\u4e0d\u79bb\u7eb8\u7684\u60c5\u51b5\u4e0b\uff0c\u56fe\u4e0a\u7684\u6bcf\u6761\u8fb9\u5747\u88ab\u904d\u5386\u4e00\u904d\uff0c\u4e14\u6700\u540e\u56de\u5230\u8d77\u70b9\u7684\u4f4d\u7f6e</li> </ul> \u52a8\u753b\u6f14\u793a <p>\u5224\u65ad\u65b9\u6cd5\uff1a</p> <ul> <li>\u65e0\u5411\u56fe\uff1a<ul> <li>\u5f53\u4e14\u4ec5\u5f53\u56fe\u662f\u8fde\u901a\u7684\uff0c\u4e14\u6bcf\u4e2a\u9876\u70b9\u7684\u5ea6\u4e3a\u5076\u6570\u65f6\uff0c\u5b58\u5728\u6b27\u62c9\u73af</li> <li>\u5f53\u4e14\u4ec5\u5f53\u56fe\u662f\u8fde\u901a\u7684\uff0c\u4e14\u4ec5\u6709\u4e24\u4e2a\u9876\u70b9\u7684\u5ea6\u4e3a\u5947\u6570\u65f6\uff0c\u5b58\u5728\u6b27\u62c9\u8def</li> </ul> </li> <li>\u6709\u5411\u56fe\uff1a<ul> <li>\u5f53\u4e14\u4ec5\u5f53\u56fe\u662f\u5f31\u8fde\u901a\u7684\uff0c\u4e14\u6bcf\u4e2a\u9876\u70b9\u7684\u51fa\u5ea6 = \u5165\u5ea6\u65f6\uff0c\u5b58\u5728\u6b27\u62c9\u73af</li> <li>\u5f53\u4e14\u4ec5\u5f53\u56fe\u662f\u5f31\u8fde\u901a\u7684\uff0c\u4e14\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u9876\u70b9\u7684\u51fa\u5ea6 = \u5165\u5ea6 + 1\uff0c\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u9876\u70b9\u7684\u5165\u5ea6 = \u51fa\u5ea6 + 1\uff0c\u5176\u4f59\u9876\u70b9\u7684\u51fa\u5ea6 = \u5165\u5ea6\u65f6\uff0c\u5b58\u5728\u6b27\u62c9\u8def</li> </ul> </li> </ul> <p>\u5229\u7528DFS\u5bfb\u627e\u6b27\u62c9\u73af\uff1a</p> \u52a8\u753b\u6f14\u793a <p> </p> <ul> <li>\u7528\u94fe\u8868\u7ef4\u62a4\u8def\u5f84</li> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u90bb\u63a5\u8868\uff0c\u7ef4\u62a4\u4e00\u4e2a\u6307\u5411\u6700\u540e\u88ab\u626b\u63cf\u7684\u8fb9</li> <li>\u65f6\u95f4\u590d\u6742\u5ea6 \\(T = O(|E| + |V|)\\)</li> </ul> \u8865\u5145\uff1a\u54c8\u5bc6\u987f\u73af(Hamilton cycle) <p>\u65e0\u5411\u56fe\u4e2d\u80fd\u591f\u8bbf\u95ee\u6240\u6709\u9876\u70b9\u7684\u73af\u3002</p> \u4ee3\u7801\u5b9e\u73b0 <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define SIZE 201\n#define PSIZE 2001\n\ntypedef struct AdjVNode *PtrToAdjVNode;\nstruct AdjVNode{\n    int AdjV;\n    PtrToAdjVNode Next;\n};\n\ntypedef struct Vnode{\n    PtrToAdjVNode FirstEdge;\n} AdjList[SIZE];\n\ntypedef struct GNode *PtrToGNode;\nstruct GNode{\n    int Nv;\n    int Ne;\n    AdjList G;\n};\ntypedef PtrToGNode LGraph;\n\nvoid HCycle(LGraph g, int p[ ]);\n\nint main()\n{\n    int n, m, k, q;\n    int i, j;\n    int v1, v2;\n    int path[PSIZE];\n    LGraph Graph;\n    PtrToAdjVNode cur1, cur2;\n\n    Graph = (PtrToGNode)malloc(sizeof(struct GNode));\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    Graph-&gt;Nv = n;\n    Graph-&gt;Ne = m;\n    for (i = 0; i &lt; n; i++)\n    {\n        Graph-&gt;G[i].FirstEdge = NULL;\n    }\n\n    for (i = 0; i &lt; m; i++)\n    {\n        scanf(\"%d%d\", &amp;v1, &amp;v2);\n        cur1 = (PtrToAdjVNode)malloc(sizeof(struct AdjVNode));\n        cur1-&gt;AdjV = v2;\n        cur1-&gt;Next = Graph-&gt;G[v1 - 1].FirstEdge;\n        Graph-&gt;G[v1 - 1].FirstEdge = cur1;\n        cur2 = (PtrToAdjVNode)malloc(sizeof(struct AdjVNode));\n        cur2-&gt;AdjV = v1;\n        cur2-&gt;Next = Graph-&gt;G[v2 - 1].FirstEdge;\n        Graph-&gt;G[v2 - 1].FirstEdge = cur2;\n    }\n\n    scanf(\"%d\", &amp;k);\n    for (i = 0; i &lt; k; i++)\n    {\n        scanf(\"%d\", &amp;q);\n        for (j = 0; j &lt; q; j++)\n            scanf(\"%d\", &amp;path[j]);\n        if (q != Graph-&gt;Nv + 1)\n            printf(\"NO\\n\");\n        else\n            HCycle(Graph, path);\n    }\n\n    return 0;\n\n}\n\nvoid HCycle(LGraph g, int p[ ])\n{\n    int i;\n    int flag[SIZE];\n    PtrToAdjVNode cur;\n\n    if (p[0] != p[g-&gt;Nv])\n    {\n        printf(\"NO\\n\");\n    }\n    else\n    {\n        for (i = 0; i &lt; g-&gt;Nv; i++)\n            flag[i] = 0;\n        for (i = 1; i &lt; g-&gt;Nv + 1; i++)\n        {\n            if (flag[p[i - 1] - 1] == 1)\n            {\n                printf(\"NO\\n\");\n                return;\n            }\n            cur = g-&gt;G[p[i - 1] - 1].FirstEdge;\n            while (cur != NULL &amp;&amp; cur-&gt;AdjV != p[i])\n                cur = cur-&gt;Next;\n            if (cur == NULL)\n            {\n                printf(\"NO\\n\");\n                return;\n            }\n            flag[p[i - 1] - 1] = 1;\n        }\n        printf(\"YES\\n\");\n    }\n}\n</code></pre>"}]}